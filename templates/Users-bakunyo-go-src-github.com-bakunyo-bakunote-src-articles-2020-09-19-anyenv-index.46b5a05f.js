(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{80:function(e,n,a){"use strict";a.r(n);var t=a(0),l=a.n(t),c=a(22),s=a.n(c),b=a(62),p=a.n(b),r=a(199),m={},j="wrapper";function o(e){var n=e.components,a=p()(e,["components"]);return Object(r.a)(j,s()({},m,a,{components:n,mdxType:"MDXLayout"}),Object(r.a)("h2",null,"概要"),Object(r.a)("p",null,"自分は Ruby には ",Object(r.a)("a",s()({parentName:"p"},{href:"https://github.com/rbenv/rbenv"}),"rbenv")," 、 Go には ",Object(r.a)("a",s()({parentName:"p"},{href:"https://github.com/syndbg/goenv"}),"goenv")," と、プログラミング言語のバージョン管理にインタフェースの共通している **env 系を使っています。"),Object(r.a)("p",null,"今回たまたま知った ",Object(r.a)("a",s()({parentName:"p"},{href:"https://github.com/anyenv/anyenv"}),"anyenv")," は、それら **env と付くものをまとめて扱えるツールです。"),Object(r.a)("p",null,"バラバラになっていた **env を anyenv 経由で扱えるようにまとめたので、その手順をメモしておきます。"),Object(r.a)("h2",null,"移行手順"),Object(r.a)("h3",null,"anyenv のインストール"),Object(r.a)("p",null,"公式の手順通りに行ないます（最新の手順は公式を参照してください）。",Object(r.a)("br",{parentName:"p"}),"\n","手元の環境は macOS だったので Homebrew 経由でインストールしました。"),Object(r.a)("pre",null,Object(r.a)("code",s()({parentName:"pre"},{className:"hljs language-bash"}),Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# anyenv のインストール"),"\n$ brew install anyenv\n\n",Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# 以下で出力される anyenv の初期化スクリプトを .bash_profile に追加"),"\n$ anyenv init\n\n",Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# ターミナルを再起動し、出力される以下のコマンドを実行"),"\n$ anyenv install --init")),Object(r.a)("h3",null,"**env のインストール"),Object(r.a)("p",null,"自分に必要な各言語のバージョン管理ツールを anyenv 経由でインストールします。",Object(r.a)("br",{parentName:"p"}),"\n","といっても、 ",Object(r.a)("inlineCode",{parentName:"p"},"anyenv install")," の後に欲しいものを指定するだけです。"),Object(r.a)("pre",null,Object(r.a)("code",s()({parentName:"pre"},{className:"hljs language-bash"}),Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# rbenv, goenv, nodenv をインストール"),"\n$ anyenv install rbenv\n$ anyenv install goenv\n$ anyenv install nodenv")),Object(r.a)("p",null,"**env への PATH は anyenv が通してくれるので、追加の設定は不要です。",Object(r.a)("br",{parentName:"p"}),"\n","必要な言語バージョンを指定してインストール可能です。"),Object(r.a)("pre",null,Object(r.a)("code",s()({parentName:"pre"},{className:"hljs language-bash"}),Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# **env 系のコマンドがそのまま使える"),"\n$ rbenv install -l ",Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# インストール可能なバージョン一覧を表示"),"\n$ rbenv install x.y.z ",Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# バージョンを指定してインストール"))),Object(r.a)("h3",null,"旧ツールのお掃除"),Object(r.a)("p",null,"これまで利用していた **env は直接使う必要がなくなったため、削除します。"),Object(r.a)("pre",null,Object(r.a)("code",s()({parentName:"pre"},{className:"hljs language-bash"}),Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# アンインストール"),"\n$ brew uninstall rbenv\n$ brew uninstall goenv\n$ brew uninstall nodenv\n\n",Object(r.a)("span",s()({parentName:"code"},{className:"hljs-comment"}),"# .bash_profile から **env init してる箇所や PATH を通している箇所を削除"),"\n$ vim ~/.bash_profile")),Object(r.a)("h2",null,"マニフェストの更新"),Object(r.a)("p",null,"例えば rbenv で利用可能な言語バージョンが増えた場合、 ruby-build を最新化する等の手順が必要だったかと思います。\nanyenv では、それらのマニフェスト更新に対してもコマンド一発でできるようにしてくれています（神）。"),Object(r.a)("pre",null,Object(r.a)("code",s()({parentName:"pre"},{className:"hljs language-bash"}),"$ anyenv install --update")),Object(r.a)("h2",null,"参考"),Object(r.a)("p",null,Object(r.a)("a",s()({parentName:"p"},{href:"https://github.com/anyenv/anyenv"}),"anyenv - GitHub")))}o.isMDXComponent=!0;var v=a(200);n.default=function(){return l.a.createElement(v.a,null,l.a.createElement(o,null))}}}]);