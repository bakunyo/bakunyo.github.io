(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{94:function(e,a,n){"use strict";n.r(a);var t=n(0),l=n.n(t),r=n(22),p=n.n(r),c=n(62),b=n.n(c),o=n(197),i={},s="wrapper";function u(e){var a=e.components,n=b()(e,["components"]);return Object(o.a)(s,p()({},i,n,{components:a,mdxType:"MDXLayout"}),Object(o.a)("p",null,"人生初のGemをつくってみました！\n",Object(o.a)("a",p()({parentName:"p"},{href:"https://rubygems.org/gems/rspec_rake"}),"rspec_rake")),Object(o.a)("h1",null,"背景"),Object(o.a)("p",null,"Rakeタスクのテスト(RSpec)を書く時に躓くことが多く、そこを楽にできたらいいなーと思ったのがきっかけです。あとそろそろGemつくってみたかった。"),Object(o.a)("h1",null,"使い方"),Object(o.a)("p",null,"仮に、"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Railsプロジェクト"),Object(o.a)("li",{parentName:"ul"},"Rakeファイルは",Object(o.a)("inlineCode",{parentName:"li"},"lib/tasks"),"以下に入ってる")),Object(o.a)("p",null,"という想定だと、以下のような感じで設定します。"),Object(o.a)("pre",null,Object(o.a)("code",p()({parentName:"pre"},{}),"# in spec/rails_helper.rb\n\nRSpecRake.configure do |config|\n  config.require_tasks(File.join(Rails.root, 'lib', 'tasks'))\n  config.auto_reenable = true\nend\n")),Object(o.a)("p",null,Object(o.a)("inlineCode",{parentName:"p"},".require_tasks"),"はRakeタスク定義してるだけなので、他の方法でも良いです。\nどちらかと言うと、",Object(o.a)("inlineCode",{parentName:"p"},".auto_reenable"),"の方が欲しい機能でした。"),Object(o.a)("h1",null,"auto_reenable"),Object(o.a)("p",null,Object(o.a)("a",p()({parentName:"p"},{href:"http://qiita.com/morygonzalez/items/699749c631f66e62637b"}),"Rake タスクをテストコードの中で複数回実行する"),"\nこちらの記事に書かれているように、Rakeタスクの",Object(o.a)("inlineCode",{parentName:"p"},"#invoke"),"メソッドを2回以上実行する時は、その都度",Object(o.a)("inlineCode",{parentName:"p"},"#reenable"),"メソッドを呼ぶ必要があります。\nここではテストなので、成功パターン・失敗パターンだけでも2回以上実行することになりますよね…！"),Object(o.a)("p",null,"で、毎度",Object(o.a)("inlineCode",{parentName:"p"},"#reenable"),"を呼ぶのは面倒なので、"),Object(o.a)("pre",null,Object(o.a)("code",p()({parentName:"pre"},{}),"  config.auto_reenable = true\n")),Object(o.a)("p",null,"と設定すれば、タスク実行後に自動的に",Object(o.a)("inlineCode",{parentName:"p"},"#reenable"),"するようにしました。"),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"但し、タスク内で別のタスクを呼んだりなど、無限ループするような書き方には注意です！")),Object(o.a)("p",null,"ちなみに、",Object(o.a)("inlineCode",{parentName:"p"},"#execute"),"メソッドなら何度でも実行できて楽なのですが、こっちはこっちでタスクに引数が渡しづらいという悩みが出てきたりします笑"),Object(o.a)("h1",null,"specファイル内でのタスク実行方法"),Object(o.a)("p",null,"上記の設定ができていれば、specファイル内では",Object(o.a)("inlineCode",{parentName:"p"},"Rake::Task"),"から対象のタスクを呼ぶだけでOKです。"),Object(o.a)("pre",null,Object(o.a)("code",p()({parentName:"pre"},{}),"# before, it, afterなどどこでも\nRake::Task['some:task'].invoke\n")),Object(o.a)("p",null,"各specファイルではRakeの定義などは要らないし、どのタスクでも呼べるので結構楽に書けると思います。"),Object(o.a)("h1",null,"懸念点"),Object(o.a)("p",null,"RSpec起動時にすべてのRakeファイルを読み込む想定なので、テストの実行時間が増えるかもしれないです。\n色んなプロジェクトで試したりとかしてないので、やってみてどうだったとか感想もらえると嬉しいです！"),Object(o.a)("h1",null,"参考にした記事"),Object(o.a)("p",null,Object(o.a)("a",p()({parentName:"p"},{href:"https://robots.thoughtbot.com/test-rake-tasks-like-a-boss"}),"Test Rake Tasks Like a BOSS"),"\n",Object(o.a)("a",p()({parentName:"p"},{href:"http://dev.classmethod.jp/server-side/ruby-on-rails/ruby-on-rails_rspec_rake_test/"}),"[Ruby on Rails]RSpecによるRakeのテスト"),"\n",Object(o.a)("a",p()({parentName:"p"},{href:"http://qiita.com/morygonzalez/items/699749c631f66e62637b"}),"Rake タスクをテストコードの中で複数回実行する"),"\n",Object(o.a)("a",p()({parentName:"p"},{href:"http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/"}),"RubyGemはめっちゃ簡単に作れる！")))}u.isMDXComponent=!0;var j=n(198);a.default=function(){return l.a.createElement(j.a,null,l.a.createElement(u,null))}}}]);