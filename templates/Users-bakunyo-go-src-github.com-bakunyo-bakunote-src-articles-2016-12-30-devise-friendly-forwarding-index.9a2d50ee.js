(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{99:function(e,a,n){"use strict";n.r(a);var t=n(0),s=n.n(t),r=n(22),l=n.n(r),c=n(62),o=n.n(c),p=n(193),i={},m="wrapper";function j(e){var a=e.components,n=o()(e,["components"]);return Object(p.a)(m,l()({},i,n,{components:a,mdxType:"MDXLayout"}),Object(p.a)("h2",null,"前置き"),Object(p.a)("p",null,"Railsでの認証に ",Object(p.a)("a",l()({parentName:"p"},{href:"https://github.com/plataformatec/devise"}),"Devise")," を使っている人は多いと思います。\nただ、 Devise はデフォルトでは",Object(p.a)("strong",{parentName:"p"},"フレンドリーフォワーディング"),"が効いていません。"),Object(p.a)("p",null,"フレンドリーフォワーディングとは、ユーザーが認証前に開こうとしていたページへ、認証後にリダイレクトさせることです。\n参考： ",Object(p.a)("a",l()({parentName:"p"},{href:"http://railstutorial.jp/chapters/updating_and_deleting_users?version=4.2#sec-friendly_forwarding"}),"Rails チュートリアル")),Object(p.a)("p",null,"最近機会があったので、",Object(p.a)("a",l()({parentName:"p"},{href:"https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update"}),"DeviseのHow To"),"を参考に実装しました。\nその際にやったことを残しておきます。"),Object(p.a)("p",null,"なお、各バージョンは以下の通りです。"),Object(p.a)("ul",null,Object(p.a)("li",{parentName:"ul"},"Ruby 2.3.1"),Object(p.a)("li",{parentName:"ul"},"Rails 4.2.7.1"),Object(p.a)("li",{parentName:"ul"},"Devise 3.5.1")),Object(p.a)("h2",null,"手順"),Object(p.a)("h3",null,"アクセスされたURLを保存する"),Object(p.a)("p",null,"認証前にアクセスしようとしたページをセッションに保存します。\n",Object(p.a)("inlineCode",{parentName:"p"},"current_user")," が取得できれば認証できているので、その場合は除外しています。\nまた、 ",Object(p.a)("inlineCode",{parentName:"p"},"devise_controller")," の各アクションの場合も除外しています。"),Object(p.a)("pre",null,Object(p.a)("code",l()({parentName:"pre"},{className:"hljs language-ruby"}),Object(p.a)("span",l()({parentName:"code"},{className:"hljs-comment"}),"# app/controllers/application_controller.rb"),"\n\nbefore_action ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":store_current_location"),", ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),"unless:")," ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":devise_controller?"),"\n\nprivate\n\n",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-function"}),Object(p.a)("span",l()({parentName:"span"},{className:"hljs-keyword"}),"def")," ",Object(p.a)("span",l()({parentName:"span"},{className:"hljs-title"}),"store_current_location")),"\n  ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"if")," current_user\n  store_location_for(",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":user"),", request.url)\n",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"end"))),Object(p.a)("p",null,Object(p.a)("inlineCode",{parentName:"p"},"store_location_for")," を呼ぶと、",Object(p.a)("inlineCode",{parentName:"p"},"session[:user_return_to]")," にURLを保存してくれます。\n",Object(p.a)("inlineCode",{parentName:"p"},":user")," の部分は認証のscopeです。大抵の場合は ",Object(p.a)("inlineCode",{parentName:"p"},":user")," でOKかと思います。"),Object(p.a)("p",null,"実は、フレンドリーフォワーディングの実装としてはこれだけで完了です。\n",Object(p.a)("inlineCode",{parentName:"p"},"session[:user_return_to]")," にURLが入っていると、認証後にリダイレクトしてくれるようです。"),Object(p.a)("p",null,"ただ、セキュリティ対策として以下の場合は追加の対応が必要です。"),Object(p.a)("h3",null,"認証後にセッションをリセットする場合"),Object(p.a)("p",null,Object(p.a)("a",l()({parentName:"p"},{href:"http://railsguides.jp/"}),"Rails ガイド")," のセキュリティのページで、",Object(p.a)("a",l()({parentName:"p"},{href:"http://railsguides.jp/security.html#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83-%E5%AF%BE%E5%BF%9C%E7%AD%96"}),"セッション固定攻撃の対応策")," について紹介されています。\nログイン認証の際に、 ",Object(p.a)("inlineCode",{parentName:"p"},"reset_session")," を行なうというものです。\nこれを行なうと、当然上で保存したURLも消えてしまうので、その値だけ別途引き継ぐ対応を行ないます。"),Object(p.a)("h3",null,Object(p.a)("inlineCode",{parentName:"h3"},"user_return_to")," を引き継ぐ"),Object(p.a)("p",null,Object(p.a)("inlineCode",{parentName:"p"},"Devise::SessionsController")," を継承したControllerで以下の対応をします。"),Object(p.a)("pre",null,Object(p.a)("code",l()({parentName:"pre"},{className:"hljs language-ruby"}),Object(p.a)("span",l()({parentName:"code"},{className:"hljs-comment"}),"# app/controllers/sessions_controller.rb"),"\n\nbefore_action ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":reset_session_before_login"),", ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),"only:")," ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":create"),"\n\nprivate\n\n",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-function"}),Object(p.a)("span",l()({parentName:"span"},{className:"hljs-keyword"}),"def")," ",Object(p.a)("span",l()({parentName:"span"},{className:"hljs-title"}),"reset_session_before_login")),"\n  user_return_to = session[",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":user_return_to"),"]\n  reset_session\n\n  session[",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-symbol"}),":user_return_to"),"] = user_return_to ",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"if")," user_return_to\n",Object(p.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"end"))),Object(p.a)("p",null,"これで、認証時の ",Object(p.a)("inlineCode",{parentName:"p"},"reset_session")," をしつつフレンドリーフォワーディングをすることが可能になりました。"))}j.isMDXComponent=!0;var b=n(194);a.default=function(){return s.a.createElement(b.a,null,s.a.createElement(j,null))}}}]);