(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{98:function(e,a,n){"use strict";n.r(a);var t=n(0),c=n.n(t),s=n(22),l=n.n(s),p=n(62),r=n.n(p),m=n(199),o={},b="wrapper";function j(e){var a=e.components,n=r()(e,["components"]);return Object(m.a)(b,l()({},o,n,{components:a,mdxType:"MDXLayout"}),Object(m.a)("p",null,"久々に ",Object(m.a)("inlineCode",{parentName:"p"},"rails new")," したい欲求が高まったので、今風っぽく ",Object(m.a)("inlineCode",{parentName:"p"},"docker-compose")," を使って開発環境をつくります。\ndocker公式がドキュメントを用意してくれているので、まずはそれで感覚を掴んでみます。"),Object(m.a)("p",null,Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/compose/rails/"}),"Quickstart: Compose and Rails")),Object(m.a)("p",null,"OSはMac(Sierra)です。手元にあったdockerも少し古くなっていたので、アップグレードしつつ進めます。"),Object(m.a)("h1",null,"1. Docker環境の準備"),Object(m.a)("p",null,Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/docker-for-mac/install/"}),"Install Docker for Mac")," からStable版のDockerをダウンロード・インストールします。\n元々",Object(m.a)("strong",{parentName:"p"},"Docker Toolbox"),"をインストールしていましたが、",Object(m.a)("strong",{parentName:"p"},"Docker for Mac"),"のインストーラーがよしなに差し替えたり調整してくれました。"),Object(m.a)("p",null,"詳しくは以下です。\n",Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/docker-for-mac/docker-toolbox/"}),"Docker for Mac vs. Docker Toolbox")),Object(m.a)("p",null,"インストール後のバージョン確認"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-bash"}),"$ docker version\nClient:\n Version:      17.06.0-ce\n API version:  1.30\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:31:53 2017\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      17.06.0-ce\n API version:  1.30 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:51:55 2017\n OS/Arch:      linux/amd64\n Experimental: ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-literal"}),"true"),"\n\n[bakunyo@wasta 01:04:10] ~\n$ docker --version\nDocker version 17.06.0-ce, build 02c1d87\n[bakunyo@wasta 01:04:14] ~\n$ docker-compose --version\ndocker-compose version 1.14.0, build c7bdf9e\n[bakunyo@wasta 01:04:18] ~\n$ docker-machine --version\ndocker-machine version 0.12.0, build 45c69ad")),Object(m.a)("h1",null,"2. プロジェクトの定義"),Object(m.a)("p",null,"以下の4ファイルを作成します。"),Object(m.a)("p",null,Object(m.a)("strong",{parentName:"p"},"Dockerfile")),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-docker"}),Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"FROM")," ruby:",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-number"}),"2.3"),".",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-number"}),"3"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"RUN"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," apt-get update -qq && apt-get install -y build-essential libpq-dev nodejs"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"RUN"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," mkdir /myapp"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"WORKDIR"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," /myapp"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"ADD"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," Gemfile /myapp/Gemfile"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"ADD"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," Gemfile.lock /myapp/Gemfile.lock"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"RUN"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," bundle install"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-keyword"}),"ADD"),Object(m.a)("span",l()({parentName:"code"},{className:"bash"})," . /myapp"))),Object(m.a)("br",null),Object(m.a)("p",null,Object(m.a)("strong",{parentName:"p"},"Gemfile")),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-ruby"}),"source ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"'https://rubygems.org'"),"\ngem ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"'rails'"),", ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"'5.0.0.1'"))),Object(m.a)("br",null),Object(m.a)("p",null,Object(m.a)("strong",{parentName:"p"},"Gemfile.lock"),"\n空でOK"),Object(m.a)("br",null),Object(m.a)("p",null,Object(m.a)("strong",{parentName:"p"},"docker-compose.yml")),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-yml"}),Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"version:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"'3'"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"services:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  db:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    image:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"postgres"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  web:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    build:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"."),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    command:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"bundle")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"exec")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"rails")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"s")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-bullet"}),"-p")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-number"}),"3000")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-bullet"}),"-b")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"'0.0.0.0'"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    volumes:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-bullet"}),"      -")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),".:/myapp"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    ports:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-bullet"}),"      -")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),'"3000:3000"'),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"    depends_on:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-bullet"}),"      -")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"db"))),Object(m.a)("h1",null,"3. プロジェクトのビルド"),Object(m.a)("p",null,"ここからいよいよ ",Object(m.a)("inlineCode",{parentName:"p"},"docker-compose")," コマンドを使うので、軽く中身を確認しておきます。"),Object(m.a)("p",null,Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/compose/reference/run/"}),"docker-compose run"),"\n",Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/compose/reference/up/"}),"docker-compose up"),"\n",Object(m.a)("a",l()({parentName:"p"},{href:"https://docs.docker.com/compose/reference/build/"}),"docker-compose build")),Object(m.a)("p",null,Object(m.a)("inlineCode",{parentName:"p"},"docker-compose.yml")," には複数のサービスが定義されていて、 ",Object(m.a)("inlineCode",{parentName:"p"},"run")," は特定のサービス、 ",Object(m.a)("inlineCode",{parentName:"p"},"up")," は全サービス(特定も可)に対する命令です。どちらも、コンテナが create & start されます。\nまた、 ",Object(m.a)("inlineCode",{parentName:"p"},"run")," は指定したサービス上で実行するコマンドを渡すことができ、 ",Object(m.a)("inlineCode",{parentName:"p"},"docker-compose.yml")," に書いてある ",Object(m.a)("inlineCode",{parentName:"p"},"command")," を上書きするみたいですね。"),Object(m.a)("p",null,"簡単ですが以上を踏まえて、以下のコマンドを実行した後の流れを見ていきます。"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-bash"}),"$ docker-compose run web rails new . --force --database=postgresql")),Object(m.a)("h3",null,"流れの確認"),Object(m.a)("ul",null,Object(m.a)("li",{parentName:"ul"},"デフォルトネットワークを生成"),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"run web")," なのでサービス","[web]","の起動が始まる"),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"depend_on: db")," となっている為、サービス","[db]","を先に起動する",Object(m.a)("ul",{parentName:"li"},Object(m.a)("li",{parentName:"ul"},"postgresのimageをpull & dbサービス用のネットワークを生成"))),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"build: .")," なので ",Object(m.a)("inlineCode",{parentName:"li"},"Dockerfile")," を\b元にコンテナを生成する",Object(m.a)("ul",{parentName:"li"},Object(m.a)("li",{parentName:"ul"},"ruby:2.3.3 からimageをpull"),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"RUN apt-get update -qq && apt-get install -y build-essential libpq-dev nodejs"),Object(m.a)("ul",{parentName:"li"},Object(m.a)("li",{parentName:"ul"},"必要なライブラリのインストール"))),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"RUN mkdir /myapp")),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"WORKDIR /myapp")),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"ADD Gemfile /myapp/Gemfile")),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"ADD Gemfile.lock /myapp/Gemfile.lock")),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"RUN bundle install"),Object(m.a)("ul",{parentName:"li"},Object(m.a)("li",{parentName:"ul"},"WORKDIRを指定しているので、 ",Object(m.a)("inlineCode",{parentName:"li"},"/myapp/Gemfile")," を元にインストールが始まる"))),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"ADD . /myapp")))),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"docker-compose run")," の引数に渡しているコマンドが実行される(override)",Object(m.a)("ul",{parentName:"li"},Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"rails new . --force --database=postgresql")),Object(m.a)("li",{parentName:"ul"},"コマンドが上書きされているので、 ",Object(m.a)("inlineCode",{parentName:"li"},"rails s")," は実行されない"),Object(m.a)("li",{parentName:"ul"},Object(m.a)("inlineCode",{parentName:"li"},"--force")," オプションで、 ",Object(m.a)("inlineCode",{parentName:"li"},"Gemfile")," が上書きされる")))),Object(m.a)("h1",null,"4. 再ビルド"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-bash"}),"$ docker-compose build")),Object(m.a)("p",null,"Gemfileが書き換わったので、imageを再ビルドします。\n",Object(m.a)("inlineCode",{parentName:"p"},"rails new")," のとき ",Object(m.a)("inlineCode",{parentName:"p"},"--skip-bundle")," しても良さそうですね。"),Object(m.a)("h1",null,"5. DB設定"),Object(m.a)("p",null,Object(m.a)("inlineCode",{parentName:"p"},"config/database.yml")," を以下に書き換え"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-yml"}),Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"default:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-meta"}),"&default"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  adapter:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"postgresql"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  encoding:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"unicode"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  host:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"db"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  username:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"postgres"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  password:"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  pool:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-number"}),"5"),"\n\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"development:"),"\n  ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"<<:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-meta"}),"*default"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  database:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"myapp_development"),"\n\n\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"test:"),"\n  ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"<<:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-meta"}),"*default"),"\n",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-attr"}),"  database:")," ",Object(m.a)("span",l()({parentName:"code"},{className:"hljs-string"}),"myapp_test"))),Object(m.a)("p",null,Object(m.a)("inlineCode",{parentName:"p"},"host: db")," で接続できるということですね。\b便利！"),Object(m.a)("h1",null,"6. サーバー起動"),Object(m.a)("p",null,"サービスを起動します。"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-bash"}),"$ docker-compose up")),Object(m.a)("p",null,"別のターミナルを開き、以下を実行します。"),Object(m.a)("pre",null,Object(m.a)("code",l()({parentName:"pre"},{className:"hljs language-bash"}),"$ docker-compose run web rake db:create")),Object(m.a)("br",null),"http://localhost:3000 にアクセスします。",Object(m.a)("p",null,"ちゃんと\b起動していました！\nDocker環境さえあれば、たった数ファイルでここまで構築できるってすごいですね。\n大体の流れは掴めたので、これをベースに自分用にカスタマイズしていこうと思います。"))}j.isMDXComponent=!0;var N=n(200);a.default=function(){return c.a.createElement(N.a,null,c.a.createElement(j,null))}}}]);