{
    "version": "https://jsonfeed.org/version/1",
    "title": "BAKUNOTE",
    "home_page_url": "https://blog.bakunyo.com/",
    "feed_url": "https://blog.bakunyo.com/json",
    "description": "bakunyoの技術ノート。ruby, javascriptに関することやその他日々の記録です。",
    "icon": "https://blog.bakunyo.com/bakunyo.png",
    "author": {
        "name": "Izuta Hiroyuki",
        "url": "https://github.com/bakunyo"
    },
    "items": [
        {
            "id": "/2017/12/17/amazon-vpc/",
            "html_content": "<h1>背景</h1>\n<p>個人開発で\b使える\b本番サーバー環境が欲しかったのと、ちょうど仕事でも活かせそうだったので、自分でAWSのネットワーク環境を作ってみました。</p>\n<h1>全体像</h1>\n<p>用意したいサーバーは2つです。</p>\n<ul>\n<li>踏み台\n<ul>\n<li>sshでログインし、さらにsshで本番サーバーへログインするためのもの</li>\n<li>ssh\b\bログイン用のport以外は開けない</li>\n</ul>\n</li>\n<li>\b本番サーバー\n<ul>\n<li>踏み台サーバーからのみsshでログイン可能</li>\n<li>(Webサーバーを予定してるけど、\b今回はhttpのportを開けたりとかしない)</li>\n</ul>\n</li>\n</ul>\n<h1>VPCの作成</h1>\n<p>AWSで管理する仮想ネットワークを定義します。</p>\n<h4>AWSマネジメントコンソールからサービス＞VPCを選択</h4>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/1-dashboard.png\" alt=\"vpc-dashboard\"></p>\n<p>既にデフォルトのVPCが定義されていますが、今回は使わずに削除します。</p>\n<h4>「VPCの作成」を選択</h4>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/2-create-vpc.png\" alt=\"vpc-create\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Name</td>\n<td style=\"text-align:left\">vpc-sample</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IPv4 CIDR ブロック</td>\n<td style=\"text-align:left\">192.168.0.0/16</td>\n</tr>\n</tbody>\n</table>\n<p>CIDR ブロックは、仮想ネットワーク内のIPアドレスの範囲を指定します。<br>\n今回は <code>192.168.0.0</code> ~ <code>192.168.255.255</code> で 65,536 個のIPアドレスを持つことになります。<br>\n<a href=\"http://docs.aws.amazon.com/ja_jp/AmazonVPC/latest/UserGuide/VPC_Subnets.html\">VPC とサブネット</a></p>\n<p>CIDRブロックは 16~28の間で指定する必要があるようです。</p>\n<h1>サブネットの作成</h1>\n<p>上で作成したVPCの中でネットワークを小分けにします。</p>\n<h4>VPCダッシュボードの中から「サブネット」を選択</h4>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/3-subnet-dashboard.png\" alt=\"subnet-dashboard\"><br>\n「サブネットの作成」を選択し、以下2つのサブネットを作成しました。</p>\n<h4>1つ目</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">名前タグ</td>\n<td style=\"text-align:left\">subnet-sample-public</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VPC</td>\n<td style=\"text-align:left\">{作成\bしたvpc-sampleがデフォルトで選択されている}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">アベイラビリティゾーン</td>\n<td style=\"text-align:left\">ap-northeast-1a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IPv4 CIDR ブロック</td>\n<td style=\"text-align:left\">192.168.1.0/24</td>\n</tr>\n</tbody>\n</table>\n<h4>2つ目</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">名前タグ</td>\n<td style=\"text-align:left\">subnet-sample-private</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VPC</td>\n<td style=\"text-align:left\">{作成\bしたvpc-sampleがデフォルトで選択されている}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">アベイラビリティゾーン</td>\n<td style=\"text-align:left\">ap-northeast-1a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IPv4 CIDR ブロック</td>\n<td style=\"text-align:left\">192.168.2.0/24</td>\n</tr>\n</tbody>\n</table>\n<p>1つ目が踏み台用、2つ目が本番用という想定です。<br>\nそれぞれ256個ずつIPアドレスを持つことになります。</p>\n<p>アベイラビリティゾーンは東京では <code>ap-northeact-1a</code> <code>ap-northeast-1c</code> の2択\bですが、どちらが具体的にどこの場所、というのはなく、仮想ネットワーク毎にAWS側で振り分けられるそうです。<br>\nなので、 「 <code>1a</code> は沢山\bの人が選んで混んでそうだからa <code>1c</code> にしよう」みたいなことは意味がないらしいです。<br>\n\b情報元は\bどこかのネット記事で読んだのですがどこかへ行ってしまいました。。</p>\n<h1>インターネットゲートウェイの作成</h1>\n<p>仮想ネットワークをインターネットと繋げる為に、インターネットゲートウェイを作成します。<br>\nVPCダッシュボードからインターネットゲートウェイ＞インターネットゲートウェイの作成を\b選択<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/10-create-igw.png\" alt=\"create-igw\"><br>\n名前は <code>igw-sample</code> としておきます。</p>\n<h1>ルートテーブルの作成</h1>\n<p>\b\b上で作成したインターネットゲートウェイを紐付けるためのルートテーブルを作成します。<br>\nルートテーブル＞ルートテーブルの作成を選択し、 <code>rtb-sample</code> を指定します。<br>\n作成後、 <code>0.0.0.0/0</code> (デフォルトゲートウェイとして) インターネットゲートウェイを紐付けます。<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/11-create-rtb.png\" alt=\"create-rtb\"><br>\nさらに、「サブネットの関連付け」で踏み台用のサブネットである <code>subnet-sample-public</code> を紐付けます。</p>\n<h1>EC2（\b踏み台）の作成</h1>\n<p>いよいよサーバーです。<br>\nサービス＞EC2＞インスタンスから「インスタンスの作成」を選択<br>\n<a href=\"https://aws.amazon.com/jp/blogs/news/amazon-linux-2-release/\">ちょうど数日前にリリースされたAmazon Linux 2</a> が無料枠で選べる状態だったので、これを選択します。</p>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/5-create-ec2.png\" alt=\"create-ec2-1\"></p>\n<p><code>t2.micro</code> を選択します。</p>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/6-create-ec2.png\" alt=\"create-ec2-2\"></p>\n<p>インスタンスの詳細設定です。<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/7-create-ec2.png\" alt=\"create-ec2-3\"></p>\n<p>ちょっと項目数が多いのでかいつまんで。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ネットワーク</td>\n<td style=\"text-align:left\">vpc-sample</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">サブネット</td>\n<td style=\"text-align:left\">subnet-sample-public</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自動割り当てパブリックIP</td>\n<td style=\"text-align:left\">有効化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">プライマリIP</td>\n<td style=\"text-align:left\">192.168.1.10</td>\n</tr>\n</tbody>\n</table>\n<p>ここは若干ハマってしまった所なのですが、プライマリIPを <code>192.168.1.1</code> に指定したら、最後のEC2作成のフェーズでエラーになってしまいました。<br>\nプライマリIPは先頭と末尾（<code>192.168.1.0</code> <code>192.168.1.255</code>）だけ避ければ良いと思っていたのですが、他にも <code>192.168.1.1</code> <code>192.168.1.2</code> <code>192.168.1.3</code> は予約済アドレスとなるようです。<br>\n\bプライマリIPはわざわざ指定しなくても良かったかもしれないです。</p>\n<p>参考： <a href=\"http://blog.serverworks.co.jp/tech/2013/05/23/vpc_beginner-2/\">VPC初心者がハマりやすいポイントをまとめてみた</a></p>\n<p>次はストレージの追加です。<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-ec2.png\" alt=\"create-ec2-4\"><br>\nデフォルトのまま進めます。<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-tag.png\" alt=\"create-ec2-5\"><br>\n<code>Name</code> タグに <code>bastion</code> を指定します。</p>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-ec2.png\" alt=\"create-ec2-6\"><br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-sg.png\" alt=\"create-ec2-7\"></p>\n<p>「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を <code>bastion-sg</code> とします。<br>\nセキュリティグループの指定で、sshで <code>22</code> をどこからでも受けられるようにします。</p>\n<p>「確認と作成」をクリックして、キーペアを作成してダウンロードしたら完了です。</p>\n<h1>EC2(本番用)の作成</h1>\n<p>ほぼ踏み台と同じなので、違うところだけピックアップします。</p>\n<h3>詳細設定</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">サブネット</td>\n<td style=\"text-align:left\">subnet-sample-private</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自動割り当てパブリックIP</td>\n<td style=\"text-align:left\">サブネット設定を使用（無効）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">プライマリIP</td>\n<td style=\"text-align:left\">192.168.2.10</td>\n</tr>\n</tbody>\n</table>\n<h3>タグ</h3>\n<p><code>Name</code> タグに <code>webserver</code> を指定します。</p>\n<h3>セキュリティグループ</h3>\n<p>「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を <code>web-sg</code> とします。<br>\nセキュリティグループの指定で、sshで <code>22</code> を <code>192.168.1.0/24</code> からのみ受けられるようにします。（ここポイントです）</p>\n<h3>キーペア</h3>\n<p>踏み台で作成したものと同じものを使うようにします。</p>\n<h1>sshログインしてみる</h1>\n<p>踏み台→本番への接続も同じキーペアで通せるように、以下のコマンドを打ちます。</p>\n<pre><code class=\"hljs bash\">ssh-add {pemファイルのパス}\nssh-add -l <span class=\"hljs-comment\"># 登録できたか確認</span>\n</code></pre>\n<p>まずは踏み台のログインです。</p>\n<pre><code class=\"hljs bash\">ssh -i {pemファイルのパス} ec2-user@{踏み台に割当てられたパブリックIP}\n</code></pre>\n<p>ログインできたら、\b本番に指定したプライベートIPを使ってさらにsshログインします。</p>\n<pre><code class=\"hljs bash\">$ ssh \b192.168.2.10 <span class=\"hljs-comment\"># 本番用に指定したプライベートIP</span>\nLast login: Sun Dec 17 06:01:04 2017 from 192.168.1.10\n\n       __|  __|_  )\n       _|  (     /   Amazon Linux 2 AMI\n      ___|\\___|___|\n\nhttps://aws.amazon.com/amazon-linux-2/\n</code></pre>\n<p>これでログイン完了です！</p>\n<h3>ssh/configの設定</h3>\n<p>踏み台を通して1発で本番へログインできるようにするための設定です。<br>\n<code>~/.ssh/config</code> に記述します。</p>\n<pre><code class=\"hljs bash\">Host {踏み台用の好きな名前}\n  HostName {踏み台パブリックIP}\n  User ec2-user\n  IdentityFile {pemファイルのパス}\n\nHost {本番用の好きな名前}\n  HostName {本番用プライベートIP}\n  User ec2-user\n  IdentityFile {pemファイルのパス}\n  ProxyCommand ssh {踏み台用の好きな名前} -W %h:%p\n</code></pre>\n<p>上記を指定しておけば、 <code>ssh {本番用の好きな名前}</code> でログインできます。</p>\n",
            "url": "/2017/12/17/amazon-vpc/",
            "title": "Amazpn VPCで踏み台経由でログインできるネットワーク環境をつくってみる",
            "date_modified": "2017-12-17T04:30:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2017/07/06/docker-compose-rails/",
            "html_content": "<p>久々に <code>rails new</code> したい欲求が高まったので、今風っぽく <code>docker-compose</code> を使って開発環境をつくります。<br>\ndocker公式がドキュメントを用意してくれているので、まずはそれで感覚を掴んでみます。</p>\n<p><a href=\"https://docs.docker.com/compose/rails/\">Quickstart: Compose and Rails</a></p>\n<p>OSはMac(Sierra)です。手元にあったdockerも少し古くなっていたので、アップグレードしつつ進めます。</p>\n<h1>1. Docker環境の準備</h1>\n<p><a href=\"https://docs.docker.com/docker-for-mac/install/\">Install Docker for Mac</a> からStable版のDockerをダウンロード・インストールします。<br>\n元々<strong>Docker Toolbox</strong>をインストールしていましたが、<strong>Docker for Mac</strong>のインストーラーがよしなに差し替えたり調整してくれました。</p>\n<p>詳しくは以下です。<br>\n<a href=\"https://docs.docker.com/docker-for-mac/docker-toolbox/\">Docker for Mac vs. Docker Toolbox</a></p>\n<p>インストール後のバージョン確認</p>\n<pre><code class=\"hljs bash\">$ docker version\nClient:\n Version:      17.06.0-ce\n API version:  1.30\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:31:53 2017\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      17.06.0-ce\n API version:  1.30 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:51:55 2017\n OS/Arch:      linux/amd64\n Experimental: <span class=\"hljs-literal\">true</span>\n\n[bakunyo@wasta 01:04:10] ~\n$ docker --version\nDocker version 17.06.0-ce, build 02c1d87\n[bakunyo@wasta 01:04:14] ~\n$ docker-compose --version\ndocker-compose version 1.14.0, build c7bdf9e\n[bakunyo@wasta 01:04:18] ~\n$ docker-machine --version\ndocker-machine version 0.12.0, build 45c69ad\n</code></pre>\n<h1>2. プロジェクトの定義</h1>\n<p>以下の4ファイルを作成します。</p>\n<p><strong>Dockerfile</strong></p>\n<pre><code class=\"hljs docker\"><span class=\"hljs-keyword\">FROM</span> ruby:<span class=\"hljs-number\">2.3</span>.<span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs\n</span><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> mkdir /myapp\n</span><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /myapp\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> Gemfile /myapp/Gemfile\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> Gemfile.lock /myapp/Gemfile.lock\n</span><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> bundle install\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> . /myapp\n</span></code></pre>\n<br />\n<p><strong>Gemfile</strong></p>\n<pre><code class=\"hljs ruby\">source <span class=\"hljs-string\">'https://rubygems.org'</span>\ngem <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-string\">'5.0.0.1'</span>\n</code></pre>\n<br />\n<p><strong>Gemfile.lock</strong><br>\n空でOK</p>\n<br />\n<p><strong>docker-compose.yml</strong></p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  db:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">postgres</span>\n<span class=\"hljs-attr\">  web:</span>\n<span class=\"hljs-attr\">    build:</span> <span class=\"hljs-string\">.</span>\n<span class=\"hljs-attr\">    command:</span> <span class=\"hljs-string\">bundle</span> <span class=\"hljs-string\">exec</span> <span class=\"hljs-string\">rails</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-bullet\">-p</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-bullet\">-b</span> <span class=\"hljs-string\">'0.0.0.0'</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">.:/myapp</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"3000:3000\"</span>\n<span class=\"hljs-attr\">    depends_on:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">db</span>\n</code></pre>\n<h1>3. プロジェクトのビルド</h1>\n<p>ここからいよいよ <code>docker-compose</code> コマンドを使うので、軽く中身を確認しておきます。</p>\n<p><a href=\"https://docs.docker.com/compose/reference/run/\">docker-compose run</a><br>\n<a href=\"https://docs.docker.com/compose/reference/up/\">docker-compose up</a><br>\n<a href=\"https://docs.docker.com/compose/reference/build/\">docker-compose build</a></p>\n<p><code>docker-compose.yml</code> には複数のサービスが定義されていて、 <code>run</code> は特定のサービス、 <code>up</code> は全サービス(特定も可)に対する命令です。どちらも、コンテナが create &amp; start されます。<br>\nまた、 <code>run</code> は指定したサービス上で実行するコマンドを渡すことができ、 <code>docker-compose.yml</code> に書いてある <code>command</code> を上書きするみたいですね。</p>\n<p>簡単ですが以上を踏まえて、以下のコマンドを実行した後の流れを見ていきます。</p>\n<pre><code class=\"hljs bash\">$ docker-compose run web rails new . --force --database=postgresql\n</code></pre>\n<h3>流れの確認</h3>\n<ul>\n<li>デフォルトネットワークを生成</li>\n<li><code>run web</code> なのでサービス[web]の起動が始まる</li>\n<li><code>depend_on: db</code> となっている為、サービス[db]を先に起動する\n<ul>\n<li>postgresのimageをpull &amp; dbサービス用のネットワークを生成</li>\n</ul>\n</li>\n<li><code>build: .</code> なので <code>Dockerfile</code> を\b元にコンテナを生成する\n<ul>\n<li>ruby:2.3.3 からimageをpull</li>\n<li><code>RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs</code>\n<ul>\n<li>必要なライブラリのインストール</li>\n</ul>\n</li>\n<li><code>RUN mkdir /myapp</code></li>\n<li><code>WORKDIR /myapp</code></li>\n<li><code>ADD Gemfile /myapp/Gemfile</code></li>\n<li><code>ADD Gemfile.lock /myapp/Gemfile.lock</code></li>\n<li><code>RUN bundle install</code>\n<ul>\n<li>WORKDIRを指定しているので、 <code>/myapp/Gemfile</code> を元にインストールが始まる</li>\n</ul>\n</li>\n<li><code>ADD . /myapp</code></li>\n</ul>\n</li>\n<li><code>docker-compose run</code> の引数に渡しているコマンドが実行される(override)\n<ul>\n<li><code>rails new . --force --database=postgresql</code></li>\n<li>コマンドが上書きされているので、 <code>rails s</code> は実行されない</li>\n<li><code>--force</code> オプションで、 <code>Gemfile</code> が上書きされる</li>\n</ul>\n</li>\n</ul>\n<h1>4. 再ビルド</h1>\n<pre><code class=\"hljs bash\">$ docker-compose build\n</code></pre>\n<p>Gemfileが書き換わったので、imageを再ビルドします。<br>\n<code>rails new</code> のとき <code>--skip-bundle</code> しても良さそうですね。</p>\n<h1>5. DB設定</h1>\n<p><code>config/database.yml</code> を以下に書き換え</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">default:</span> <span class=\"hljs-meta\">&amp;default</span>\n<span class=\"hljs-attr\">  adapter:</span> <span class=\"hljs-string\">postgresql</span>\n<span class=\"hljs-attr\">  encoding:</span> <span class=\"hljs-string\">unicode</span>\n<span class=\"hljs-attr\">  host:</span> <span class=\"hljs-string\">db</span>\n<span class=\"hljs-attr\">  username:</span> <span class=\"hljs-string\">postgres</span>\n<span class=\"hljs-attr\">  password:</span>\n<span class=\"hljs-attr\">  pool:</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-attr\">development:</span>\n  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*default</span>\n<span class=\"hljs-attr\">  database:</span> <span class=\"hljs-string\">myapp_development</span>\n\n\n<span class=\"hljs-attr\">test:</span>\n  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*default</span>\n<span class=\"hljs-attr\">  database:</span> <span class=\"hljs-string\">myapp_test</span>\n</code></pre>\n<p><code>host: db</code> で接続できるということですね。\b便利！</p>\n<h1>6. サーバー起動</h1>\n<p>サービスを起動します。</p>\n<pre><code class=\"hljs bash\">$ docker-compose up\n</code></pre>\n<p>別のターミナルを開き、以下を実行します。</p>\n<pre><code class=\"hljs bash\">$ docker-compose run web rake db:create\n</code></pre>\n<br />\nhttp://localhost:3000 にアクセスします。\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/07/06-docker-compose-rails/images/rails_welcome.png\" alt=\"rails welcome\"></p>\n<p>ちゃんと\b起動していました！<br>\nDocker環境さえあれば、たった数ファイルでここまで構築できるってすごいですね。<br>\n大体の流れは掴めたので、これをベースに自分用にカスタマイズしていこうと思います。</p>\n",
            "url": "/2017/07/06/docker-compose-rails/",
            "title": "Rails開発環境をdocker-composeで作ってみる",
            "date_modified": "2017-07-05T15:09:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2017/05/27/elixir-introduction/",
            "html_content": "<p>2017/06/02 に行われた <a href=\"https://beam-lang.connpass.com/event/51637/\">Elixir入門者LT大会</a> へ参加する際、事前に準備しておいたことのメモ。</p>\n<h2>Elixirとは？</h2>\n<h4>公式サイト</h4>\n<p><a href=\"https://elixir-lang.org/\">https://elixir-lang.org/</a></p>\n<ul>\n<li>スケーラブルで持続可能なアプリを作るためにデザインされた動的関数型言語</li>\n<li>Erlang VM上で動いている。\n<ul>\n<li>Erlang VMは、レイテンシが低く、配布可能で耐障害性もあり、Webでも組み込みシステムでも利用されている</li>\n</ul>\n</li>\n<li>特徴\n<ul>\n<li>関数型</li>\n<li>拡張可能なDSL</li>\n</ul>\n</li>\n<li>その他の特徴\n<ul>\n<li>Ecosystem(mix)</li>\n<li>Interactive Development</li>\n<li>Erlang互換</li>\n</ul>\n</li>\n</ul>\n<h2>インストール</h2>\n<p>Macの場合</p>\n<pre><code class=\"hljs bash\">brew update\nbrew install elixir\n</code></pre>\n<p><a href=\"https://elixir-lang.org/install.html\">その他の場合</a></p>\n<h2>基本</h2>\n<p>Elixir Schoolより</p>\n<ul>\n<li><code>iex</code> でREPLを起動</li>\n<li>真偽判定: <code>false</code> と <code>nil</code> 以外は真</li>\n<li>アトム <code>:foo</code> はRubyのシンボルと同じ</li>\n<li><code>true === :true</code> は真</li>\n<li>モジュール名もアトム。宣言されていなくても。 <code>is_atom(MyApp)</code> は真</li>\n<li>アトムは、Erlangのビルトインも含めたモジュール参照にも使われる。 <code>:crypto.rand_bytes 3</code></li>\n<li>どんな型同士も比較可能、ソート可能</li>\n<li>文字の連結は <code>&quot;Hello, &quot; &lt;&gt; &quot;Elixir&quot;</code></li>\n</ul>\n<h2>参考</h2>\n<p>公式サイト<br>\n<a href=\"https://elixir-lang.org/\">https://elixir-lang.org/</a></p>\n<p>Elixir School(日本語あり)<br>\n<a href=\"https://elixirschool.com\">https://elixirschool.com</a></p>\n<h2>イベントに参加した時のメモ</h2>\n<h3>guest1 @ohrdev おーはらさん</h3>\n<h4>なぜElixir</h4>\n<ul>\n<li>\n<p>可用性◯</p>\n</li>\n<li>\n<p>速度× =&gt; C, golangの方が</p>\n</li>\n<li>\n<p>今持っていない考え方が身につく？</p>\n<ul>\n<li>アクターモデル</li>\n<li>関数プログラミング、マクロ、プロトコル</li>\n<li>並行プログラミング、OTP</li>\n</ul>\n</li>\n<li>\n<p>適当な問題</p>\n<ul>\n<li>並列処理が効くツール\n<ul>\n<li>クローラー</li>\n<li>chat, mastodon cloneとか？</li>\n</ul>\n</li>\n<li>ライブラリ制作\n<ul>\n<li>マクロを使う必要がある(メタプログラミング)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>guest2 さっちゃん</h3>\n<ul>\n<li>phoenix new しとけばRailsみたく開発できる。Webはだいたいいける</li>\n<li>dockerで環境をつくって、環境差異をなくした</li>\n<li>lint: 開発の最初から入れる必要がある\n<ul>\n<li>dogma, credoの2つがある(credoの方が盛ん)</li>\n<li>dialyzer: flowtypeみたく型を指定できる\n<ul>\n<li>但し、めちゃくちゃ遅い(最初に型情報のDBを生成する)</li>\n</ul>\n</li>\n<li>test: ExUnit\n<ul>\n<li>関数合成だけで構築できると信じるとテストが書きやすくなる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>awesome-elixer\n<ul>\n<li>ライブラリの選定に有用</li>\n<li>elixir公式MLでも情報とれる</li>\n</ul>\n</li>\n<li>別の言語で学ぶ\n<ul>\n<li>Haskell, Lisp, Scala</li>\n</ul>\n</li>\n<li>プロセスの役割\n<ul>\n<li>タスクを分割する</li>\n<li>状態を持つ</li>\n</ul>\n</li>\n</ul>\n<h3>LT</h3>\n<h4>@color_box</h4>\n<ul>\n<li>\n<p>とりあえず HexDoc</p>\n</li>\n<li>\n<p>erlang ライブラリ多い</p>\n</li>\n<li>\n<p>REPL環境が良い</p>\n</li>\n<li>\n<p>iex -S mix でライブラリも参照できる</p>\n</li>\n<li>\n<p>パターンマッチの重要性</p>\n<ul>\n<li>case</li>\n<li>関数のシグネチャ<br>\n-&gt; 関数が小さくなるので、読みやすくなる</li>\n</ul>\n</li>\n</ul>\n<h4>@cedretaber</h4>\n<ul>\n<li>Bibliotheca 蔵書管理アプリ</li>\n<li>認証ライブラリを作った</li>\n</ul>\n<h4>@nunulk</h4>\n<ul>\n<li>ElixirでSlack botをつくっている</li>\n</ul>\n<h4>@yasuhiroki</h4>\n<ul>\n<li>シェル芸との共通点から好きになる</li>\n</ul>\n",
            "url": "/2017/05/27/elixir-introduction/",
            "title": "Elixir入門",
            "date_modified": "2017-05-27T08:01:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2017/02/14/kamakura-kaihatsu-gassyuku/",
            "html_content": "<p>2017年2月10日〜12日の間、鎌倉（由比ヶ浜）で開発合宿をしてきました。<br>\n泊まった場所は以下です。</p>\n<p><a href=\"http://www.ikyu.com/vacation/00050003/\">光と水の邸宅</a></p>\n<p>広いしきれいだし、とても使いやすかったので開発合宿にオススメです！</p>\n<h2>発表資料</h2>\n<div class=\"speakerdeck\" data-id=\"3e5ab470ef564b02b22c545fbdbab89a\"></div>\n<h2>感想</h2>\n<p>事前準備があまりできず、いい感じのアウトプットが出なかったのが心残りです。<br>\nだいたい晴れていたのですが突然雪が降ったり、何だか変な天気でした。</p>\n<p>OSSコミッターになるネタのために作った<a href=\"https://github.com/tensorflow/tensorflow/pull/7441\">PR</a>は無事マージされてました。笑</p>\n<p>由比ヶ浜の海岸。<br>\nここには写っていませんが、2月なのにサーファーが沢山いました。<br>\n寒いのに・・・<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/ocean.jpg\" alt=\"ocean\"></p>\n<p>2日目の昼。<br>\nずっと引きこもっていたので、空を見て気持ち良くなる大人たち<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/sky.jpg\" alt=\"sky\"></p>\n<p>帰りがけ、鶴岡八幡宮に寄っていきました。<br>\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/thumbnail.png\" alt=\"tsurugaoka\"></p>\n",
            "url": "/2017/02/14/kamakura-kaihatsu-gassyuku/",
            "title": "鎌倉で開発合宿してきた",
            "date_modified": "2017-02-14T12:40:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2016/12/30/devise-friendly-forwarding/",
            "html_content": "<h2>前置き</h2>\n<p>Railsでの認証に <a href=\"https://github.com/plataformatec/devise\">Devise</a> を使っている人は多いと思います。<br>\nただ、 Devise はデフォルトでは<strong>フレンドリーフォワーディング</strong>が効いていません。</p>\n<p>フレンドリーフォワーディングとは、ユーザーが認証前に開こうとしていたページへ、認証後にリダイレクトさせることです。<br>\n参考： <a href=\"http://railstutorial.jp/chapters/updating_and_deleting_users?version=4.2#sec-friendly_forwarding\">Rails チュートリアル</a></p>\n<p>最近機会があったので、<a href=\"https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update\">DeviseのHow To</a>を参考に実装しました。<br>\nその際にやったことを残しておきます。</p>\n<p>なお、各バージョンは以下の通りです。</p>\n<ul>\n<li>Ruby 2.3.1</li>\n<li>Rails 4.2.7.1</li>\n<li>Devise 3.5.1</li>\n</ul>\n<h2>手順</h2>\n<h3>アクセスされたURLを保存する</h3>\n<p>認証前にアクセスしようとしたページをセッションに保存します。<br>\n<code>current_user</code> が取得できれば認証できているので、その場合は除外しています。<br>\nまた、 <code>devise_controller</code> の各アクションの場合も除外しています。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/controllers/application_controller.rb</span>\n\nbefore_action <span class=\"hljs-symbol\">:store_current_location</span>, <span class=\"hljs-symbol\">unless:</span> <span class=\"hljs-symbol\">:devise_controller?</span>\n\nprivate\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">store_current_location</span></span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> current_user\n  store_location_for(<span class=\"hljs-symbol\">:user</span>, request.url)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p><code>store_location_for</code> を呼ぶと、<code>session[:user_return_to]</code> にURLを保存してくれます。<br>\n<code>:user</code> の部分は認証のscopeです。大抵の場合は <code>:user</code> でOKかと思います。</p>\n<p>実は、フレンドリーフォワーディングの実装としてはこれだけで完了です。<br>\n<code>session[:user_return_to]</code> にURLが入っていると、認証後にリダイレクトしてくれるようです。</p>\n<p>ただ、セキュリティ対策として以下の場合は追加の対応が必要です。</p>\n<h3>認証後にセッションをリセットする場合</h3>\n<p><a href=\"http://railsguides.jp/\">Rails ガイド</a> のセキュリティのページで、<a href=\"http://railsguides.jp/security.html#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83-%E5%AF%BE%E5%BF%9C%E7%AD%96\">セッション固定攻撃の対応策</a> について紹介されています。<br>\nログイン認証の際に、 <code>reset_session</code> を行なうというものです。<br>\nこれを行なうと、当然上で保存したURLも消えてしまうので、その値だけ別途引き継ぐ対応を行ないます。</p>\n<h3><code>user_return_to</code> を引き継ぐ</h3>\n<p><code>Devise::SessionsController</code> を継承したControllerで以下の対応をします。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/controllers/sessions_controller.rb</span>\n\nbefore_action <span class=\"hljs-symbol\">:reset_session_before_login</span>, <span class=\"hljs-symbol\">only:</span> <span class=\"hljs-symbol\">:create</span>\n\nprivate\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">reset_session_before_login</span></span>\n  user_return_to = session[<span class=\"hljs-symbol\">:user_return_to</span>]\n  reset_session\n\n  session[<span class=\"hljs-symbol\">:user_return_to</span>] = user_return_to <span class=\"hljs-keyword\">if</span> user_return_to\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>これで、認証時の <code>reset_session</code> をしつつフレンドリーフォワーディングをすることが可能になりました。</p>\n",
            "url": "/2016/12/30/devise-friendly-forwarding/",
            "title": "Deviseでフレンドリーフォワーディングを実装する",
            "date_modified": "2016-12-30T07:34:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2016/10/27/rorororor/",
            "html_content": "<p>社内勉強会にてタイトルのような試みをし、<strong>失敗</strong>した話をしました。</p>\n<div class=\"speakerdeck\" data-id=\"5cadf924d4014b9386d3836cd7820b07\"></div>\n<br />\n<p>React周辺ライブラリを整理するという一番の目的は達成できたかなと思います。<br>\nただまだまだ自分の中に落とし込めてない部分が多いので、キャッチアップしていこうという感じです。<br>\nサンプルコードばっかり追ってないで、ちゃんとしたもの作っていこうな、俺。</p>\n",
            "url": "/2016/10/27/rorororor/",
            "title": "React on Redux on Relay on Ruby on Rails",
            "date_modified": "2016-10-27T14:30:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2016/09/20/jekyll_to_middleman/",
            "html_content": "<p>ブログエンジンを<a href=\"https://jekyllrb.com/\">Jekyll</a> -&gt; <a href=\"https://github.com/middleman/middleman-blog\">Middleman-blog</a>に移行しました。<br>\n移行した一番の理由は、<a href=\"https://shopify.github.io/liquid/\">Liquid</a>記法（<code>{% %}</code>みたいなの）にいまいち慣れなかったことです。</p>\n<p><img src=\"https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2016/09/20-jekyll_to_middleman/images/thumbnail.png\" alt=\"middleman-logo\"></p>\n<h2>移行に際してやったこと</h2>\n<h3>デザイン・レイアウト</h3>\n<p>jekyllの時は <a href=\"https://jekyllthemes.io/\">Jekyll Themes &amp; Template</a> の中から選んでそのデザインを使っていたのですが、今回は自分でカスタマイズしやすいようThemeを使わないことにしました。</p>\n<p>まず、CSSフレームワークとして <a href=\"http://foundation.zurb.com/\">Foundation</a> を使いました。<br>\n数年前にver.5が出たと思ったのですが、もうver.6がリリースされているんですね…。<br>\n軽量・シンプルでドキュメントもしっかりしていて使いやすかったです。</p>\n<p>独自スタイルの追加は <a href=\"http://sass-lang.com/\">Sass</a> で書いて、 <a href=\"https://webpack.github.io/\">webpack</a> でCompileしています。<br>\nJSはES2015で書けるようにしています。が、まだ特に書いてはいないです^^;</p>\n<p>Middlemanには <a href=\"https://middlemanapp.com/jp/advanced/external-pipeline/\">外部パイプライン</a> という機能があり、<code>middleman server</code> や <code>middleman build</code>の時にフロントエンドのコマンドを実行するよう設定できます。</p>\n<pre><code class=\"hljs ruby\">activate <span class=\"hljs-symbol\">:external_pipeline</span>,\n  <span class=\"hljs-symbol\">name:</span> <span class=\"hljs-symbol\">:webpack</span>,\n  <span class=\"hljs-symbol\">command:</span> build? ? <span class=\"hljs-string\">\"./node_modules/webpack/bin/webpack.js --bail\"</span> : <span class=\"hljs-string\">\"./node_modules/webpack/bin/webpack.js --watch -d\"</span>,\n  <span class=\"hljs-symbol\">source:</span> <span class=\"hljs-string\">\".tmp/dist\"</span>,\n  <span class=\"hljs-symbol\">latency:</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<h3>テンプレート</h3>\n<p>Railsの開発で慣れている<a href=\"http://slim-lang.com/\">Slim</a>を採用しました。<br>\n<code>erb</code>書いてる時に比べて精神状態が良好に保たれます。</p>\n<p>微妙にハマったのが<code>partial</code>の書き方で、<a href=\"https://middlemanapp.com/jp/basics/upgrade-v4/\">v4 へのアップグレード</a>にもあるように、<code>partials_dir</code>の設定オプションが無くなっています。<br>\n部分テンプレートの指定は<code>source</code>からの相対パスで<code>partial 'partials/my_partial'</code>のように書くことになります。</p>\n<p>また、特に指定をしなければ<code>partials</code>以下もビルド対象となってしまうので、ビルド対象外として設定すると良いです。</p>\n<pre><code class=\"hljs ruby\">ignore <span class=\"hljs-string\">'partials/*'</span>\n</code></pre>\n<p>これは<strong>開発時に気づきにくい罠</strong>でした。</p>\n<h3>記事の移行</h3>\n<p>元々Jekyllの記事は <a href=\"http://jekyllrb-ja.github.io/docs/frontmatter/\">Front-matter</a> + Markdown で書いていたので、ほぼそのままMiddleman-blogにコピーするだけで完了しました。</p>\n<h3>ファイル圧縮</h3>\n<p>アセットを圧縮するための設定がデフォルトで用意されています。</p>\n<pre><code class=\"hljs ruby\">configure <span class=\"hljs-symbol\">:build</span> <span class=\"hljs-keyword\">do</span>\n  activate <span class=\"hljs-symbol\">:minify_css</span>\n  activate <span class=\"hljs-symbol\">:minify_javascript</span>\n<span class=\"hljs-keyword\">end</span>\n\nactivate <span class=\"hljs-symbol\">:minify_html</span>\n</code></pre>\n<p>まだやれてないですが、画像の圧縮には<a href=\"https://github.com/plasticine/middleman-imageoptim\">middleman-imageoptim</a>を使うと良さそうです。</p>\n<h3>デプロイ</h3>\n<p><a href=\"https://github.com/middleman-contrib/middleman-deploy\">middleman-deploy</a>が便利です。<br>\n自分は<a href=\"https://pages.github.com/\">GitHub Pages</a>で公開しているので、<code>master</code>ブランチにPushして完了です。</p>\n<pre><code class=\"hljs ruby\">activate <span class=\"hljs-symbol\">:deploy</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|deploy|</span>\n  deploy.deploy_method = <span class=\"hljs-symbol\">:git</span>\n  deploy.branch = <span class=\"hljs-string\">'master'</span> <span class=\"hljs-comment\"># default: gh-pages</span>\n  deploy.build_before = <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># default: false</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h2>感想</h2>\n<p>控えめに言って <a href=\"https://middlemanapp.com/jp/\">Middleman</a> 最高でした！<br>\nサイト作るのに必要だなと思うものがデフォルトで付いてたり拡張として用意してあって、たくさん楽できました。<br>\nあとはRailsライクな <a href=\"https://middlemanapp.com/jp/basics/helper_methods/\">ヘルパーメソッド</a> も用意してあるし、とにかくハードルが低かったです。</p>\n",
            "url": "/2016/09/20/jekyll_to_middleman/",
            "title": "Jekyll -> Middleman-blogに移行しました",
            "date_modified": "2016-09-20T12:15:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2016/05/06/rake_rspec/",
            "html_content": "<p>人生初のGemをつくってみました！<br>\n<a href=\"https://rubygems.org/gems/rspec_rake\">rspec_rake</a></p>\n<h1>背景</h1>\n<p>Rakeタスクのテスト(RSpec)を書く時に躓くことが多く、そこを楽にできたらいいなーと思ったのがきっかけです。あとそろそろGemつくってみたかった。</p>\n<h1>使い方</h1>\n<p>仮に、</p>\n<ul>\n<li>Railsプロジェクト</li>\n<li>Rakeファイルは<code>lib/tasks</code>以下に入ってる</li>\n</ul>\n<p>という想定だと、以下のような感じで設定します。</p>\n<pre><code class=\"hljs \"># in spec/rails_helper.rb\n\nRSpecRake.configure do |config|\n  config.require_tasks(File.join(Rails.root, 'lib', 'tasks'))\n  config.auto_reenable = true\nend\n</code></pre>\n<p><code>.require_tasks</code>はRakeタスク定義してるだけなので、他の方法でも良いです。<br>\nどちらかと言うと、<code>.auto_reenable</code>の方が欲しい機能でした。</p>\n<h1>auto_reenable</h1>\n<p><a href=\"http://qiita.com/morygonzalez/items/699749c631f66e62637b\">Rake タスクをテストコードの中で複数回実行する</a><br>\nこちらの記事に書かれているように、Rakeタスクの<code>#invoke</code>メソッドを2回以上実行する時は、その都度<code>#reenable</code>メソッドを呼ぶ必要があります。<br>\nここではテストなので、成功パターン・失敗パターンだけでも2回以上実行することになりますよね…！</p>\n<p>で、毎度<code>#reenable</code>を呼ぶのは面倒なので、</p>\n<pre><code class=\"hljs \">  config.auto_reenable = true\n</code></pre>\n<p>と設定すれば、タスク実行後に自動的に<code>#reenable</code>するようにしました。</p>\n<p><strong>但し、タスク内で別のタスクを呼んだりなど、無限ループするような書き方には注意です！</strong></p>\n<p>ちなみに、<code>#execute</code>メソッドなら何度でも実行できて楽なのですが、こっちはこっちでタスクに引数が渡しづらいという悩みが出てきたりします笑</p>\n<h1>specファイル内でのタスク実行方法</h1>\n<p>上記の設定ができていれば、specファイル内では<code>Rake::Task</code>から対象のタスクを呼ぶだけでOKです。</p>\n<pre><code class=\"hljs \"># before, it, afterなどどこでも\nRake::Task['some:task'].invoke\n</code></pre>\n<p>各specファイルではRakeの定義などは要らないし、どのタスクでも呼べるので結構楽に書けると思います。</p>\n<h1>懸念点</h1>\n<p>RSpec起動時にすべてのRakeファイルを読み込む想定なので、テストの実行時間が増えるかもしれないです。<br>\n色んなプロジェクトで試したりとかしてないので、やってみてどうだったとか感想もらえると嬉しいです！</p>\n<h1>参考にした記事</h1>\n<p><a href=\"https://robots.thoughtbot.com/test-rake-tasks-like-a-boss\">Test Rake Tasks Like a BOSS</a><br>\n<a href=\"http://dev.classmethod.jp/server-side/ruby-on-rails/ruby-on-rails_rspec_rake_test/\">[Ruby on Rails]RSpecによるRakeのテスト</a><br>\n<a href=\"http://qiita.com/morygonzalez/items/699749c631f66e62637b\">Rake タスクをテストコードの中で複数回実行する</a><br>\n<a href=\"http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/\">RubyGemはめっちゃ簡単に作れる！</a></p>\n",
            "url": "/2016/05/06/rake_rspec/",
            "title": "rspec_rake っていうGemをつくってみた",
            "date_modified": "2016-05-05T15:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2016/01/08/vimagit/",
            "html_content": "<p>年末に知った<a href=\"https://github.com/jreybert/vimagit\">vimagit</a>ってvimのプラグインが使ってて気持ち良い。<br>\nGitの差分をvimで開けて、行単位でStageしたりCommitできる。<br>\n<code>git add -p</code>するvimmerには特におすすめ！</p>\n<p>ちなみにEmacsプラグインの<a href=\"https://github.com/magit/magit\">magit</a>ってやつのコピー版らしい。<br>\nインストール〜使い方、オススメ設定まで記載しておく。</p>\n<h1>インストール</h1>\n<pre><code class=\"hljs vim\">NeoBundle <span class=\"hljs-string\">'jreybert/vimagit'</span>\n</code></pre>\n<h1>使い方</h1>\n<p><a href=\"https://github.com/jreybert/vimagit\">GitHubのリポジトリ</a>にリンクされてる<a href=\"https://asciinema.org/a/28761\">ビデオ</a>とかを見るとざっくりイメージできると思う。</p>\n<h3>開き方</h3>\n<p><code>:Magit</code> または <code>&lt;Leader&gt;M</code>でbufferを開く。</p>\n<h3>セクション</h3>\n<p>bufferは以下の5つのセクションに分かれている。<br>\n後で記載するけど表示順などをオプションで指定できる。</p>\n<ul>\n<li><strong>info</strong>: current branchやHEAD commitのメッセージなどが表示されている</li>\n<li><strong>Commit message</strong>: コミットする時に現れて、メッセージを入力する</li>\n<li><strong>Staged changes</strong>: そのままだけどStagingされた変更部分</li>\n<li><strong>Unstaged changes</strong>: まだStagingされてない変更部分。Untracked filesもここに表示される</li>\n<li><strong>Stash list</strong>: Stashのリスト</li>\n</ul>\n<h3>コマンド</h3>\n<p><a href=\"https://github.com/jreybert/vimagit/blob/master/README.md\">README</a>みれば丁寧に書いてあるけど、自分が普段使うものを記載しておく。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">command</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:Magit または &lt;Leader&gt;M</td>\n<td style=\"text-align:left\">magit bufferを開く。すべてはここから</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S</td>\n<td style=\"text-align:left\">Stage &lt;-&gt; Unstage の切り替え。ファイル名の上ならファイルごとStageされるし、vで行選択すればその行だけStageされる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DDD</td>\n<td style=\"text-align:left\">Unstagedセクションでだけ使える。変更を破棄する</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CC</td>\n<td style=\"text-align:left\">Commitセクション以外にいるならCommitセクションを開く。CommitセクションにいるならCommitする(説明むずい)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CA</td>\n<td style=\"text-align:left\">CCのcommit --amendバージョン。直前のcommitに含めるならこれ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CF</td>\n<td style=\"text-align:left\">commit --amendで、コミットメッセージを変更しない場合はこのコマンド一発で完了</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td style=\"text-align:left\">bufferをrefreshする</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td style=\"text-align:left\">bufferを閉じる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\">help表示のON/OFF</td>\n</tr>\n</tbody>\n</table>\n<p>他にもIやLとか色々あるけど、自分はほぼ使ってない。</p>\n<h3>オプション</h3>\n<p>vimrcで指定できるオプション。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">option</th>\n<th style=\"text-align:left\">description</th>\n<th style=\"text-align:left\">default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">g:magit_enabled</td>\n<td style=\"text-align:left\">vimagitの有効[1]・無効[0]</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g:magit_show_help</td>\n<td style=\"text-align:left\">ヘルプの表示[1]・非表示[0]</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g:magit_default_show_all_files</td>\n<td style=\"text-align:left\">bufferを開いた時にdiffを閉じておく[0]・modified filesのdiffだけ表示[1]・全ファイルのdiffを表示[2]</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g:magit_default_fold_level</td>\n<td style=\"text-align:left\">上記のdiff表示の詳細設定。ファイル名だけ表示する[0]・ファイル名とhunkの一覧だけ表示[1]・hunkの中身のdiffも表示[2]</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g:magit_default_sections</td>\n<td style=\"text-align:left\">各セクションの表示/非表示と順番</td>\n<td style=\"text-align:left\">['info', 'global_help', 'commit', 'staged', 'unstaged']</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g:magit_warning_max_lines</td>\n<td style=\"text-align:left\">bufferを開く際にwarningを出すdiffの行数。実際に開くかはyes/noで回答</td>\n<td style=\"text-align:left\">10000</td>\n</tr>\n</tbody>\n</table>\n<h1>オススメ設定</h1>\n<p>自分がやってる設定と理由を簡単に。</p>\n<pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:magit_show_help</span> = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">\" 少し慣れたらいらなくなる</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:magit_default_show_all_files</span> = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\">\" わざわざ開くのは面倒なので</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:magit_default_fold_level</span> = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\">\" 同上</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:magit_default_sections</span> = [<span class=\"hljs-string\">'global_help'</span>, <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-string\">'unstaged'</span>, <span class=\"hljs-string\">'staged'</span>, <span class=\"hljs-string\">'commit'</span>]  <span class=\"hljs-comment\">\" helpはデフォルト非表示。次にcurrent情報。それ以下は上から順に処理していくイメージ</span>\n</code></pre>\n<p>最初のcommitが2015年9月。 READMEにもあるようにまだまだ機能追加されそう。</p>\n<p>VimでGitといえば<a href=\"https://github.com/tpope/vim-fugitive\">fugitive</a>だと思うけど、それには無いものをいっぱい持ってるし、併用もアリだと思う！</p>\n",
            "url": "/2016/01/08/vimagit/",
            "title": "vimでgitするにはvimagitがおすすめ",
            "date_modified": "2016-01-07T15:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2015/12/27/git-delete-merged/",
            "html_content": "<p>今までマージ済ブランチを消す時、<code>git branch --merged</code>してから1個1個<code>git branch -d xxxx</code>とか面倒くさいことしてたので、マージ済ブランチを表示して確認後にyesと打てばまとめて消せるようにした。<br>\n但し、originとdevelopは消さないようにしてる。</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> git-delete-<span class=\"hljs-function\"><span class=\"hljs-title\">merged</span></span>() {\n  merged=`git branch --merged | egrep -v <span class=\"hljs-string\">'\\*|develop|master'</span>`\n  <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$merged</span> = <span class=\"hljs-string\">\"\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'No merged branch.'</span>\n    <span class=\"hljs-built_in\">return</span> 0\n  <span class=\"hljs-keyword\">fi</span>\n\n  <span class=\"hljs-built_in\">echo</span> -en <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$merged</span>\\\\ndelete? (y)es/(n)o: \"</span>\n  <span class=\"hljs-built_in\">read</span> ans\n\n  <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$ans</span> =~ ^y(es)?$ ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$merged</span>\"</span> | xargs git branch -d\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'Cancelled.'</span>\n  <span class=\"hljs-keyword\">fi</span>\n}\n\n<span class=\"hljs-built_in\">alias</span> gdm=<span class=\"hljs-string\">'git-delete-merged'</span>\n</code></pre>\n<h4>参考</h4>\n<p><a href=\"http://qiita.com/hajimeni/items/73d2155fc59e152630c4\">Gitでマージ済みブランチを一括削除</a></p>\n<h1>ついでに</h1>\n<p>今までGitのサブコマンドは<code>gitconfig</code>のaliasに定義してたけど、<code>git xx</code>って打つのもちょっと手間なのでalias整理した！</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">alias</span> ga=<span class=\"hljs-string\">'git add'</span>\n<span class=\"hljs-built_in\">alias</span> gap=<span class=\"hljs-string\">'git add -p'</span>\n<span class=\"hljs-built_in\">alias</span> gb=<span class=\"hljs-string\">'git branch'</span>\n<span class=\"hljs-built_in\">alias</span> gcm=<span class=\"hljs-string\">'git commit -v'</span>\n<span class=\"hljs-built_in\">alias</span> gca=<span class=\"hljs-string\">'git commit --amend'</span>\n<span class=\"hljs-built_in\">alias</span> gco=<span class=\"hljs-string\">'git checkout'</span>\n<span class=\"hljs-built_in\">alias</span> gcof=<span class=\"hljs-string\">'git-checkout-force'</span>\n<span class=\"hljs-built_in\">alias</span> gcp=<span class=\"hljs-string\">'git cherry-pick'</span>\n<span class=\"hljs-built_in\">alias</span> gd=<span class=\"hljs-string\">'git diff'</span>\n<span class=\"hljs-built_in\">alias</span> gdm=<span class=\"hljs-string\">'git-delete-merged'</span>\n<span class=\"hljs-built_in\">alias</span> gl=<span class=\"hljs-string\">\"git log --pretty='%h %ci %s %cn'\"</span>\n<span class=\"hljs-built_in\">alias</span> gpl=<span class=\"hljs-string\">'git pull'</span>\n<span class=\"hljs-built_in\">alias</span> grb=<span class=\"hljs-string\">'git rabase'</span>\n<span class=\"hljs-built_in\">alias</span> grbi=<span class=\"hljs-string\">'git rabse -i'</span>\n<span class=\"hljs-built_in\">alias</span> grba=<span class=\"hljs-string\">'git rabse --abort'</span>\n<span class=\"hljs-built_in\">alias</span> grbc=<span class=\"hljs-string\">'git rabse --continue'</span>\n<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> $(seq 10); <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">alias</span> grbi<span class=\"hljs-variable\">$n</span>=<span class=\"hljs-string\">\"git rebase -i HEAD~<span class=\"hljs-variable\">$n</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n<span class=\"hljs-built_in\">alias</span> grs=<span class=\"hljs-string\">'git reset'</span>\n<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> $(seq 10); <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">alias</span> grs<span class=\"hljs-variable\">$n</span>=<span class=\"hljs-string\">\"git reset HEAD~<span class=\"hljs-variable\">$n</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n<span class=\"hljs-built_in\">alias</span> gs=<span class=\"hljs-string\">'git status'</span>\n<span class=\"hljs-built_in\">alias</span> gps=<span class=\"hljs-string\">'git push'</span>\n</code></pre>\n<p>まだ慣れてなくてすぐ<code>git</code>って打っちゃうので、早く身体に覚えさせたい。</p>\n<h4>参考</h4>\n<p><a href=\"http://blog.enogineer.com/2014/12/04/git-ranking/\">よく使うGitコマンドのエイリアス＆シェル関数トップ10+α</a></p>\n",
            "url": "/2015/12/27/git-delete-merged/",
            "title": "マージ済ブランチを消すコマンドをつくった",
            "date_modified": "2015-12-27T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2015/11/08/ctrlp/",
            "html_content": "<p>約1年位Vimでnerdtreeを使ってきたんだけど、そろそろ別のも使ってみたいと思ったので<strong>ctrlp</strong>を試してみることにする。</p>\n<p>ちなみにnerdtreeはディレクトリのツリーが常に表示されてる分、幅が狭くて辛い時があった。</p>\n<h1>インストール</h1>\n<pre><code class=\"hljs vim\">NeoBundle <span class=\"hljs-string\">'ctrlpvim/ctrlp.vim'</span>\n</code></pre>\n<h1>起動</h1>\n<p><code>&lt;c-p&gt;</code></p>\n<p>適当にファイル名とか入力すれば絞り込んでくれる。</p>\n<h1>Help</h1>\n<pre><code class=\"hljs vim\">:<span class=\"hljs-keyword\">help</span> ctrlp-mappings\n</code></pre>\n<p>これ見とけばOK</p>\n<h1>キー(デフォルト)</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;c-d&gt;</td>\n<td style=\"text-align:center\">フルパス検索モードとファイル名検索モード(&gt;d&gt;)の切り替え</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-r&gt;</td>\n<td style=\"text-align:center\">文字列検索モードと正規表現検索モード(r&gt;&gt;)の切り替え</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-f&gt;, &lt;c-b&gt;</td>\n<td style=\"text-align:center\">検索対象の切り替え(files, mru files, buffer)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;s-tab&gt;</td>\n<td style=\"text-align:center\">match-windowとpromptのfocus切り替え(match-windowに切り替える意味がイマイチわからない)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-c&gt;, &lt;esc&gt;</td>\n<td style=\"text-align:center\">ctrlpの終了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;cr&gt;</td>\n<td style=\"text-align:center\">curren windowで開く</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-x&gt;</td>\n<td style=\"text-align:center\">horizonal splitで開く</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-v&gt;</td>\n<td style=\"text-align:center\">vertical splitで開く</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-z&gt;</td>\n<td style=\"text-align:center\">markする</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-o&gt;</td>\n<td style=\"text-align:center\">ダイアログ付きで開く(markしているのがあれｂ一気に開く)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;c-y&gt;</td>\n<td style=\"text-align:center\">新規ファイル作成</td>\n</tr>\n</tbody>\n</table>\n<h1>ファイル検索にagを使う</h1>\n<p>agのインストール</p>\n<pre><code class=\"hljs bash\">brew install ag\n</code></pre>\n<p>ag.vimの設定</p>\n<pre><code class=\"hljs vim\">NeoBundle <span class=\"hljs-string\">'rking/ag.vim'</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">executable</span>(<span class=\"hljs-string\">'ag'</span>)\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:ctrlp_use_caching</span>=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:ctrlp_user_command</span>=<span class=\"hljs-string\">'ag %s -i --nocolor --nogroup -g \"\"'</span>\n<span class=\"hljs-keyword\">endif</span>\n</code></pre>\n<p>はやい。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"http://christina04.hatenablog.com/entry/2014/10/30/100612\">CtrlP + ag で vim の検索を高速化</a></li>\n<li><a href=\"http://qiita.com/oahiroaki/items/d71337fb9d28303a54a8\">ctrlp.vimの使い方まとめ</a></li>\n</ul>\n<p>次はag.vim、quickfixあたりの使い方整理してまとめたいな！</p>\n",
            "url": "/2015/11/08/ctrlp/",
            "title": "ctrlp.vimを試してみる",
            "date_modified": "2015-11-08T14:15:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2015/05/04/rubygem_global/",
            "html_content": "<p>業務で使ってるGem「<strong>global</strong>」がかなり便利だったのでメモしておく。</p>\n<p><a href=\"https://github.com/railsware/global\">https://github.com/railsware/global</a></p>\n<h2>導入手順(Railsの場合)</h2>\n<h3>1.Gemfileに追加</h3>\n<pre><code class=\"hljs ruby\">gem <span class=\"hljs-string\">'global'</span>\n</code></pre>\n<h3>2.initiallizersに追加</h3>\n<p>config/initializers/global.rb</p>\n<pre><code class=\"hljs ruby\">Global.configure <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  config.environment = Rails.env.to_s\n  config.config_directory = Rails.root.join(<span class=\"hljs-string\">'config/global'</span>).to_s\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>ここまでやれば、<code>config/global/xxxx.yml</code>にファイルを置くと設定値を読んでくれる</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># yamlファイルの例</span>\n<span class=\"hljs-attr\">default:</span>\n<span class=\"hljs-attr\">  error-email:</span> <span class=\"hljs-string\">myname@example.com</span>\n<span class=\"hljs-attr\">production:</span>\n<span class=\"hljs-attr\">  error-email:</span> <span class=\"hljs-string\">error@example.com</span>\n</code></pre>\n<p>変数へのアクセス方法</p>\n<pre><code class=\"hljs ruby\">Global.error-email <span class=\"hljs-comment\"># 環境によって適切な方にアクセス</span>\n</code></pre>\n<h3>さらに</h3>\n<p>階層を深くするには、単にyamlの階層を深くするか<br>\n<code>config/global/xxxx/yyyy.yml</code><br>\nのようにファイルパスを深くすれば期待通りに動いてくれる。</p>\n<p>便利！</p>\n",
            "url": "/2015/05/04/rubygem_global/",
            "title": "Global変数を管理するGem 'global'",
            "date_modified": "2015-05-04T07:32:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2015/05/01/ruby-define-const-in-method/",
            "html_content": "<p>定数はメソッドの中で定義ができない</p>\n<p><a href=\"http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html\">http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html</a></p>\n<p>確認してみました。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-meta\">irb(main):001:0&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">def_const</span></span>\n<span class=\"hljs-meta\">irb(main):002:1&gt;</span>   CONST = <span class=\"hljs-string\">\"const\"</span>\n<span class=\"hljs-meta\">irb(main):003:1&gt;</span> end\n<span class=\"hljs-symbol\">SyntaxError:</span> compile error\n(irb)<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">2</span>: dynamic constant assignment\n  CONST = <span class=\"hljs-string\">\"const\"</span>\n         ^\n        from (irb)<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3</span>\n        from <span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">0</span>\n</code></pre>\n",
            "url": "/2015/05/01/ruby-define-const-in-method/",
            "title": "定数のメソッド内定義",
            "date_modified": "2015-05-01T08:08:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2014/02/16/windows_alias/",
            "html_content": "<h3><strong>cmd</strong></h3>\n<p>でaliasなんて無理かなと半ば諦めていましたが、探してみればあるものですね。<br>\naliasを設定するには以下のようにします。</p>\n<pre class=\"code\" data-unlink=\"\">\ndoskey ll=dir /ad\n</pre>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Users\\bakunyo\\Desktop>ll\n ドライブ C のボリューム ラベルは Windows です\n ボリューム シリアル番号は 1ED0-4D6E です\n\n C:\\Users\\bakunyo\\Desktop のディレクトリ\n\n2014/02/01  21:16    <DIR>          .\n2014/02/01  21:16    <DIR>          ..\n2013/12/31  18:12    <DIR>          inbox\n               0 個のファイル                   0 バイト\n               3 個のディレクトリ  186,053,722,112 バイトの空き領域\n</pre>\n<p>おお、使えるようになっています！</p>\n<p>続いて、aliasの一覧を確認するには、以下のようにします。</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Users\\bakunyo\\Desktop>doskey /macros\nll=dir /ad\n</pre>\n<p>実は、今回なんでalias使いたくなったかというと、<a href=\"http://d.hatena.ne.jp/keyword/rails\">rails</a>の起動コマンドが長くて鬱陶しかったんですね。</p>\n<pre class=\"code\" data-unlink=\"\">\nbundle exec rails s\n</pre>\n<p>これをこのままショートカットにしても良いのですが、引数にして渡すこともできるそうです。</p>\n<pre class=\"code\" data-unlink=\"\">\ndoskey bx=bundle exec $1 $2\n</pre>\n<p>$1は1番目、$2は2番目の引数。いろいろと応用が効きそうですね。<br>\n実行してみます。</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Users\\bakunyo\\Desktop\\inbox\\workspace\\ruby\\sample_app>bx rails s\nFor a better Pry experience on Windows, please use ansicon:\n   http://adoxa.3eeweb.com/ansicon/\n=> Booting WEBrick\n=> Rails 4.0.2 application starting in development on http://0.0.0.0:3000\n=> Run `rails server -h` for more startup options\n=> Ctrl-C to shutdown server\n[2014-02-16 10:02:14] INFO  WEBrick 1.3.1\n[2014-02-16 10:02:14] INFO  ruby 2.0.0 (2013-05-14) [i386-mingw32]\n[2014-02-16 10:02:14] INFO  WEBrick::HTTPServer#start: pid=5624 port=3000\n</pre>\n<p><span style=\"color: #ff0000\"><strong>起動できました！</strong></span><br>\n※bxを<code>bundle exec</code>にしておいて、<code>bundle exec rais s</code>と実行することはできないんですね。</p>\n<h3>設定の保存</h3>\n<p>さて、この設定したaliasですが、どこかに保存しておかないと次にcmd起動した時には消えてしまっています。<br>\nなので、ファイルに保存＆cmd起動時に読み込む設定をします。</p>\n<p>まずは、設定をどこか適当な場所に保存します。</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Users\\bakunyo>doskey /macros > C:\\Users\\bakunyo\\.cmdrc\n</pre>\n<p>cmdの起動ファイルで右クリック＞プロパティを選択し、リンク先の中身に設定ファイルを読み込むよう追記してあげます。</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20140216/20140216103802.png\" alt=\"f:id:bakunyo:20140216103802p:plain\" title=\"f:id:bakunyo:20140216103802p:plain\"></span></p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Windows\\System32\\cmd.exe /k \"doskey /macrofile=C:\\Users\\bakunyo\\.cmdrc\"\n</pre>\n<p>ちなみに、自分はRailsInstallerで加わった<a href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8\">コマンドプロンプト</a>を以下のように編集しました。</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\Windows\\System32\\cmd.exe /E:ON /k \"C:\\RailsInstaller\\Ruby2.0.0\\setup_environment.bat C:\\RailsInstaller & doskey /macrofile=C:\\Users\\bakunyo\\.cmdrc\"\n</pre>\n<p>起動コマンドは＆で繋げられるみたいですね！<br>\nこれで、かなり便利になりました。</p>\n",
            "url": "/2014/02/16/windows_alias/",
            "title": "Windowsコマンドプロンプトでaliasを使いたい",
            "date_modified": "2014-02-16T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2014/01/30/sublime_indent/",
            "html_content": "<p><a href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a> Textにはデフォルトで**<span style=\"color: #ff0000\">インデント</span>**を整形する機能があります。<br>\nやり方は、<code>Edit &gt; Line &gt; Reindent</code>です。</p>\n<p>ちなみにこの時適用されるインデントは、 <code>View &gt; Indentation &gt; Tab Width</code> で変更できます。</p>\n<p>今回は、このReindentに<strong>ショートカット</strong>を設定してみます。<br>\nショートカットの設定は <code>Preferences &gt; Key Bindings - User</code>を開き、</p>\n<pre class=\"code\" data-unlink=\"\">\n  { \"keys\": [\"super+ctrl+]\"], \"command\": \"reindent\", \"args\": { \"single_line\": false }},\n</pre>\n<p>を追加して完了です。</p>\n<p><code>super</code>は<a href=\"http://d.hatena.ne.jp/keyword/Mac\">Mac</a>ならCommandキー、<a href=\"http://d.hatena.ne.jp/keyword/Windows\">Windows</a>なら<a href=\"http://d.hatena.ne.jp/keyword/Windows%A5%AD%A1%BC\">Windowsキー</a>となります。</p>\n",
            "url": "/2014/01/30/sublime_indent/",
            "title": "Sublimeでインデントを整形する",
            "date_modified": "2014-01-30T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/12/18/ruby_gold/",
            "html_content": "<p>先日、<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>認定技術者の<span style=\"color: #f90e0e\"><strong>Gold</strong></span>に合格してきました！</p>\n<p>点数は、92点。<br>\nまさかの<a href=\"http://bakunyo.hatenablog.com/entry/2013/07/11/Ruby%E8%AA%8D%E5%AE%9A%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AESilver%E3%81%AB%E5%8F%97%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E8%AB%B8%E3%80%85%E3%81%AE%E5%A0%B1%E5%91%8A\">前回のSilver</a>の点数と同じでしたｗ</p>\n<p>実は、8月にも一度受けたのですが2問ほど点数が足りなくて落ちました。<br>\n<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>のバージョンが1.8だから今の試験は微妙…とかいう意見は気にしないですよー笑</p>\n<p>例によって勉強する際にやったことなどをメモしておきます。</p>\n<h2>参考書</h2>\n<h4><a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>公式資格教科書 <a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>技術者認定試験 Silver/Gold対応</h4>\n<table>\n<thead>\n<tr>\n<th>col 1</th>\n<th>col 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/\"><img src=\"http://ecx.images-amazon.com/images/I/41xcmbBRmlL._SL160_.jpg\" alt=\"\"></a></td>\n<td><font size=\"-1\"><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/\" rel=\"nofollow\" target=\"_top\">Ruby公式資格教科書 Ruby技術者認定試験 Silver/Gold対応 (EXPERT EXPASS)</a><br><br>        増井 雄一郎,小川 伸一郎,(株)日立ソリューションズ 藁谷 修一,川尻 剛,牧 俊男,<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>アソシエーション,CTCテクノロジー(株) 監修 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2\">技術評論社</a> 2012-02-22<br>        売り上げランキング : 113836<br><table style=\"border:none\"><tbody><tr><td style=\"border:none;text-align:left;\">                                                                                                          </td><td style=\"vertical-align:bottom;padding-left:10px;font-size:x-small;border:none\">by <a href=\"http://yomereba.com\" rel=\"nofollow\" target=\"_blank\">ヨメレバ</a></td></tr></tbody></table></font></td>\n</tr>\n</tbody>\n</table>\n<p>公式なので。</p>\n<h4>メタプログラミング<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a></h4>\n<table>\n<thead>\n<tr>\n<th>col 1</th>\n<th>col 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51TODrMIEnL._SL160_.jpg\" alt=\"\"></a></td>\n<td><font size=\"-1\"><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/\" rel=\"nofollow\" target=\"_top\">メタプログラミングRuby</a><br><br>        Paolo Perrotta <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A1%A6%A5%E1%A5%C7%A5%A3%A5%A2%A5%EF%A1%BC%A5%AF%A5%B9\">アスキー・メディアワークス</a> 2010-08-28<br>        売り上げランキング : 94483<br><table style=\"border:none\"><tbody><tr><td style=\"border:none;text-align:left;\">                                                                                                       </td><td style=\"vertical-align:bottom;padding-left:10px;font-size:x-small;border:none\">by <a href=\"http://yomereba.com\" rel=\"nofollow\" target=\"_blank\">ヨメレバ</a></td></tr></tbody></table></font></td>\n</tr>\n</tbody>\n</table>\n<p>Gold受けるには必読と言われている良書。<br>\n2度目に読んだ時にようやく理解できました（苦笑）</p>\n<h4>パーフェクト<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a></h4>\n<table>\n<thead>\n<tr>\n<th>col 1</th>\n<th>col 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/\"><img src=\"http://ecx.images-amazon.com/images/I/51K0jUf%2BiEL._SL160_.jpg\" alt=\"\"></a></td>\n<td><font size=\"-1\"><a href=\"http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/\" rel=\"nofollow\" target=\"_top\">パーフェクトRuby (PERFECT SERIES 6)</a><br><br>        <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>サポーターズ,すがわら まさのり,寺田 玄太郎,三村 益隆,近藤 宇智朗,橋立 友宏,関口 亮一 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2\">技術評論社</a> 2013-08-10<br>        売り上げランキング : 8780<br><table style=\"border:none\"><tbody><tr><td style=\"border:none;text-align:left;\">                                                                                                          </td><td style=\"vertical-align:bottom;padding-left:10px;font-size:x-small;border:none\">by <a href=\"http://yomereba.com\" rel=\"nofollow\" target=\"_blank\">ヨメレバ</a></td></tr></tbody></table></font></td>\n</tr>\n</tbody>\n</table>\n<p>基本文法以外にもメタプログラミングや標準添付ライブラリの章など、色々と参考になります。<br>\n章によって著者が変わっていくのでそのあたりも楽しめる。</p>\n<h2>問題集</h2>\n<h4>公式問題集</h4>\n<p>上記公式テキストの後半に掲載されている問題集。基礎編も合わせて70問位あります。</p>\n<h4>CTC模擬問題</h4>\n<p>以下の2サイトで問題が解けるようになっています。<br>\nたぶん、どちらも内容は同じなので好みのどちらかだけをやればOKだと思います。</p>\n<ul>\n<li><a href=\"http://www.school.ctc-g.co.jp/ruby/training_ruby_gold_01_10.html\">CTC教育サービス</a><br>\nスマホにも対応しているのがGood。</li>\n<li><a href=\"http://jibun.atmarkit.co.jp/scenter/ittrain/121_cal.html\">ITトレメ</a><br>\n<a href=\"http://d.hatena.ne.jp/keyword/RSS\">RSS</a>で購読できるので、毎日少しずつやりたい人にオススメ。</li>\n</ul>\n<h2>参考になる記事</h2>\n<p>勉強のススメ方 + サンプルコードなどもあり、大変参考になります。<br>\n<a href=\"http://qiita.com/nappa/items/9f2a06a81e223cb939ef\">Ruby技術者認定試験Gold 必勝合格法 - Qiita</a><br>\n<a href=\"http://coralreefs.hateblo.jp/entry/2013/05/09/170213\">Ruby認定試験Goldに合格する３つのポイント！ - Coral Reefs</a><br>\n<a href=\"http://d.hatena.ne.jp/rightgo09_ruby/20121226/p1\">やったーRuby技術者認定Gold受かったよー＼(^o^)／ - PerlerのRuby日記</a></p>\n<h2>その他のメモ</h2>\n<p>手前味噌ですが以下の記事も参考まで！<br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/11/26/%E5%AE%9A%E6%95%B0%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%86%85%E5%AE%9A%E7%BE%A9\">定数のメソッド内定義</a><br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/11/25/%E3%83%A6%E3%83%BC%E3%82%B6%E5%AE%9A%E7%BE%A9%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%3D%3D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\">ユーザ定義クラスの==メソッド</a><br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/10/25/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4\">メソッドとブロックの戻り値</a><br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/10/23/Ruby%E5%88%B6%E5%BE%A1%E6%A7%8B%E9%80%A0%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%BE%E3%81%A8%E3%82%81\">Ruby制御構造の戻り値まとめ</a><br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/10/23/%28Ruby%29floor%E3%81%A8truncate%E3%81%AE%E9%81%95%E3%81%84\">floorとtruncateの違い</a><br>\n<a href=\"http://bakunyo.hatenablog.com/entry/2013/08/26/%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92undef%E3%81%99%E3%82%8B\">クラスメソッドをundefする</a></p>\n",
            "url": "/2013/12/18/ruby_gold/",
            "title": "Ruby認定技術者のGoldに受かったので報告",
            "date_modified": "2013-12-18T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/11/25/user_define_method/",
            "html_content": "<p>備忘用のメモ。</p>\n<p>==メソッドはサブクラスで個別に定義されるべきとしており、デフォルトでObject#==メソッドはequal?メソッドと同じになっているようです。</p>\n<p>ユーザ定義したクラスでは、素の状態では別オブジェクトで==メソッドを使うとfalseになります。</p>\n<pre class=\"code\" data-unlink=\"\">\nirb(main):001:0> class Foo\nirb(main):002:1> end\n=> nil\nirb(main):003:0> Foo.new == Foo.new\n=> false\n</pre>",
            "url": "/2013/11/25/user_define_method/",
            "title": "ユーザ定義クラスの==メソッド",
            "date_modified": "2013-11-25T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/10/25/return_value_of_method_and_block/",
            "html_content": "<p>メソッドとブロックの戻り値についてのメモ。</p>\n<p>yieldの前に変数を置いて、ブロックの戻り値を受け取ることができます。<br>\nブロックの戻り値は、最後に評価された値です。</p>\n<pre class=\"code\" data-unlink=\"\">\ndef my_method\n  a = yield\n  puts a + \" received\"\nend\n\nmy_method do\n  \"block message\"\nend        # \"block message received\"と表示される\n</pre>\n<p>ブロック内でbreakを使うと、引数に指定した値がメソッドの戻り値となります。</p>\n<pre class=\"code\" data-unlink=\"\">\ndef my_method\n  a = yield\n  puts a + \" received\"\nend\n\nmy_method do\n  break \"block message\"\nend        # => \"block message\"\n</pre>\n<p>メソッド内でreturnを使い、戻り値を指定することができます。</p>\n<pre class=\"code\" data-unlink=\"\">\ndef my_method\n  a = yield\n  if a == \"block message\"\n    return \"same\"\n  end\n  puts a + \" received\"\nend\n\nmy_method do\n  \"block message\"\nend        # => \"same\"\n</pre>",
            "url": "/2013/10/25/return_value_of_method_and_block/",
            "title": "メソッドとブロックの戻り値",
            "date_modified": "2013-10-25T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/10/23/floor_and_truncate/",
            "html_content": "<h2>Numeric#floorとNumeric#truncateの違い</h2>\n<p><strong>floor</strong>は自身以下で最大の整数を返し、<strong>truncate</strong>は自身から0に近づくうち、最も近い整数を返します。<br>\n正の値では結果は同じですが、負の値で結果が異なります。</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\>irb\nirb(main):001:0> 1.2.floor\n=> 1\nirb(main):002:0> 1.2.truncate\n=> 1\nirb(main):003:0> -1.2.floor\n=> -2\nirb(main):004:0> -1.2.truncate\n=> -1\n</pre>\n<h2>公式リファレンス</h2>\n<p><a href=\"http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/truncate.html\">Numeric#truncate</a><br>\n<a href=\"http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/floor.html\">Numeric#floor</a></p>\n",
            "url": "/2013/10/23/floor_and_truncate/",
            "title": "(Ruby)floorとtruncateの違い",
            "date_modified": "2013-10-23T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/09/04/windows_files/",
            "html_content": "<h2>Windowsでファイル名の一覧を取得するコマンド</h2>\n<p><a href=\"http://d.hatena.ne.jp/keyword/UNIX\">UNIX</a>/<a href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>系のOSだと<code>ls</code>コマンドで出力できてしまうが、Windowsの<a href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8\">コマンドプロンプト</a>でlsを実行すると日本語が文字化けすることが多く、困っていました。。<br>\nで、Windowsコマンドはあまり使っていなかったのですが、調べてみると<code>dir</code>が使えることが分かりました。<br>\nオプションは以下を使用。</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/s</td>\n<td>サブディレクトリを含める</td>\n</tr>\n<tr>\n<td>/B</td>\n<td>ファイル名のみ表示</td>\n</tr>\n</tbody>\n</table>\n<p>こんな感じで、出来ました〜</p>\n<pre>\n\\Desktop\\inbox>dir /B /s\n\\Desktop\\inbox\\file.xlsx\n\\Desktop\\inbox\\myfile.xls\n\\Desktop\\inbox\\shortcut\n\\Desktop\\inbox\\shortcut\\bill.lnk\n\\Desktop\\inbox\\shortcut\\ipmsg.lnk\n\\Desktop\\inbox\\shortcut\\[sublime](http://d.hatena.ne.jp/keyword/sublime).lnk\n</pre>\n<h2>参考</h2>\n<p><a href=\"http://itpro.nikkeibp.co.jp/article/Windows/20051025/223349/\">Dir - ITPro Windowsコマンド集</a></p>\n",
            "url": "/2013/09/04/windows_files/",
            "title": "Windowsでファイル名の一覧を取得する",
            "date_modified": "2013-09-04T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/08/27/uploadify/",
            "html_content": "<h2>複数ファイルのアップロードに特化した「Uploadify」</h2>\n<p><a href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>のプラグインで、複数のファイルを選択しアップロードできる<a href=\"http://www.uploadify.com/\">uploadify</a>というのを使ってみました。</p>\n<p><a href=\"http://www.uploadify.com/\"><img src=\"http://capture.heartrails.com/150x130/shadow?http://www.uploadify.com/\" alt=\"\"></a><a href=\"http://www.uploadify.com/\">HTML5 File Upload Script, jQuery Multiple File Upload Plugin - Uploadify / UploadiFive - Uploadify</a><a href=\"http://b.hatena.ne.jp/entry/http://www.uploadify.com/\"><img src=\"http://b.hatena.ne.jp/entry/image/http://www.uploadify.com/\" alt=\"\"></a></p>\n<p><a href=\"http://www.uploadify.com/demos/\">デモはこちら</a></p>\n<h2>使い方</h2>\n<p>以下の記事が大変参考になりました。</p>\n<p><a href=\"http://www.tinybeans.net/blog/2010/04/13-121311.html\">Ajax風にファイルをアップロードするjQueryプラグイン「Uploadify」の使い方 | かたつむりくんのWWW</a><a href=\"http://b.hatena.ne.jp/entry/http://www.tinybeans.net/blog/2010/04/13-121311.html\"><img src=\"http://b.hatena.ne.jp/entry/image/http://www.tinybeans.net/blog/2010/04/13-121311.html\" alt=\"\"></a></p>\n<p><a href=\"http://wataame.sumomo.ne.jp/archives/3370\">ファイルをまとめてアップロードする jQuery のプラグイン「Uploadify」の使い方。 | Wataame Frog</a><a href=\"http://b.hatena.ne.jp/entry/http://wataame.sumomo.ne.jp/archives/3370\"><img src=\"http://b.hatena.ne.jp/entry/image/http://wataame.sumomo.ne.jp/archives/3370\" alt=\"\"></a></p>\n<h2>ファイル拡張子の限定</h2>\n<p><strong>fileTypeExts</strong>というオプションで選択できるファイルの拡張子を限定できます。<br>\n<a href=\"http://www.uploadify.com/documentation/uploadify/filetypeexts/\">fileTypeExts - Uploadify Documentation</a></p>\n<p><a href=\"http://www.uploadify.com/documentation/uploadify/filetypeexts/\">デモはこちら</a></p>\n<h2>指定外の拡張子が選ばれた場合の対応</h2>\n<p>ファイル選択のダイアログで「ファイルの種類」→「すべてのファイル」としてしまうと、他の拡張子も選択できてしまいます(キューには追加されない)。<br>\n選択後には、警告ダイアログが表示されます。<br>\nメッセージの内容は</p>\n<pre class=\"code\" data-unlink=\"\">\nSome files were not added to the queue:\n</pre>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130827/20130827203147.png\" alt=\"f:id:bakunyo:20130827203147p:plain\" title=\"f:id:bakunyo:20130827203147p:plain\"></span></p>\n<p>英語…ちょっと不親切なので、日本語に変えたいですね。<br>\nこのメッセージを変えるオプションがあっても良さそうなものですが、ありませんでした。<br>\nそこで、<span style=\"color: #ff0000\"><strong><a href=\"http://d.hatena.ne.jp/keyword/jquery\">jquery</a>.uploadify.js</strong></span>を編集します。<br>\n282行目と572行目にメッセージがありました。</p>\n<pre class=\"code\" data-unlink=\"\">\n...\n  uploadQueue        : [], // The files currently to be uploaded\n  errorMsg           : 'Some files were not added to the queue:'\n};\n...\n</pre>\n<pre class=\"code\" data-unlink=\"\">\n...\n  // Reset some queue info\n  this.queueData.errorMsg       = 'Some files were not added to the queue:';\n  this.queueData.filesReplaced  = 0;\n...\n</pre>\n<p>上記2つを変更したら、メッセージを変えることができました！</p>\n",
            "url": "/2013/08/27/uploadify/",
            "title": "複数ファイルのuploadができる「Uploadify」を使ってみた",
            "date_modified": "2013-08-27T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/08/26/undef_class_method/",
            "html_content": "<p><a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>でクラスメソッドをundefする時のメモ。<br>\nまずは以下のようにクラスメソッドを定義し、undefする。</p>\n<pre class=\"code\" data-unlink=\"\">\nclass A\n  def A.msg\n    puts \"class method\"\n  end\nend\n\nclass A\n  undef A.msg\nend\n</pre>\n<p><strong>結果、エラーになる。</strong><br>\n<code>undef</code>メソッドはシンボルまたは識別子を受け付けるけど、<code>A.msg</code>だと識別子としては認識してくれないみたい。</p>\n<h2>対策</h2>\n<p>クラスを再オープンする。</p>\n<pre class=\"code\" data-unlink=\"\">\nclass << A\n  undef msg\nend\n</pre>\n<p>これでundefできました。</p>\n<p>ちなみに、undef_methodも同じようにクラスの再オープンをしないとエラーになる。</p>\n",
            "url": "/2013/08/26/undef_class_method/",
            "title": "クラスメソッドをundefする",
            "date_modified": "2013-08-26T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/07/20/install_sublime3/",
            "html_content": "<p><a href=\"http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\">以前インストールした</a><a href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a> Text 2をバージョンアップして<a href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a> Text 3をインストールしたので、はじめにやったことのメモです。<br>\n以下の記事を参考にしました。<br>\n<a href=\"http://futurismo.biz/archives/1572\"><img src=\"http://capture.heartrails.com/150x130/shadow?http://futurismo.biz/archives/1572\" alt=\"\"></a><a href=\"http://futurismo.biz/archives/1572\">Sublime Text3をWindowsに入れてみた！初めての導入と簡単なカスタマイズまとめ | Futurismo</a><a href=\"http://b.hatena.ne.jp/entry/http://futurismo.biz/archives/1572\"><img src=\"http://b.hatena.ne.jp/entry/image/http://futurismo.biz/archives/1572\" alt=\"\"></a></p>\n<h3>設定関連</h3>\n<p>Preferences &gt; Settings - User</p>\n<pre class=\"code\" data-unlink=\"\">\n{\n  // スペースやタブを表示する\n  \"draw_white_space\": \"all\",\n\n  // フォントサイズ\n  \"font_size\": 10.2,\n\n  // カーソル行をハイライトする\n  \"highlight_line\": true,\n\n  // 行間(上)\n  \"line_padding_top\": 3,\n\n  // 左側溝との間隔\n  \"margin\": -3,\n\n  // タブサイズ\n  \"tab_size\": 2,\n\n  // タブを押した時スペースに\n  \"translate_tabs_to_spaces\": true,\n\n  // 行末のスペースを保存時に削除\n  \"trim_trailing_white_space_on_save\": true,\n\n  // 横スクロールをなくす\n  \"word_wrap\": true,\n\n  // 無視するパッケージ\n  \"ignored_packages\":\n  [\n    \"Vintage\"\n  ],\n}\n</pre>\n<h3>キー操作</h3>\n<p>Preferences &gt; Key Bindings - User</p>\n<pre class=\"code\" data-unlink=\"\">\n[\n  { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },\n  { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },\n]\n</pre>\n<p>ecllipseっぽく、<code>alt + ↑</code> <code>alt + ↓</code>で行移動できるようにしました＾＾</p>\n",
            "url": "/2013/07/20/install_sublime3/",
            "title": "Sublime Text 3をインストールしてみた",
            "date_modified": "2013-07-20T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/07/11/ruby_silver/",
            "html_content": "<p>Ruby認定技術者のSilverに<span style=\"color: #ff0000\"><strong>合格</strong></span>してきました！</p>\n<p>得点は、92点（100点中）。</p>\n<p>勉強の仕方については他のブログ等で多数解説されているので、ここではこれから勉強を始めるという方に役に立ちそうなメモを残しておきます。</p>\n<p>Ruby公式資格教科書には、<strong><span style=\"color: #ff0000\">実は沢山の訂正箇所があります。</span></strong></p>\n<p>学習を始める際には、まず訂正箇所を一気に直しちゃいましょう！</p>\n<p>正誤表は、以下で公開されています。</p>\n<p><a href=\"http://gihyo.jp/book/2012/978-4-7741-5001-7/support\">サポートページ - Ruby公式資格教科書 Ruby技術者認定試験Silver/Gold対応</a></p>\n<p>また、サポートページで記載されてないけど、<span style=\"color: #ff0000\">ここも誤りでは？</span>と思った箇所があるので以下に記載します。</p>\n<h4>[1つ目]p.210 Hashクラスの説明</h4>\n<p>ハッシュは連想配列とも呼ばれ、配列でのインデックスにあたるキーとして、数値以外の任意のRubyオブジェクトを利用できます。</p>\n<p>これは誤りとはいえないかもしれませんが、何か違和感を覚えました。。</p>\n<p>まるで、**<span style=\"color: #ff0000\">連想配列は数値をキーに使用できない</span>**かのような言い回しに感じませんか？</p>\n<p>僕の日本語読解能力が乏しいだけですかね？ そうかもしれないです。。。笑</p>\n<h4>[2つ目]p.228 表5-4 ファイルをテストするメソッド</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>誤</td>\n</tr>\n<tr>\n<td>正</td>\n</tr>\n</tbody>\n</table>\n<p>単なるスペルミスですね。</p>\n<p>こちらはサポートページへお問い合わせ済です。</p>\n<h4>実は破壊的なメソッド一覧</h4>\n<p>公式問題集でかなりの割合を占める、破壊的・非破壊的メソッドの問題。<br>\n<span style=\"color: #ff0000\"><strong>！（エクスクラメーションマーク）</strong></span>が付いてればわかりやすいですが、無くても破壊的である場合が厄介です。</p>\n<p>ということで、！ の付いていない破壊的メソッド、通称**<span style=\"color: #ff0000\">「実は破壊的なメソッド」</span>**を一覧にしてみました。</p>\n<h4>Stringクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">insert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">concat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">［］=</td>\n</tr>\n</tbody>\n</table>\n<h5>おまけ</h5>\n<p>String#deleteは<strong>実は破壊的でない</strong></p>\n<h4>Arrayクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">push</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">concat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">insert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unshift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[]=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fill</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_at</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n</tr>\n</tbody>\n</table>\n<h4>Hashクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">［］=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">update</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n</tr>\n</tbody>\n</table>\n<h4>おまけ</h4>\n<p>実は破壊的じゃないメソッド merge、invert</p>\n<h4>疑問…</h4>\n<p>String#deleteは非破壊的なのに、Array#deleteは破壊的なんですよね。</p>\n<p>このあたり、どう定義分けをしているのか気になって仕方ありません。</p>\n<blockquote>\n<p>2013.7.17 追記</p>\n</blockquote>\n<blockquote>\n<p>破壊的メソッドの覚え方について以下の記事を参考にさせて頂いていました。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://jijixi.azito.com/gotow/widestudio/ruby_with_widestudio/1st_step_ruby_for_C_users.html\">C 言語ユーザのための Ruby 入門</a></p>\n<p>以下は引用。破壊的メソッドは、基本的に以下の3つのどれかだそうです。</p>\n</blockquote>\n<blockquote>\n<hr>\n<p>1.末尾に &quot;!&quot; が付いているメソッド</p>\n</blockquote>\n<blockquote>\n<p>2.リスト的な構造を持つクラスにおいて特定の要素を追加・削除・変更するメソッド</p>\n</blockquote>\n<blockquote>\n<p>3.オブジェクトそのものを置換えたり、消去したり、属性を変更したりするメソッド</p>\n</blockquote>\n<blockquote>\n<hr>\n<p>たしかに、こう考えるとわかりやすいですね！</p>\n</blockquote>\n<h4>Overrideできない演算子</h4>\n<p>最後に、Overrideできない演算子をご紹介しておきます。</p>\n<pre><code class=\"hljs \">= += ! not &amp;&amp; and || or :? ::\n</code></pre>\n<p>これだけ見るとただの記号の羅列にしか見えなくて覚えられそうにありませんが、<br>\n以下のように分類すると記憶しやすいです。</p>\n<ul>\n<li>代入演算子（自己代入を含む）</li>\n<li>論理演算子</li>\n<li>三項演算子</li>\n<li>::</li>\n</ul>\n<p>ということで、次はGold目指してがんばります！</p>\n",
            "url": "/2013/07/11/ruby_silver/",
            "title": "Ruby認定技術者のSilverに受かったので諸々の報告",
            "date_modified": "2013-07-11T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/06/27/minitsuku2/",
            "html_content": "<p><a href=\"http://www.minituku.net/?locale=ja\"><img src=\"http://capture.heartrails.com/150x130/shadow?http://www.minituku.net/?locale=ja\" alt=\"\"></a><a href=\"http://www.minituku.net/?locale=ja\">ミニツク - Rubyのe-ラーニング研修システム</a><a href=\"http://b.hatena.ne.jp/entry/http://www.minituku.net/?locale=ja\"><img src=\"http://b.hatena.ne.jp/entry/image/http://www.minituku.net/?locale=ja\" alt=\"\"></a></p>\n<p><span style=\"color: #ff0000\"><strong><a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>の<a href=\"http://d.hatena.ne.jp/keyword/e%A5%E9%A1%BC%A5%CB%A5%F3%A5%B0\">eラーニング</a>システム</strong></span>である<a href=\"http://www.minituku.net/?locale=ja\">ミニツク</a>が初級者にも分かりやすく内容も充実しています。<br>\n自分のレベル感にぴったりと合っているので、最近は<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>のお勉強は専らこれです。<br>\nMatzさんのビデオ講義もあり、楽しく学習できます。<br>\n<a href=\"http://www.minituku.net/courses/500228005/lessons/137422063/exercises/762982128?locale=ja\">演習コースの2問目</a>を解いたのですが、ちょっと引っ掛かったのでメモを残しておきます。<br>\n最初に、自分が作成したコードは以下です。<br>\n所用時間は20分位でした（10分オーバーｗ）。</p>\n<p>（見るからに酷いコードですね）<br>\nまぁとりあえず動くし、OKとして解答を見ると、衝撃のコード量。</p>\n<p>ここまで簡潔に書けるんですね…（感動）<br>\nただ、上記を実行してみるとエラーが発生。</p>\n<pre class=\"code\" data-unlink=\"\">\nminitk.rb:49:in `block in clever_print': undefined method `to_a' for \"the\":String (NoMethodError)\n</pre>\n<p>なるほど調べてみると、<strong><span style=\"color: #ff0000\">String</span><strong>クラスの</strong><span style=\"color: #ff0000\">to_a</span><strong>メソッドは無くなってしまったようですね(たぶん1.9以降で)。<br>\nという事で、型を判別して</strong>String</strong>の場合はそのまま配列にpushすることにしました。</p>\n<p>これで正常に動くようになりました。<br>\nsplat<a href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>とか、case文の条件判断とか、大変勉強になります～！</p>\n",
            "url": "/2013/06/27/minitsuku2/",
            "title": "ミニツクの演習2を解いてみた。",
            "date_modified": "2013-06-27T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/06/25/regex_options/",
            "html_content": "<p>コマンドやメソッドでよく見る<strong>1文字</strong>のオプション指定。例えば、こうゆうの。</p>\n<pre class=\"code\" data-unlink=\"\">\ntar zxvf\nps aux\n</pre>\n<p>とても便利だけど、何の略か分からないととても覚えにくいです。<br>\nということで、少しずつ由来を調べていくことにしました。<br>\n調べても見つからない所は、想像で補います(間違えてたら教えてください)。</p>\n<p>今回は、<a href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>のオプション。</p>\n<h2><a href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>のオプション</h2>\n<h4>アンカー</h4>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>機能</th>\n<th>由来</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/b</td>\n<td>単語境界</td>\n<td><span style=\"color: #ff0000\"><strong>Border</strong></span></td>\n</tr>\n</tbody>\n</table>\n<h4>マッチオプション</h4>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>機能</th>\n<th>由来</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>大文字小文字の違いを無視する</td>\n<td><span style=\"color: #ff0000\"><strong>IgnoreCase</strong></span></td>\n</tr>\n<tr>\n<td>g</td>\n<td>マッチする場所すべてを対象にする</td>\n<td><span style=\"color: #ff0000\"><strong>GlobalMatch</strong></span></td>\n</tr>\n</tbody>\n</table>\n<h4>参考</h4>\n<p><a href=\"http://doc.mas3.net/regexp/reference.html\">手を動かしながら覚える正規表現＜リファレンス＞</a><br>\n<a href=\"http://msdn.microsoft.com/ja-jp/library/vstudio/yd1hzczs.aspx\">正規表現のオプション - MSDN</a><br>\ni =&gt; Ignoreのことだったのですね〜。知れば大したことないですが、知らないと何のことやら。</p>\n",
            "url": "/2013/06/25/regex_options/",
            "title": "オプションの由来シリーズ - 正規表現",
            "date_modified": "2013-06-25T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/06/20/crontab/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130620/20130620214241.jpg\" alt=\"f:id:bakunyo:20130620214241j:plain\" title=\"f:id:bakunyo:20130620214241j:plain\"></span></p>\n<p><a href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>で定期的にコマンドを実行してくれる<span style=\"color: #ff0000\"><strong>crontab</strong></span>の使い方をまとめてみました。</p>\n<h2>まずはcrondが起動しているか確認</h2>\n<p>デフォルトでは自動起動のはずですが、念の為crondが起動しているかを確認しておきましょう。<br>\nここで起動していなければ、その後の設定をいくらしても動いてくれることはありません:D</p>\n<pre class=\"code\" data-unlink=\"\">\n# /etc/rc.d/init.d/crond status\ncrond (pid  xxxx) を実行中...     // ちゃんと起動していますね！\n</pre>\n<h2>crontabファイルの設定</h2>\n<p>crondが起動していることを確認できたら、crontabファイルの設定です。<br>\ncrontabファイルには「<strong><span style=\"color: #ff0000\">この日付のこの時刻にこのコマンドを実行せよ</span></strong>」という命令が書き込まれています。<br>\ncrontabファイルは<code>/var/spool/cron/user</code>(ユーザー毎)に保存されていますが、<strong>基本的にcrontabファイルは直接編集せず、</strong><code>crontab</code>コマンドを使って編集するのが習わしです。<br>\n以下はcrontabコマンドの説明です。</p>\n<h4>crontabコマンド</h4>\n<pre class=\"code\" data-unlink=\"\">\ncrontab [-u user] file\n　または\ncrontab [-u user] [-e | -l | -r | -i]\n</pre>\n<h4>各オプションの説明</h4>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>userに対象となるユーザーを指定</td>\n</tr>\n<tr>\n<td>e</td>\n<td>エディタを起動し、crontabの内容を編集する</td>\n</tr>\n<tr>\n<td>l</td>\n<td>現在登録されている内容を表示する</td>\n</tr>\n<tr>\n<td>r</td>\n<td>現在登録されている内容を削除する</td>\n</tr>\n<tr>\n<td>i</td>\n<td>(rと併用して)削除する前に確認プロンプトを表示</td>\n</tr>\n</tbody>\n</table>\n<p>オプションでeを指定しようとしたら間違えてrを押してしまい、設定が全て削除されてしまった悲しい事例が各所で報告されています。</p>\n<hr>\n<p><a href=\"http://blog.cles.jp/item/3303\">crontab -r とやってしまった時の対処法</a><a href=\"http://b.hatena.ne.jp/entry/http://blog.cles.jp/item/3303\"><img src=\"http://b.hatena.ne.jp/entry/image/http://blog.cles.jp/item/3303\" alt=\"\"></a><br>\n<a href=\"http://blog.kentarok.org/entry/20061030/1162206137\">crontab -r を安全にする - delirious thoughts</a><a href=\"http://b.hatena.ne.jp/entry/http://blog.kentarok.org/entry/20061030/1162206137\"><img src=\"http://b.hatena.ne.jp/entry/image/http://blog.kentarok.org/entry/20061030/1162206137\" alt=\"\"></a></p>\n<hr>\n<p>誤って削除してしまわないよう、eオプションは使わずに<strong>別ファイルにて管理した方が望ましい</strong>ようです。<br>\n現在eオプションのみで管理しているなら、lオプションをリダイレクトして別ファイルに書き出しておきましょう。</p>\n<pre class=\"code\" data-unlink=\"\">\n# crontab -u user -l > ~/crontab.bk\n</pre>\n<h2>crontabファイルの書き方</h2>\n<p>それではメインの、crontabファイルの書き方についてです。<br>\n「<span style=\"color: #ff0000\"><strong>この日付のこの時刻にこのコマンドを実行せよ</strong></span>」という命令を記述するために、以下の書式を用います。</p>\n<pre class=\"code\" data-unlink=\"\">\n分　時　日　月　曜日　＜コマンド＞\n</pre>\n<p>日付・時刻を表す5つのフィールドには、以下の値を設定できます。</p>\n<table>\n<thead>\n<tr>\n<th>フィールド</th>\n<th>取りうる値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分</td>\n<td>0~59</td>\n</tr>\n<tr>\n<td>時</td>\n<td>0~23</td>\n</tr>\n<tr>\n<td>日</td>\n<td>1~31</td>\n</tr>\n<tr>\n<td>月</td>\n<td>1~12</td>\n</tr>\n<tr>\n<td>曜日</td>\n<td>0~7 (0と7が日曜日)</td>\n</tr>\n</tbody>\n</table>\n<h4>範囲指定</h4>\n<p>各フィールドは<span style=\"color: #ff0000\"><strong>-(ハイフン)</strong></span>でつなげて範囲指定することができます。<br>\n以降、分フィールドを書き方の例として挙げていきます。</p>\n<pre class=\"code\" data-unlink=\"\">\n5-10    // 5分・6分・7分・8分・9分・10分に実行\n</pre>\n<p>このように、<code>5-10</code>と範囲指定することで5分~10分の間に毎分コマンドが実行されます。<br>\n全範囲（分フィールドだと0~59）を範囲指定したい場合には<span style=\"color: #ff0000\"><strong>*(アスタリスク)</strong></span>を使用します。</p>\n<pre class=\"code\" data-unlink=\"\">\n*   // 毎分実行\n</pre>\n<h4>リスト指定</h4>\n<p>不連続な複数の値を指定したい時は、<span style=\"color: #ff0000\"><strong>,(カンマ)</strong></span>で区切ってリスト指定することができます。</p>\n<pre class=\"code\" data-unlink=\"\">\n1,3,5   // 1分・3分・5分に実行\n</pre>\n<p>リスト指定の中に範囲指定を含めることも可能です。</p>\n<pre class=\"code\" data-unlink=\"\">\n1,3,5-10   // 1分・3分・5分・6分・7分・8分・9分・10分に実行\n</pre>\n<h4>間隔値指定</h4>\n<p>「◯分間隔」などとしたい場合は、範囲指定と併せて間隔値を指定することができます。<br>\n範囲指定の後に<span style=\"color: #ff0000\"><strong>/(スラッシュ)</strong></span>をつづけ、その後に間隔値を指定します。</p>\n<pre class=\"code\" data-unlink=\"\">\n5-10/2   // 5分・7分・9分(5分~10分の間の2分間隔)に実行\n*/5   // 5分おきに実行\n</pre>\n<h4>設定例</h4>\n<p>これらの書き方を組み合わせて、「<span style=\"color: #ff0000\"><strong>この日付のこの時刻に</strong></span>」の部分を指定します。<br>\n以下、設定例です。<br>\nここでは仮に、usr/bin/cmdをコマンドとして実行するとします。</p>\n<pre class=\"code\" data-unlink=\"\">\n00 14 * * * /usr/bin/cmd      // 毎日14:00に実行\n* * * * * /usr/bin/cmd        // 毎分実行\n15,30 06 * * 2 /usr/bin/cmd   // 毎週火曜日の6:15と6:30に実行\n05 23 * 3-5 4 /usr/bin/cmd    // 3~5月の毎週木曜日23:05に実行\n</pre>\n<p>といった具合です。</p>\n<h4>ちょっと細かい話。</h4>\n<p>cronは毎分このcrontabファイルをチェックし、**<span style=\"color: #ff0000\">分・時・月が現在時刻と一致し、かつ日と曜日フィールドの2つのいずれかが現在時刻と一致すれば</span>**コマンドを実行します。<br>\nこの部分が少しややこしいのですが、cronは日フィールドと曜日フィールドの2つと見比べてコマンド実行するかを判断します。なので、この２つに関しては少し見方を変えてあげます。<br>\n具体的には、日フィールドと曜日フィールドのそれぞれにおいて、<em>(アスタリスク)と</em>以外を指定した場合のどのような指定になるかを分けるとわかりやすいです。</p>\n<pre><code>   | 日が*           | 日が*以外       \n</code></pre>\n<p>------ | ------------- | ------------<br>\n曜日が*   | 毎日            | 日フィールドで指定した日<br>\n曜日が*以外 | 曜日フィールドで指定した日 | いずれかに当てはまる日</p>\n<p>設定例を以下に挙げます。</p>\n<pre class=\"code\" data-unlink=\"\">\n00 14 * * * /usr/bin/cmd         // 毎日14:00に実行\n00 14 1,5 * * /usr/bin/cmd     // 毎月1日,5日の14:00に実行\n00 14 * * 4 /usr/bin/cmd        // 毎週木曜日14:00に実行\n00 14 1,5 * 4 /usr/bin/cmd    // 毎月1日,5日と毎週木曜日14:00に実行\n</pre>\n<p>といった感じになります。</p>\n<p>他にも書くべきこととして**<a href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>の指定**などがあるのですが、疲れたのでここまで。</p>\n",
            "url": "/2013/06/20/crontab/",
            "title": "crontab使い方まとめ。",
            "date_modified": "2013-06-20T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/05/25/daily_report_git/",
            "html_content": "<p>いつも業務後に日報を書いてるんですけど、今日開発した部分を<span style=\"color: #ff0000\"><strong>Git logを参照して</strong></span>ぱぱっとつくれないかな？ と思い調べてみたら、<strong>ありました。</strong></p>\n<h2>やり方。</h2>\n<p><code>--pretty</code>というオプションで、フォーマットを指定できるみたいです。という訳で、</p>\n<pre class=\"code\" data-unlink=\"\">\nC:\\workspace\\test>git log --pretty=format:\"%cd %s\"\nThu May 23 21:57:36 2013 +0900 change file ext from Text to Markdown\nThu May 23 21:56:18 2013 +0900 modify content\nThu May 23 21:54:39 2013 +0900 create README file\n</pre>\n<p>こんな感じでできました！</p>\n<p>このやり方だと**<span style=\"color: #ff0000\">1コミット1行</span>**になるので、どこからが本日分の作業だったのかが一目瞭然です！</p>\n<p>ちなみに、<code>format:</code>の部分を省略して</p>\n<pre class=\"code\" data-unlink=\"\">\ngit log --pretty=\"%cd %s\"\n</pre>\n<p>でもうまく結果が表示されました〜！</p>\n<h4>参考URL</h4>\n<p><a href=\"http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%B1%A5%E6%AD%B4%E3%81%AE%E9%96%B2%E8%A6%A7\">Git の基本 - コミット履歴の閲覧</a></p>\n",
            "url": "/2013/05/25/daily_report_git/",
            "title": "git logで日報を書く",
            "date_modified": "2013-05-25T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/05/23/gem_command/",
            "html_content": "<p><strong><a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>のパッケージ管理システム</strong>であるGemを使う機会も増えてきたので、そろそろコマンドをまとめておくことにしました。</p>\n<h2><a href=\"http://d.hatena.ne.jp/keyword/RubyGems\">RubyGems</a>とは?</h2>\n<h4><a href=\"http://d.hatena.ne.jp/keyword/Wikipedia\">Wikipedia</a>より引用</h4>\n<blockquote>\n<p><a href=\"http://d.hatena.ne.jp/keyword/RubyGems\">RubyGems</a>は、<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>言語用のパッケージ管理システムであり、<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>のプログラムと（&quot;gem&quot; と呼ばれる）ライブラリの配布用標準フォーマットを提供している。gemを容易に管理でき、gemを配布するサーバの機能も持つ。<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>バージョン1.9以降では標準ライブラリの一部となっている。</p>\n</blockquote>\n<p>便利なGemパッケージが世の中には沢山配布されているので、有効に活用していきたいですね！<br>\nGemの公式マニュアルは以下になります。<br>\n<a href=\"http://docs.rubygems.org/\">RubyGems Manuals</a></p>\n<p>それでは、よく使うGemコマンドを用途別にまとめていきます。</p>\n<h2>Gemを探す</h2>\n<p><code>list</code>または<code>search</code>は、ローカルもしくはリモートにあるGemパッケージを検索します。<br>\n2つのコマンドはほぼ同じ動作をします。違いは以下の点です。</p>\n<p><code>list</code>： **<span style=\"color: #ff0000\">Gemパッケージ名の頭から文字列を指定して</span>**検索<br>\n<code>search</code>： **<span style=\"color: #ff0000\">Gemパッケージ名を<a href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>で</span>**検索</p>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem [list / search] [String] [options]</td>\n<td>Stringで始まるGemを表示する</td>\n</tr>\n</tbody>\n</table>\n<p>以下のオプションを指定することができます。</p>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i, --[no-]installed</td>\n<td>インストール済み[でない]Gemに限定する</td>\n</tr>\n<tr>\n<td>-d, --[no-]details</td>\n<td>詳細を併せて表示する</td>\n</tr>\n<tr>\n<td>-l, --local</td>\n<td>localを対象とする</td>\n</tr>\n<tr>\n<td>-r, --remote</td>\n<td>remoteを対象とする</td>\n</tr>\n<tr>\n<td>-b, --both</td>\n<td>local, remoteどちらも対象とする</td>\n</tr>\n</tbody>\n</table>\n<h5>デフォルトで指定されているオプション</h5>\n<pre class=\"code\" data-unlink=\"\">\n--local --no-details\n</pre>\n<p>デフォルトでは<span style=\"color: #ff0000\">--local</span>が指定されているので、外部のを探したい時は<span style=\"color: #ff0000\">-r</span>指定しないとダメですね〜。</p>\n<p>また、インストールしてあったけどこれ何だっけ？ って時には</p>\n<pre class=\"code\" data-unlink=\"\">\ngem list GEMNAME -d\n</pre>\n<p>で中身を確認します。便利ですね！</p>\n<p>なお、Gemパッケージは以下のWebサイトでも探すことができます。<br>\n<a href=\"http://rubygems.org/\">RubyGems.org</a><br>\n<a href=\"https://www.ruby-toolbox.com/\">The Ruby Toolbox</a></p>\n<h2>Gemをインストールする</h2>\n<p>Gemパッケージをインストールするコマンドです。</p>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem install [GEMNAME] [options]</td>\n<td>localまたはremoteからGemパッケージをインストール</td>\n</tr>\n</tbody>\n</table>\n<p>以下のオプションを指定することができます。</p>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-v, --version</td>\n<td>バージョン指定 ex) -v &quot;= 1.0.0&quot;</td>\n</tr>\n<tr>\n<td>--[no-]rdoc</td>\n<td>Rdocドキュメントをダウンロードする[しない]</td>\n</tr>\n<tr>\n<td>--[no-]ri</td>\n<td>riドキュメントをダウンロードする[しない]</td>\n</tr>\n<tr>\n<td>-l, --local</td>\n<td>localからインストール</td>\n</tr>\n<tr>\n<td>-r, --remote</td>\n<td>remoteからインストール</td>\n</tr>\n<tr>\n<td>-b, --both</td>\n<td>local, remoteどちらからでも</td>\n</tr>\n</tbody>\n</table>\n<h5>デフォルトで指定されているオプション</h5>\n<pre class=\"code\" data-unlink=\"\">\n--both --version '>= 0' --rdoc --ri --no-force\n--install-dir /my/gems/directory\n</pre>\n<p>個人的に使ったことが無いですが、ローカルからインストールする時は、<code>.gem</code>ファイルのある場所に移動してからコマンドを実行するみたいです。</p>\n<h4>アンインストール</h4>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem uninstall [GEMNAME]</td>\n<td>Gemパッケージをアンインストール</td>\n</tr>\n</tbody>\n</table>\n<p>versionが違うやつとかはややこしいのでこれで除いたりしますね。</p>\n<h2>インストールしたGemファイル（の場所）を探す</h2>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem which [GEMNAME]</td>\n<td>localにあるGEMNAMEパスを表示する</td>\n</tr>\n</tbody>\n</table>\n<p>gemファイルが置いてある場所の階層が深かったりするので、<strong>地味に便利</strong>です。<br>\nちなみに、</p>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem unpack [GEMNAME]</td>\n<td>GEMFILEをカレントディレクトリにコピーする</td>\n</tr>\n</tbody>\n</table>\n<p>**<span style=\"color: #ff0000\">Gemの中身を見たい時</span>**にはこちらの方が便利かもしれません。</p>\n<h2>Gem自身の管理</h2>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem update --system</td>\n<td>Gem自身をupdateする</td>\n</tr>\n<tr>\n<td>gem -v</td>\n<td>Gemのバージョンを表示する</td>\n</tr>\n</tbody>\n</table>\n<p>あんまりやったことが無いです（汗）</p>\n<h2>ヘルプ</h2>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>機能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gem help commands</td>\n<td>使用できるコマンドの一覧を表示する</td>\n</tr>\n<tr>\n<td>gem help [command]</td>\n<td>commandのヘルプを表示する</td>\n</tr>\n<tr>\n<td>gem server</td>\n<td>サーバーを立ててgemのマニュアルを表示する</td>\n</tr>\n</tbody>\n</table>\n<p>分からなくなったらとりあえず<code>gem help command</code>です！</p>\n<h2>ビルド関連</h2>\n<p>自作したGemをビルドするときに使います。<br>\nこちらはまだ試していないので、、いずれ更新します！</p>\n<h4>参考になるサイト</h4>\n<p><a href=\"http://ayaketan.hatenablog.com/entry/20111214/1323833813\">RubyGemsの使い方 - ayaketanのプログラミング勉強日記</a><br>\n<a href=\"http://docs.rubygems.org/\">RubyGems Manuals</a><br>\n<a href=\"http://yakinikunotare.boo.jp/orebase/index.php?Ruby%2FRubygems%BB%C8%A4%A4%CA%FD%A4%DE%A4%C8%A4%E1\">Ruby/Rubygems使い方まとめ</a></p>\n",
            "url": "/2013/05/23/gem_command/",
            "title": "そろそろ整理しておきたい、Gemコマンドの使い方",
            "date_modified": "2013-05-23T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/05/18/one_liners/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130518/20130518012220.png\" alt=\"f:id:bakunyo:20130518012220p:plain\" title=\"f:id:bakunyo:20130518012220p:plain\"></span></p>\n<p>コマンドラインで使える1ライナーを投稿して、相互に評価しあうサイト。<br>\nちょっとした空き時間につい見てしまいます。</p>\n<p><a href=\"http://www.commandlinefu.com/commands/browse\"><img src=\"http://capture.heartrails.com/150x130/shadow?http://www.commandlinefu.com/commands/browse\" alt=\"\"></a><a href=\"http://www.commandlinefu.com/commands/browse\">All commands | commandlinefu.com</a><a href=\"http://b.hatena.ne.jp/entry/http://www.commandlinefu.com/commands/browse\"><img src=\"http://b.hatena.ne.jp/entry/image/http://www.commandlinefu.com/commands/browse\" alt=\"\"></a></p>\n<p>特に<a href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>１ライナーとか勉強がてら見てます。例えば、</p>\n<p><code>ruby -rdate -e 'puts DateTime.now'</code></p>\n<p>で現在時刻を表示できる。<br>\n<code>-rlibrary</code>でライブラリをrequireすることができるんですね〜！</p>\n",
            "url": "/2013/05/18/one_liners/",
            "title": "1ライナーのコマンドを投稿するサイトが面白い",
            "date_modified": "2013-05-18T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/05/16/css_position/",
            "html_content": "<p><a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>のPositionで<code>absolute</code>指定とかしてたら何故か他の部分にまで影響してレイアウトが崩れたので何故なのか確認してみた。</p>\n<h2>崩れた場合のサンプル</h2>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074651.png\" alt=\"f:id:bakunyo:20130516074651p:plain\" title=\"f:id:bakunyo:20130516074651p:plain\"></span></p>\n<p>枠だけグレーの四角がinput要素(text)で、それに対し右上に絶対位置指定で色付きグレーのdiv要素(something)を置いてる。<br>\nここまでは良いんだけど、その次に置きたい枠が緑色のdiv要素(next)が次じゃなくてinputに重なるようにして配置されてしまっている。</p>\n<p>サンプルのソースは以下。</p>\n<pre class=\"code\" data-unlink=\"\">\n<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"UTF-8\">\n<title>position test</title>\n<style>\n    .box {\n      position: relative;\n      width: 100px;\n      height: 30px;\n    }\n    .text {\n      position: absolute;\n      width: 100px;\n    }\n    .something {\n      position: absolute;\n      right: -10px;\n      top: -10px;\n      width: 20px;\n      height: 20px;\n      background: #ccc;\n    }\n    .next {\n      position: relative;\n      width: 200px;\n      height: 50px;\n      border: 2px solid #2d5;\n    }\n</style>\n</head>\n<body>\n<div class=\"box\">\n  <input type=\"text\" class=\"text\">\n  <div class=\"something\"></div>\n</div>\n<div class=\"next\"></div>\n</body>\n</html>\n</pre>\n<h2>修正した</h2>\n<p>色々試してみたんだけど、次のようにして解決できた。</p>\n<pre class=\"code\" data-unlink=\"\">\n.box {\n    position: relative;\n    width: 100px;\n    height: 30px;   /* ←高さを指定する */\n}\n</pre>\n<p><a href=\"http://d.hatena.ne.jp/keyword/chrome\">chrome</a>の<a href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D9%A5%ED%A5%C3%A5%D1\">デベロッパ</a>ーツールで確認したところ、div要素(box)の高さが0となっていて、それを基準に配置していたので結果として重なってしまっていたということ。</p>\n<p>結果もきちんと反映されました。</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074446.png\" alt=\"f:id:bakunyo:20130516074446p:plain\" title=\"f:id:bakunyo:20130516074446p:plain\"></span></p>\n",
            "url": "/2013/05/16/css_position/",
            "title": "CSSのPosition指定(absolute)でハマったポイント",
            "date_modified": "2013-05-16T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/04/25/source_of_image_tag/",
            "html_content": "<p><a href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>でビューヘルパーの<code>stylesheet_link_tag</code>や<code>javascript_include_tag</code>とかって、ファイルの拡張子外して</p>\n<pre class=\"code\" data-unlink=\"\">\n<%= stylesheet_link_tag \"application\" %> # application.cssを読む\n<%= javascript_include_tag \"application\" %> # application.jsを読む\n</pre>\n<p>って指定するけど、<code>image_tag</code>に関しては</p>\n<pre class=\"code\" data-unlink=\"\">\n<%= image_tag \"img.png\" %>\n</pre>\n<p>ってきちんと拡張子書いてあげないとだめ(画像の種類によって拡張子が違うから当たり前なんだけど)。</p>\n<p>しかも、ブラウザのソース見ると/assets/img.pngみたいに<strong>imagesディレクトリが無い</strong>から余計混乱する(これは、AssetPipelineが処理してるのが原因っぽい)。</p>\n",
            "url": "/2013/04/25/source_of_image_tag/",
            "title": "image_tagでソース指定でハマった",
            "date_modified": "2013-04-25T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/04/24/action_mailer/",
            "html_content": "<p><a href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>のバージョンは3.2。</p>\n<p>以前は<a href=\"http://d.hatena.ne.jp/keyword/tls\">tls</a>用のライブラリを自前で用意しなきゃいけなかったり大変だったみたいですが、現在はとても簡単になっています。</p>\n<h3>1.設定</h3>\n<p>まずは設定ファイルを編集します。</p>\n<pre class=\"code\" data-unlink=\"\">\nconfig/environments/development.rb\n\nconfig.action_mailer.delivery_method = :smtp\nconfig.action_mailer.raise_delivery_errors = true \nconfig.action_mailer.smtp_settings = {\n  :address => 'smtp.gmail.com',\n  :port => 587,\n  :authentication => :login,\n  :user_name => 'username', # ユーザー名\n  :password => 'password' # パスワード\n}\n</pre>\n<h3>2.Mailerを生成</h3>\n<p><a href=\"http://d.hatena.ne.jp/keyword/rails\">rails</a>コマンドで生成できます。</p>\n<pre class=\"code\" data-unlink=\"\">\nrails generate TestMailer sendmail\n</pre>\n<h3>3.Mailerを編集</h3>\n<p>2で生成したMailerを編集します。</p>\n<pre class=\"code\" data-unlink=\"\">\napp/mailer/test_mailer.rb\n\n# coding: utf-8\nclass TestMailer < ActionMailer::Base\n  default from: \"xxxxxx@gmail.com\"\n\n  # Subject can be set in your I18n file at config/locales/en.yml\n  # with the following lookup:\n  #\n  #   en.test_mailer.sendmail.subject\n  #\n  def sendmail\n    @greeting = \"Hi\"\n\n    mail(:to => \"xxxxxx@gmail.com\",\n   :subject => 'テスト送信')\n  end\nend\n</pre>\n<p>通常のコントローラーと同じように、テンプレート変数などをセット可能。</p>\n<h3>4.メール本文を編集</h3>\n<p>ビュー編集(erb)と同じです。2で自動的にerbファイルも生成されるはず。<br>\nhtmlにしたければ、拡張子を変更。</p>\n<pre class=\"code\" data-unlink=\"\">\napp/views/test_mailer/sendmail.text.erb\n\n中身は自由に。\n</pre>\n<h3>5.Mailerを呼び出すControllerを定義</h3>\n<p>MailerをどこかのControllerで呼び出してあげる必要があります。</p>\n<pre class=\"code\" data-unlink=\"\">\napp/controllers/hoge_controller.rb\n\ndef mail_send\n  @mail = TestMailer.sendmail.deliver\n  render :text => 'メール送信完了'\nend\n</pre>\n<p><a href=\"http://d.hatena.ne.jp/keyword/sendmail\">sendmail</a>メソッドはMail::Messageオブジェクトを返すだけなので、deliverメソッドを呼び出す必要があることに注意です。</p>\n",
            "url": "/2013/04/24/action_mailer/",
            "title": "RailsのActionMailerを使いGmail経由でメール送信する",
            "date_modified": "2013-04-24T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/04/20/css_in_rails/",
            "html_content": "<p>最近<a href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>を触ることになり一通りTutorialを実践しているのだが、<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をどこで指定した良いのか分からなかったので調べてみた。<br>\n<a href=\"http://d.hatena.ne.jp/keyword/Rails\">Rails</a>のバージョンは3.2。</p>\n<h4>レイアウトテンプレート内の記述</h4>\n<p>まず一般的に、レイアウトテンプレート内で<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>用のビューヘルパーを使う。<br>\nデフォルトでは以下のようになっているはず。</p>\n<pre class=\"code\" data-unlink=\"\">\napp/views/layouts/application.html.erb\n・・・・\n　<%= stylesheet_link_tag    \"application\", :media => \"all\" %>\n・・・・\n</pre>\n<p>stylesheet_link_tagの第1引数で、app/assets/stylesheets/からの<a href=\"http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%A5%D1%A5%B9\">相対パス</a>で指定する。<br>\n上記の場合、app/assets/stylesheets/application.<a href=\"http://d.hatena.ne.jp/keyword/css\">css</a>が読み込まれる。</p>\n<h4>デフォルトの<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>の記述</h4>\n<p>次に、指定したapplication.<a href=\"http://d.hatena.ne.jp/keyword/css\">css</a>を開いてみる。</p>\n<pre class=\"code\" data-unlink=\"\">\napp/assets/stylesheets/application.css\n\n　/*\n * This is a manifest file that'll be compiled into application.css, which will include all the files\n * listed below.\n *\n * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,\n * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.\n *\n * You're free to add application-wide styles to this file and they'll appear at the top of the\n * compiled file, but it's generally better to create a new file per style scope.\n *\n *= require_self\n *= require_tree .\n */\n</pre>\n<p>ここでファイルを開いて、コメントしか無いからといってスルーしないよう注意。</p>\n<p>Rails 3.1から<strong>Asset pipeline</strong>という仕組みが導入されているらしい(詳しくは<a href=\"http://qa.atmarkit.co.jp/q/2269\">railsはどこでcssを指定するのか？</a>)。</p>\n<p>コメントの下の方にある</p>\n<pre class=\"code\" data-unlink=\"\">\n *= require_self\n *= require_tree .\n</pre>\n<p>によって、さらに別の<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を読み込むよう指定している。</p>\n<p><code>require_tree</code>でstylesheets配下の<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>をすべて読みこむので、嫌な時はこれをはずしちゃえばいい。<br>\nちなみに、独自に作ったものや他所から持ってきた<a href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>は<code>require mystyle</code>などのように指定する。</p>\n",
            "url": "/2013/04/20/css_in_rails/",
            "title": "RailsはどこでCSSを指定するのか？",
            "date_modified": "2013-04-20T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/04/15/order_of_select_sql/",
            "html_content": "<p>SELECT文を書いてる時に下記のメモを見ながらやったら超捗ったので、残しておく。</p>\n<p>上から順番に（もちろん必要なものだけ）書いていく。</p>\n<ul>\n<li>SELECT</li>\n<li>FROM</li>\n<li>WHERE</li>\n<li>GROUP BY</li>\n<li>HAVING</li>\n<li>ORDER BY</li>\n</ul>\n<p>ちなみに、サブクエリはFROM句とWHERE句の中に書く。</p>\n",
            "url": "/2013/04/15/order_of_select_sql/",
            "title": "SQLでSELECTを書く時の順番",
            "date_modified": "2013-04-15T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/04/03/cakephp_charcode/",
            "html_content": "<h3>[環境]</h3>\n<p><a href=\"http://d.hatena.ne.jp/keyword/CakePHP\">CakePHP</a> 1.3</p>\n<h3>[状況]</h3>\n<p>Email<a href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使用して、テンプレートを使用せずにシンプルなテキストでメールを送信したら文字化けが発生。</p>\n<h3>[対処]</h3>\n<p>まずは<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>のセットを<a href=\"http://d.hatena.ne.jp/keyword/UTF-8\">UTF-8</a>に設定。</p>\n<p><code>$this-&gt;Email-&gt;charset = 'utf-8';</code></p>\n<p>これでも、一部直らない部分がある。</p>\n<p>どうやら、1行の文字数が長い時に自動改行され、そこで文字化けが発生するらしい。</p>\n<p>自動改行されない位に1行の文字数をそもそも長くしておく。</p>\n<p><code>$this-&gt;Email-&gt;lineLength = 1024;</code></p>\n<p>これで解決しました。</p>\n<h3>[参考記事]</h3>\n<p><a href=\"http://d.hatena.ne.jp/s-yo-ko/20101116\">http://d.hatena.ne.jp/s-yo-ko/20101116</a></p>\n",
            "url": "/2013/04/03/cakephp_charcode/",
            "title": "CakePHPでメールを送ったら文字化けした時の対処法。",
            "date_modified": "2013-04-03T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/02/24/sublime_bracket_highlighter/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234202.png\" alt=\"f:id:bakunyo:20130223234202p:plain\" title=\"f:id:bakunyo:20130223234202p:plain\"></span></p>\n<p><a href=\"http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\">前回の記事</a>で導入した<a href=\"http://d.hatena.ne.jp/keyword/Sublime\">Sublime</a> Text 2。</p>\n<p>非常に使い勝手が良いのですが、BracketHighlighterというプラグインで１つ気になることが。。</p>\n<h2>見にくい。</h2>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234212.png\" alt=\"f:id:bakunyo:20130223234212p:plain\" title=\"f:id:bakunyo:20130223234212p:plain\"></span></p>\n<p>BracketHighlighterはタグやクォーテーションマークなどの開始と終了をハイライトしてくれるのですが、特にタグ以外がすごく見にくい。</p>\n<p>上記の画像のように、ハイライトの線が太いためにカーソルの位置が見えなくなってしまうのですよね（ちなみにカーソルの位置は２つ目のダブルクォーテーションの後にあります）</p>\n<h2>カスタマイズしてみる。</h2>\n<p>Preferences &gt; Package Settings &gt; BracketHighlighter &gt; Settings - Default を開く。</p>\n<p>すると中盤に、以下の記述が出てくる。</p>\n<pre><code>// Outline? (solid|outline|underline|none)\n&quot;quote_style&quot; : &quot;solid&quot;,\n&quot;curly_style&quot; : &quot;solid&quot;,\n&quot;round_style&quot; : &quot;solid&quot;,\n&quot;square_style&quot;: &quot;solid&quot;,\n&quot;angle_style&quot; : &quot;solid&quot;,\n&quot;tag_style&quot;   : &quot;outline&quot;,\n</code></pre>\n<p>ここでハイライトのスタイルを決めてるみたいですね。</p>\n<p>各キーワードはそれぞれ、</p>\n<ul>\n<li>quote ... &quot;&quot;</li>\n<li>curly ... {}</li>\n<li>round ... ()</li>\n<li>square ... []</li>\n<li>angle ... &lt;&gt;</li>\n</ul>\n<p>に対応していると思われます（多分...）。</p>\n<p>**&quot;solid&quot;<strong>が例の太いハイライトなので、これを</strong>&quot;underline&quot;**に変更します。</p>\n<p>ちなみに、Defaultの設定を残しておきたい場合は上記の部分をまるまるコピーしてUserの方にセッティングする。</p>\n<pre><code>// Outline? (solid|outline|underline|none)\n&quot;quote_style&quot; : &quot;underline&quot;,\n&quot;curly_style&quot; : &quot;underline&quot;,\n&quot;round_style&quot; : &quot;underline&quot;,\n&quot;square_style&quot;: &quot;underline&quot;,\n&quot;angle_style&quot; : &quot;underline&quot;,\n&quot;tag_style&quot;   : &quot;outline&quot;,\n</code></pre>\n<p>**&quot;underline&quot;**にした場合は以下のようにハイライトされます。</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234216.png\" alt=\"f:id:bakunyo:20130223234216p:plain\" title=\"f:id:bakunyo:20130223234216p:plain\"></span></p>\n<p>少し地味ですが、ちゃんとカーソルの位置が見えるようになりました！</p>\n",
            "url": "/2013/02/24/sublime_bracket_highlighter/",
            "title": "Sublime Text 2のBracketHighlighterをちょこっとカスタマイズする",
            "date_modified": "2013-02-24T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/02/21/archive_gmail/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130206/20130206230926.png\" alt=\"f:id:bakunyo:20130206230926p:plain\" title=\"f:id:bakunyo:20130206230926p:plain\"></span></p>\n<p><a href=\"http://d.hatena.ne.jp/keyword/WEB%A5%E1%A1%BC%A5%EB\">WEBメール</a>として不動の人気を誇る**<a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>**。</p>\n<p>その人気の主な理由が、**&quot;アーカイブという概念&quot;<strong>と</strong>&quot;豊富なショートカットキー&quot;**にあると思います。</p>\n<p>僕は<a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>を使い始めて６年位経ちますが、もはや他のメールサービスに乗り換える気が全く起きません。</p>\n<p>一時期は1日600件ほどのメールを<a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>でさばいていましたが、メールに追われるという感覚は無かったです。</p>\n<p>ということで、今回は僕なりの<a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>活用術を紹介します。</p>\n<h2>アーカイブとは？</h2>\n<p>アーカイブを説明するためには**「受信BOX」<strong>と</strong>「すべてのメール」**について説明が必要でしょう。</p>\n<p>**「受信BOX」**はいわば玄関のポストのようなもの届いたメールがまず受信BOXに入ってきます。</p>\n<p>ポストに届いたメールに対して返信するか捨てるのか、何らかの処理を行います。</p>\n<p>何らかの&quot;すべき処理&quot;が済んだら、<strong>アーカイブ</strong>を行います。</p>\n<p><strong>アーカイブ</strong>とは**「受信BOX」<strong>から取り除くこと。ただし、<strong>アーカイブ</strong>は</strong>削除**ではないという所がミソです。</p>\n<p>受信BOXからアーカイブされたメールは、**「すべてのメール」**にきちんと保管されている為、後から検索などができます。</p>\n<p>つまり、何らかの処理を行わなければならないメール<strong>だけ</strong>を受信BOXに残しておき、それ以外はアーカイブしておけば良いわけです。</p>\n<h2>容量は大丈夫なの？</h2>\n<p>削除せずにすべて残しておくわけですから、容量が心配になります。</p>\n<p>しかし、そこは<a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>さんの素晴らしいところで、なんと**10GB(!!)**もの容量を用意してくれています。</p>\n<p>何か以前よりも増えたような…</p>\n<p>添付ファイル付きメールを毎日、大量に受け取っていない限り、この容量で足りなくなることはまずありません。</p>\n<p>という訳で、この<strong>アーカイブ</strong>システム。使っていくほどに良さが分かってきます！</p>\n<h2>ショートカットキーを使ってみる</h2>\n<p><a href=\"http://d.hatena.ne.jp/keyword/Gmail\">Gmail</a>でよく使うショートカットキーを列挙します。<br>\n（ショートカットキーを有効にするために、設定の変更が必要です！）<br>\n右２列は、メールを一覧している画面と個別のメールを開いてる時で有効かどうかです。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">キー</th>\n<th>内容</th>\n<th style=\"text-align:center\">メール一覧</th>\n<th>個別メール</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ｊ</td>\n<td>次のメールへ</td>\n<td style=\"text-align:center\">◯</td>\n<td>◯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ｋ</td>\n<td>前のメールへ</td>\n<td style=\"text-align:center\">◯</td>\n<td>◯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ｏ</td>\n<td>メールを開く</td>\n<td style=\"text-align:center\">◯</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ｘ</td>\n<td>メールを選択する</td>\n<td style=\"text-align:center\">◯</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift +ｉ</td>\n<td>選択したメールを既読にする</td>\n<td style=\"text-align:center\">◯</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ｅ</td>\n<td>アーカイブする</td>\n<td style=\"text-align:center\">◯</td>\n<td>◯</td>\n</tr>\n</tbody>\n</table>\n",
            "url": "/2013/02/21/archive_gmail/",
            "title": "Gmailのアーカイブ機能と個人的によく使うショートカット",
            "date_modified": "2013-02-21T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/01/31/linefeeds/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130131/20130131070720.jpg\" alt=\"f:id:bakunyo:20130131070720j:plain\" title=\"f:id:bakunyo:20130131070720j:plain\"></span></p>\n<p>photo credit: <a href=\"http://www.flickr.com/photos/olivander/999389454/\">Olivander</a> via <a href=\"http://photopin.com\">photopin</a> <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a></p>\n<h2>改行コードって？</h2>\n<p><a href=\"http://ja.wikipedia.org/wiki/%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89\">改行コード - Wikipedia</a></p>\n<pre class=\"code\" data-unlink=\"\">\n 改行コード とは、ワードプロセッサ（ワープロ専用機）やコンピュータなどにおいて、改行を表す制御文字である。日本では「改行コード」と総称する事が一般的なため、本項目では、キャリッジリターン(CR)とラインフィード(LF)の両方について記載する。\n</pre>\n<p>ちなみに<strong>改行</strong>とは、<strong>ひとつ下の行の行頭にカーソルを移すこと。</strong><br>\nシステムによって改行を表すコードが異なることがある為、いくつかの問題が発生してしまうことがあるんですね〜。。</p>\n<h2>CRとLFって？</h2>\n<p>改行コードは主に、CR(Carrige Return：行頭復帰)とLF(Line Feed：改行)の2種類あるようです。<br>\nどちらも、語源はタイプライターに由来します（<a href=\"http://d.hatena.ne.jp/keyword/Wikipedia\">Wikipedia</a>参照）。</p>\n<h2>OS間の違い</h2>\n<p>OS間で使われる改行コードが異なるようです（！）。<br>\nWindows　→　CR+LF<br>\n<a href=\"http://d.hatena.ne.jp/keyword/Mac%20OS\">Mac OS</a>   →　CR<br>\n<a href=\"http://d.hatena.ne.jp/keyword/UNIX\">UNIX</a>　　 →　LF</p>\n<p>テキストデータを扱う時は、<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>だけでなく改行コードにも気をつけましょう！</p>\n",
            "url": "/2013/01/31/linefeeds/",
            "title": "改行コードを知る",
            "date_modified": "2013-01-31T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/01/18/coffee_meeting/",
            "html_content": "<h2>コーヒーミーティングの会社見学イベントに参加してきました。</h2>\n<p>1月16日（水）<strong>@<a href=\"http://d.hatena.ne.jp/keyword/KDDI\">KDDI</a>ウェブコミュニケーションズで行われた会社見学イベント</strong>に参加してきました！</p>\n<p><a href=\"http://coffeemeeting.jp/events/20130116\">2013年1月16日 会社でコーヒーミーティング@KDDIウェブコミュニケーションズ | CoffeeMeeting[コーヒーミーティング]</a><a href=\"http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/events/20130116\"><img src=\"http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/events/20130116\" alt=\"\"></a></p>\n<p>普段は1対1で対話するコーヒーミーティングですが、今回は複数人（40人程度）が参加し、非常に新鮮な感じがしました。</p>\n<h2>コーヒーミーティングって？</h2>\n<p>そもそもの話ですが、CoffeeMeetingを知らない方向けにご紹介です！</p>\n<pre class=\"code\" data-unlink=\"\">\n＜コンセプト＞\nCoffeeMeeting（コーヒーミーティング）は、コーヒー1杯を飲む時間を一緒に過ごしたい人と出会うためのサービスです。使い方はカンタン。あなたがお茶したい空き時間を登録し、ほかのユーザーからの申し込みを待つだけ。ちょっとした空き時間に気軽にお茶してみましょう！\n</pre>\n<p><a href=\"http://coffeemeeting.jp/\">CoffeeMeeting[コーヒーミーティング]</a><a href=\"http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/\"><img src=\"http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/\" alt=\"\"></a></p>\n<h2>イベントの大まかな流れ</h2>\n<p>当日は19:30に始まり、最後は少し時間押して21時過ぎに終了しました。大まかな流れと時間配分は、こんな感じです。</p>\n<p>(1) 社員さんとコーヒーミーティング（30分位）<br>\n(2) エイプリルフール企画を考えよう！（１時間位）<br>\n(3) 豪華景品が当たる！ クイズ大会（15分位）</p>\n<h2>感想など</h2>\n<p>当然、イベントの進行に沿って事が運んでいくので、普段のコーヒーミーティングのようなゆったりした会話はあまり出来ませんでした…。<br>\nですが、多くの方と触れ合い、さらにそこから繋がりを持っていけるという意味で、とても有意義な時間を過ごすことができました！<br>\nコーヒーミーティング代表の<a href=\"http://coffeemeeting.jp/daisaku\">daisaku</a>さんにも初めてご挨拶することができ、非常に気持ちが昂ぶりました。<br>\ndaisakuさん他、イベントを企画運営してくださった<a href=\"http://d.hatena.ne.jp/keyword/KDDI\">KDDI</a>ウェブコミュニケーションズの皆様、ありがとうございました！ ！</p>\n<p>最後に、クイズ大会で空気を読まずに勝ちとってきたノベルティ・ステッカーの写真がこちらになります。</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130118/20130118075047.jpg\" alt=\"f:id:bakunyo:20130118075047j:plain\" title=\"f:id:bakunyo:20130118075047j:plain\"></span></p>\n<p>皆さんも、レッツ・コーヒーミーティング！</p>\n",
            "url": "/2013/01/18/coffee_meeting/",
            "title": "会社でコーヒーミーティング@KDDIウェブコミュニケーションズに参加してきました",
            "date_modified": "2013-01-18T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/01/16/char_code/",
            "html_content": "<p><a href=\"http://bakunyo.hatenablog.com/entry/2012/12/27/IT%E3%83%91%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E8%A9%A6%E9%A8%93_%E5%8D%98%E8%AA%9Epart1\">以前の投稿</a>からしばらく<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>について気になっていたので、少し整理してみました。</p>\n<h2><a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>って？</h2>\n<pre class=\"code\" data-unlink=\"\">\n文字コード（もじコード）はコンピュータ上で文字を利用するために各文字に割り当てられるバイト表現。もしくは、バイト表現と文字の対応関係（文字コード体系）のことを指して「文字コード」と呼ぶことも多い。\n</pre>\n<p><a href=\"http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89\">文字コード - Wikipedia</a><a href=\"http://b.hatena.ne.jp/entry/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89\"><img src=\"http://b.hatena.ne.jp/entry/image/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89\" alt=\"\"></a></p>\n<p>## なぜ、ややこしいのか</p>\n<p><a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>に関して、<strong>（符号化）<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7\">文字集合</a><strong>と</strong>（文字）符号化方式</strong>という区別がなされることがあるそうです。<br>\n**（符号化）<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7\">文字集合</a>**とは読んで字の如く、割り当ての対象にしている文字の集合のこと。<br>\n<strong>「全てのひらがな」<strong>や</strong>「全てのひらがなとカタカナと漢字」<strong>みたいなものですね。<br>\n一方で、</strong>（文字）符号化方式</strong>とは<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7\">文字集合</a>をコンピュタが利用できるバイト列にどう変換するのか、という決め事。<br>\n「あ」は001、「い」は010、「う」は011みたいに決まっていくんですかね。</p>\n<p>上に挙げた投稿で「<a href=\"http://d.hatena.ne.jp/keyword/UTF-8\">UTF-8</a>は<a href=\"http://d.hatena.ne.jp/keyword/Unicode\">Unicode</a>の一種なのかな？」と書きましたが、まさにこの２つの区別が出来ていなかった事が混乱の原因でした。一種なのではなく、それぞれ、**「<a href=\"http://d.hatena.ne.jp/keyword/Unicode\">Unicode</a> = （符号化）<a href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7\">文字集合</a>」「<a href=\"http://d.hatena.ne.jp/keyword/UTF-8\">UTF-8</a> = （文字）符号化方式」**という対応関係になっていたのですね。</p>\n<h2>参考記事</h2>\n<p>こちらのブログを参考にさせていただきました。<br>\n<a href=\"http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome\">UnicodeとUTF-8の違いは？ - 自分的まとめ - Humanity</a><a href=\"http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome\"><img src=\"http://b.hatena.ne.jp/entry/image/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome\" alt=\"\"></a></p>\n",
            "url": "/2013/01/16/char_code/",
            "title": "文字コードについての２つの概念",
            "date_modified": "2013-01-16T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/01/09/learning_java/",
            "html_content": "<h2>本日から研修スタート</h2>\n<p>本日(1/8)から、新たな会社で<a href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>エンジニアの研修がスタートした。<br>\n年始ということもあって同期もそこそこいるんだけど、緊張の面持ちが伝わってくる。</p>\n<h2>訪れるしあわせな時間</h2>\n<p>これまでは勤務時間が終わって自宅に帰ってからの独学を続けていた。なので、日中の時間をおおいに使って技術の勉強に専念できるって、本当に幸せです。</p>\n<h2>自宅の環境も構築</h2>\n<p>自宅でも時々勉強する必要あるかな〜と思い、先ほどノートPC（OS：<a href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a>）に<a href=\"http://d.hatena.ne.jp/keyword/Eclipse\">Eclipse</a>をインストール。このPCは元々新品で買ってWin7が入っていたんだけど、購入直後にわざわざ追い出して<a href=\"http://d.hatena.ne.jp/keyword/Ubuntu\">Ubuntu</a>をインストールしました（何やってんだ俺）。</p>\n<h2>今後も続きます。</h2>\n<p>会社での研修は<a href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>だけど、それに限らず色々なことに取り組んでいきたいなぁと思います！</p>\n",
            "url": "/2013/01/09/learning_java/",
            "title": "Javaエンジニア研修スタート",
            "date_modified": "2013-01-09T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        },
        {
            "id": "/2013/01/06/rest_of_pocket/",
            "html_content": "<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095333.png\" alt=\"f:id:bakunyo:20130106095333p:plain\" title=\"f:id:bakunyo:20130106095333p:plain\"></span></p>\n<h2><a href=\"http://d.hatena.ne.jp/keyword/RSS\">RSS</a>処理ツールとしてPocketは超便利。</h2>\n<p>GoogleRSSで気になった記事を一旦<a href=\"getpocket.com/\">Pocket</a>に入れておいて、後で読めるようにしておいてる。やり方はこちらの記事が参考になります。</p>\n<p><a href=\"http://kazoo1837.blog23.fc2.com/blog-entry-355.html\">スキマ時間を活用したRSS処理法。記事はPocketにまとめてからシェア。 / 旧:あなたのスイッチを押すブログ</a><a href=\"http://b.hatena.ne.jp/entry/http://kazoo1837.blog23.fc2.com/blog-entry-355.html\"><img src=\"http://b.hatena.ne.jp/entry/image/http://kazoo1837.blog23.fc2.com/blog-entry-355.html\" alt=\"\"></a></p>\n<p>でも、どんどんPocketに投入しているといつの間にか記事が溜まりに溜まって消化不良になってしまう。。<br>\nPocketでまだArchiveしてない記事があと何件あるのか、気になりますよねぇ！ ？</p>\n<h2>PC版ではHomeの残件数が見れない。</h2>\n<p>ええ。残念ながら、見れないんです。<br>\n<a href=\"getpocket.com/\">Pocket</a></p>\n<h2><a href=\"http://d.hatena.ne.jp/keyword/iPhone\">iPhone</a>版では見れる。</h2>\n<p>できるかなーと思って試してみたら、できたんです。<br>\nOptionで設定する箇所があったので紹介しておきます。<br>\nまずはOptionをタッチして…</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095952.png\" alt=\"f:id:bakunyo:20130106095952p:plain\" title=\"f:id:bakunyo:20130106095952p:plain\"></span></p>\n<p>LISTの下の「Show App Badge Count」をONにする</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100002.png\" alt=\"f:id:bakunyo:20130106100002p:plain\" title=\"f:id:bakunyo:20130106100002p:plain\"></span></p>\n<p>結果、Badgeに残り件数が表示されるようになりました！</p>\n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100020.png\" alt=\"f:id:bakunyo:20130106100020p:plain\" title=\"f:id:bakunyo:20130106100020p:plain\"></span></p>\n<p>残り件数が分かるようになって、処理するまでの時間が読めるようになりました。</p>\n",
            "url": "/2013/01/06/rest_of_pocket/",
            "title": "後で読むサービス「Pocket」の残り件数を確認する方法",
            "date_modified": "2013-01-06T00:00:00Z",
            "author": {
                "name": "Izuta Hiroyuki",
                "url": "https://github.com/bakunyo"
            }
        }
    ]
}