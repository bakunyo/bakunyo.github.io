<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>BAKUNOTE</title>
        <link>https://blog.bakunyo.com/</link>
        <description>bakunyoの技術ノート。ruby, javascriptに関することやその他日々の記録です。</description>
        <lastBuildDate>Sun, 14 Jan 2018 12:54:58 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>BAKUNOTE</title>
            <url>https://blog.bakunyo.com/bakunyo.png</url>
            <link>https://blog.bakunyo.com/</link>
        </image>
        <copyright>All rights reserved 2013, bakunyo</copyright>
        <atom:link href="https://blog.bakunyo.com/atom" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Amazpn VPCで踏み台経由でログインできるネットワーク環境をつくってみる]]></title>
            <link>/2017/12/17/amazon-vpc/</link>
            <guid>/2017/12/17/amazon-vpc/</guid>
            <pubDate>Sun, 17 Dec 2017 04:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>背景</h1>
<p>個人開発で使える本番サーバー環境が欲しかったのと、ちょうど仕事でも活かせそうだったので、自分でAWSのネットワーク環境を作ってみました。</p>
<h1>全体像</h1>
<p>用意したいサーバーは2つです。</p>
<ul>
<li>踏み台
<ul>
<li>sshでログインし、さらにsshで本番サーバーへログインするためのもの</li>
<li>sshログイン用のport以外は開けない</li>
</ul>
</li>
<li>本番サーバー
<ul>
<li>踏み台サーバーからのみsshでログイン可能</li>
<li>(Webサーバーを予定してるけど、今回はhttpのportを開けたりとかしない)</li>
</ul>
</li>
</ul>
<h1>VPCの作成</h1>
<p>AWSで管理する仮想ネットワークを定義します。</p>
<h4>AWSマネジメントコンソールからサービス＞VPCを選択</h4>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/1-dashboard.png" alt="vpc-dashboard"></p>
<p>既にデフォルトのVPCが定義されていますが、今回は使わずに削除します。</p>
<h4>「VPCの作成」を選択</h4>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/2-create-vpc.png" alt="vpc-create"></p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Name</td>
<td style="text-align:left">vpc-sample</td>
</tr>
<tr>
<td style="text-align:left">IPv4 CIDR ブロック</td>
<td style="text-align:left">192.168.0.0/16</td>
</tr>
</tbody>
</table>
<p>CIDR ブロックは、仮想ネットワーク内のIPアドレスの範囲を指定します。<br>
今回は <code>192.168.0.0</code> ~ <code>192.168.255.255</code> で 65,536 個のIPアドレスを持つことになります。<br>
<a href="http://docs.aws.amazon.com/ja_jp/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC とサブネット</a></p>
<p>CIDRブロックは 16~28の間で指定する必要があるようです。</p>
<h1>サブネットの作成</h1>
<p>上で作成したVPCの中でネットワークを小分けにします。</p>
<h4>VPCダッシュボードの中から「サブネット」を選択</h4>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/3-subnet-dashboard.png" alt="subnet-dashboard"><br>
「サブネットの作成」を選択し、以下2つのサブネットを作成しました。</p>
<h4>1つ目</h4>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">名前タグ</td>
<td style="text-align:left">subnet-sample-public</td>
</tr>
<tr>
<td style="text-align:left">VPC</td>
<td style="text-align:left">{作成したvpc-sampleがデフォルトで選択されている}</td>
</tr>
<tr>
<td style="text-align:left">アベイラビリティゾーン</td>
<td style="text-align:left">ap-northeast-1a</td>
</tr>
<tr>
<td style="text-align:left">IPv4 CIDR ブロック</td>
<td style="text-align:left">192.168.1.0/24</td>
</tr>
</tbody>
</table>
<h4>2つ目</h4>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">名前タグ</td>
<td style="text-align:left">subnet-sample-private</td>
</tr>
<tr>
<td style="text-align:left">VPC</td>
<td style="text-align:left">{作成したvpc-sampleがデフォルトで選択されている}</td>
</tr>
<tr>
<td style="text-align:left">アベイラビリティゾーン</td>
<td style="text-align:left">ap-northeast-1a</td>
</tr>
<tr>
<td style="text-align:left">IPv4 CIDR ブロック</td>
<td style="text-align:left">192.168.2.0/24</td>
</tr>
</tbody>
</table>
<p>1つ目が踏み台用、2つ目が本番用という想定です。<br>
それぞれ256個ずつIPアドレスを持つことになります。</p>
<p>アベイラビリティゾーンは東京では <code>ap-northeact-1a</code> <code>ap-northeast-1c</code> の2択ですが、どちらが具体的にどこの場所、というのはなく、仮想ネットワーク毎にAWS側で振り分けられるそうです。<br>
なので、 「 <code>1a</code> は沢山の人が選んで混んでそうだからa <code>1c</code> にしよう」みたいなことは意味がないらしいです。<br>
情報元はどこかのネット記事で読んだのですがどこかへ行ってしまいました。。</p>
<h1>インターネットゲートウェイの作成</h1>
<p>仮想ネットワークをインターネットと繋げる為に、インターネットゲートウェイを作成します。<br>
VPCダッシュボードからインターネットゲートウェイ＞インターネットゲートウェイの作成を選択<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/10-create-igw.png" alt="create-igw"><br>
名前は <code>igw-sample</code> としておきます。</p>
<h1>ルートテーブルの作成</h1>
<p>上で作成したインターネットゲートウェイを紐付けるためのルートテーブルを作成します。<br>
ルートテーブル＞ルートテーブルの作成を選択し、 <code>rtb-sample</code> を指定します。<br>
作成後、 <code>0.0.0.0/0</code> (デフォルトゲートウェイとして) インターネットゲートウェイを紐付けます。<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/11-create-rtb.png" alt="create-rtb"><br>
さらに、「サブネットの関連付け」で踏み台用のサブネットである <code>subnet-sample-public</code> を紐付けます。</p>
<h1>EC2（踏み台）の作成</h1>
<p>いよいよサーバーです。<br>
サービス＞EC2＞インスタンスから「インスタンスの作成」を選択<br>
<a href="https://aws.amazon.com/jp/blogs/news/amazon-linux-2-release/">ちょうど数日前にリリースされたAmazon Linux 2</a> が無料枠で選べる状態だったので、これを選択します。</p>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/5-create-ec2.png" alt="create-ec2-1"></p>
<p><code>t2.micro</code> を選択します。</p>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/6-create-ec2.png" alt="create-ec2-2"></p>
<p>インスタンスの詳細設定です。<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/7-create-ec2.png" alt="create-ec2-3"></p>
<p>ちょっと項目数が多いのでかいつまんで。</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ネットワーク</td>
<td style="text-align:left">vpc-sample</td>
</tr>
<tr>
<td style="text-align:left">サブネット</td>
<td style="text-align:left">subnet-sample-public</td>
</tr>
<tr>
<td style="text-align:left">自動割り当てパブリックIP</td>
<td style="text-align:left">有効化</td>
</tr>
<tr>
<td style="text-align:left">プライマリIP</td>
<td style="text-align:left">192.168.1.10</td>
</tr>
</tbody>
</table>
<p>ここは若干ハマってしまった所なのですが、プライマリIPを <code>192.168.1.1</code> に指定したら、最後のEC2作成のフェーズでエラーになってしまいました。<br>
プライマリIPは先頭と末尾（<code>192.168.1.0</code> <code>192.168.1.255</code>）だけ避ければ良いと思っていたのですが、他にも <code>192.168.1.1</code> <code>192.168.1.2</code> <code>192.168.1.3</code> は予約済アドレスとなるようです。<br>
プライマリIPはわざわざ指定しなくても良かったかもしれないです。</p>
<p>参考： <a href="http://blog.serverworks.co.jp/tech/2013/05/23/vpc_beginner-2/">VPC初心者がハマりやすいポイントをまとめてみた</a></p>
<p>次はストレージの追加です。<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-ec2.png" alt="create-ec2-4"><br>
デフォルトのまま進めます。<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-tag.png" alt="create-ec2-5"><br>
<code>Name</code> タグに <code>bastion</code> を指定します。</p>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-ec2.png" alt="create-ec2-6"><br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-sg.png" alt="create-ec2-7"></p>
<p>「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を <code>bastion-sg</code> とします。<br>
セキュリティグループの指定で、sshで <code>22</code> をどこからでも受けられるようにします。</p>
<p>「確認と作成」をクリックして、キーペアを作成してダウンロードしたら完了です。</p>
<h1>EC2(本番用)の作成</h1>
<p>ほぼ踏み台と同じなので、違うところだけピックアップします。</p>
<h3>詳細設定</h3>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">サブネット</td>
<td style="text-align:left">subnet-sample-private</td>
</tr>
<tr>
<td style="text-align:left">自動割り当てパブリックIP</td>
<td style="text-align:left">サブネット設定を使用（無効）</td>
</tr>
<tr>
<td style="text-align:left">プライマリIP</td>
<td style="text-align:left">192.168.2.10</td>
</tr>
</tbody>
</table>
<h3>タグ</h3>
<p><code>Name</code> タグに <code>webserver</code> を指定します。</p>
<h3>セキュリティグループ</h3>
<p>「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を <code>web-sg</code> とします。<br>
セキュリティグループの指定で、sshで <code>22</code> を <code>192.168.1.0/24</code> からのみ受けられるようにします。（ここポイントです）</p>
<h3>キーペア</h3>
<p>踏み台で作成したものと同じものを使うようにします。</p>
<h1>sshログインしてみる</h1>
<p>踏み台→本番への接続も同じキーペアで通せるように、以下のコマンドを打ちます。</p>
<pre><code class="hljs bash">ssh-add {pemファイルのパス}
ssh-add -l <span class="hljs-comment"># 登録できたか確認</span>
</code></pre>
<p>まずは踏み台のログインです。</p>
<pre><code class="hljs bash">ssh -i {pemファイルのパス} ec2-user@{踏み台に割当てられたパブリックIP}
</code></pre>
<p>ログインできたら、本番に指定したプライベートIPを使ってさらにsshログインします。</p>
<pre><code class="hljs bash">$ ssh 192.168.2.10 <span class="hljs-comment"># 本番用に指定したプライベートIP</span>
Last login: Sun Dec 17 06:01:04 2017 from 192.168.1.10

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
</code></pre>
<p>これでログイン完了です！</p>
<h3>ssh/configの設定</h3>
<p>踏み台を通して1発で本番へログインできるようにするための設定です。<br>
<code>~/.ssh/config</code> に記述します。</p>
<pre><code class="hljs bash">Host {踏み台用の好きな名前}
  HostName {踏み台パブリックIP}
  User ec2-user
  IdentityFile {pemファイルのパス}

Host {本番用の好きな名前}
  HostName {本番用プライベートIP}
  User ec2-user
  IdentityFile {pemファイルのパス}
  ProxyCommand ssh {踏み台用の好きな名前} -W %h:%p
</code></pre>
<p>上記を指定しておけば、 <code>ssh {本番用の好きな名前}</code> でログインできます。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Rails開発環境をdocker-composeで作ってみる]]></title>
            <link>/2017/07/06/docker-compose-rails/</link>
            <guid>/2017/07/06/docker-compose-rails/</guid>
            <pubDate>Wed, 05 Jul 2017 15:09:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>久々に <code>rails new</code> したい欲求が高まったので、今風っぽく <code>docker-compose</code> を使って開発環境をつくります。<br>
docker公式がドキュメントを用意してくれているので、まずはそれで感覚を掴んでみます。</p>
<p><a href="https://docs.docker.com/compose/rails/">Quickstart: Compose and Rails</a></p>
<p>OSはMac(Sierra)です。手元にあったdockerも少し古くなっていたので、アップグレードしつつ進めます。</p>
<h1>1. Docker環境の準備</h1>
<p><a href="https://docs.docker.com/docker-for-mac/install/">Install Docker for Mac</a> からStable版のDockerをダウンロード・インストールします。<br>
元々<strong>Docker Toolbox</strong>をインストールしていましたが、<strong>Docker for Mac</strong>のインストーラーがよしなに差し替えたり調整してくれました。</p>
<p>詳しくは以下です。<br>
<a href="https://docs.docker.com/docker-for-mac/docker-toolbox/">Docker for Mac vs. Docker Toolbox</a></p>
<p>インストール後のバージョン確認</p>
<pre><code class="hljs bash">$ docker version
Client:
 Version:      17.06.0-ce
 API version:  1.30
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:31:53 2017
 OS/Arch:      darwin/amd64

Server:
 Version:      17.06.0-ce
 API version:  1.30 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:51:55 2017
 OS/Arch:      linux/amd64
 Experimental: <span class="hljs-literal">true</span>

[bakunyo@wasta 01:04:10] ~
$ docker --version
Docker version 17.06.0-ce, build 02c1d87
[bakunyo@wasta 01:04:14] ~
$ docker-compose --version
docker-compose version 1.14.0, build c7bdf9e
[bakunyo@wasta 01:04:18] ~
$ docker-machine --version
docker-machine version 0.12.0, build 45c69ad
</code></pre>
<h1>2. プロジェクトの定義</h1>
<p>以下の4ファイルを作成します。</p>
<p><strong>Dockerfile</strong></p>
<pre><code class="hljs docker"><span class="hljs-keyword">FROM</span> ruby:<span class="hljs-number">2.3</span>.<span class="hljs-number">3</span>
<span class="hljs-keyword">RUN</span><span class="bash"> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs
</span><span class="hljs-keyword">RUN</span><span class="bash"> mkdir /myapp
</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /myapp
</span><span class="hljs-keyword">ADD</span><span class="bash"> Gemfile /myapp/Gemfile
</span><span class="hljs-keyword">ADD</span><span class="bash"> Gemfile.lock /myapp/Gemfile.lock
</span><span class="hljs-keyword">RUN</span><span class="bash"> bundle install
</span><span class="hljs-keyword">ADD</span><span class="bash"> . /myapp
</span></code></pre>
<br />
<p><strong>Gemfile</strong></p>
<pre><code class="hljs ruby">source <span class="hljs-string">'https://rubygems.org'</span>
gem <span class="hljs-string">'rails'</span>, <span class="hljs-string">'5.0.0.1'</span>
</code></pre>
<br />
<p><strong>Gemfile.lock</strong><br>
空でOK</p>
<br />
<p><strong>docker-compose.yml</strong></p>
<pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span>
<span class="hljs-attr">services:</span>
<span class="hljs-attr">  db:</span>
<span class="hljs-attr">    image:</span> <span class="hljs-string">postgres</span>
<span class="hljs-attr">  web:</span>
<span class="hljs-attr">    build:</span> <span class="hljs-string">.</span>
<span class="hljs-attr">    command:</span> <span class="hljs-string">bundle</span> <span class="hljs-string">exec</span> <span class="hljs-string">rails</span> <span class="hljs-string">s</span> <span class="hljs-bullet">-p</span> <span class="hljs-number">3000</span> <span class="hljs-bullet">-b</span> <span class="hljs-string">'0.0.0.0'</span>
<span class="hljs-attr">    volumes:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">.:/myapp</span>
<span class="hljs-attr">    ports:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">"3000:3000"</span>
<span class="hljs-attr">    depends_on:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">db</span>
</code></pre>
<h1>3. プロジェクトのビルド</h1>
<p>ここからいよいよ <code>docker-compose</code> コマンドを使うので、軽く中身を確認しておきます。</p>
<p><a href="https://docs.docker.com/compose/reference/run/">docker-compose run</a><br>
<a href="https://docs.docker.com/compose/reference/up/">docker-compose up</a><br>
<a href="https://docs.docker.com/compose/reference/build/">docker-compose build</a></p>
<p><code>docker-compose.yml</code> には複数のサービスが定義されていて、 <code>run</code> は特定のサービス、 <code>up</code> は全サービス(特定も可)に対する命令です。どちらも、コンテナが create &amp; start されます。<br>
また、 <code>run</code> は指定したサービス上で実行するコマンドを渡すことができ、 <code>docker-compose.yml</code> に書いてある <code>command</code> を上書きするみたいですね。</p>
<p>簡単ですが以上を踏まえて、以下のコマンドを実行した後の流れを見ていきます。</p>
<pre><code class="hljs bash">$ docker-compose run web rails new . --force --database=postgresql
</code></pre>
<h3>流れの確認</h3>
<ul>
<li>デフォルトネットワークを生成</li>
<li><code>run web</code> なのでサービス[web]の起動が始まる</li>
<li><code>depend_on: db</code> となっている為、サービス[db]を先に起動する
<ul>
<li>postgresのimageをpull &amp; dbサービス用のネットワークを生成</li>
</ul>
</li>
<li><code>build: .</code> なので <code>Dockerfile</code> を元にコンテナを生成する
<ul>
<li>ruby:2.3.3 からimageをpull</li>
<li><code>RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs</code>
<ul>
<li>必要なライブラリのインストール</li>
</ul>
</li>
<li><code>RUN mkdir /myapp</code></li>
<li><code>WORKDIR /myapp</code></li>
<li><code>ADD Gemfile /myapp/Gemfile</code></li>
<li><code>ADD Gemfile.lock /myapp/Gemfile.lock</code></li>
<li><code>RUN bundle install</code>
<ul>
<li>WORKDIRを指定しているので、 <code>/myapp/Gemfile</code> を元にインストールが始まる</li>
</ul>
</li>
<li><code>ADD . /myapp</code></li>
</ul>
</li>
<li><code>docker-compose run</code> の引数に渡しているコマンドが実行される(override)
<ul>
<li><code>rails new . --force --database=postgresql</code></li>
<li>コマンドが上書きされているので、 <code>rails s</code> は実行されない</li>
<li><code>--force</code> オプションで、 <code>Gemfile</code> が上書きされる</li>
</ul>
</li>
</ul>
<h1>4. 再ビルド</h1>
<pre><code class="hljs bash">$ docker-compose build
</code></pre>
<p>Gemfileが書き換わったので、imageを再ビルドします。<br>
<code>rails new</code> のとき <code>--skip-bundle</code> しても良さそうですね。</p>
<h1>5. DB設定</h1>
<p><code>config/database.yml</code> を以下に書き換え</p>
<pre><code class="hljs yml"><span class="hljs-attr">default:</span> <span class="hljs-meta">&amp;default</span>
<span class="hljs-attr">  adapter:</span> <span class="hljs-string">postgresql</span>
<span class="hljs-attr">  encoding:</span> <span class="hljs-string">unicode</span>
<span class="hljs-attr">  host:</span> <span class="hljs-string">db</span>
<span class="hljs-attr">  username:</span> <span class="hljs-string">postgres</span>
<span class="hljs-attr">  password:</span>
<span class="hljs-attr">  pool:</span> <span class="hljs-number">5</span>

<span class="hljs-attr">development:</span>
  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*default</span>
<span class="hljs-attr">  database:</span> <span class="hljs-string">myapp_development</span>


<span class="hljs-attr">test:</span>
  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*default</span>
<span class="hljs-attr">  database:</span> <span class="hljs-string">myapp_test</span>
</code></pre>
<p><code>host: db</code> で接続できるということですね。便利！</p>
<h1>6. サーバー起動</h1>
<p>サービスを起動します。</p>
<pre><code class="hljs bash">$ docker-compose up
</code></pre>
<p>別のターミナルを開き、以下を実行します。</p>
<pre><code class="hljs bash">$ docker-compose run web rake db:create
</code></pre>
<br />
http://localhost:3000 にアクセスします。
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/07/06-docker-compose-rails/images/rails_welcome.png" alt="rails welcome"></p>
<p>ちゃんと起動していました！<br>
Docker環境さえあれば、たった数ファイルでここまで構築できるってすごいですね。<br>
大体の流れは掴めたので、これをベースに自分用にカスタマイズしていこうと思います。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Elixir入門]]></title>
            <link>/2017/05/27/elixir-introduction/</link>
            <guid>/2017/05/27/elixir-introduction/</guid>
            <pubDate>Sat, 27 May 2017 08:01:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2017/06/02 に行われた <a href="https://beam-lang.connpass.com/event/51637/">Elixir入門者LT大会</a> へ参加する際、事前に準備しておいたことのメモ。</p>
<h2>Elixirとは？</h2>
<h4>公式サイト</h4>
<p><a href="https://elixir-lang.org/">https://elixir-lang.org/</a></p>
<ul>
<li>スケーラブルで持続可能なアプリを作るためにデザインされた動的関数型言語</li>
<li>Erlang VM上で動いている。
<ul>
<li>Erlang VMは、レイテンシが低く、配布可能で耐障害性もあり、Webでも組み込みシステムでも利用されている</li>
</ul>
</li>
<li>特徴
<ul>
<li>関数型</li>
<li>拡張可能なDSL</li>
</ul>
</li>
<li>その他の特徴
<ul>
<li>Ecosystem(mix)</li>
<li>Interactive Development</li>
<li>Erlang互換</li>
</ul>
</li>
</ul>
<h2>インストール</h2>
<p>Macの場合</p>
<pre><code class="hljs bash">brew update
brew install elixir
</code></pre>
<p><a href="https://elixir-lang.org/install.html">その他の場合</a></p>
<h2>基本</h2>
<p>Elixir Schoolより</p>
<ul>
<li><code>iex</code> でREPLを起動</li>
<li>真偽判定: <code>false</code> と <code>nil</code> 以外は真</li>
<li>アトム <code>:foo</code> はRubyのシンボルと同じ</li>
<li><code>true === :true</code> は真</li>
<li>モジュール名もアトム。宣言されていなくても。 <code>is_atom(MyApp)</code> は真</li>
<li>アトムは、Erlangのビルトインも含めたモジュール参照にも使われる。 <code>:crypto.rand_bytes 3</code></li>
<li>どんな型同士も比較可能、ソート可能</li>
<li>文字の連結は <code>&quot;Hello, &quot; &lt;&gt; &quot;Elixir&quot;</code></li>
</ul>
<h2>参考</h2>
<p>公式サイト<br>
<a href="https://elixir-lang.org/">https://elixir-lang.org/</a></p>
<p>Elixir School(日本語あり)<br>
<a href="https://elixirschool.com">https://elixirschool.com</a></p>
<h2>イベントに参加した時のメモ</h2>
<h3>guest1 @ohrdev おーはらさん</h3>
<h4>なぜElixir</h4>
<ul>
<li>
<p>可用性◯</p>
</li>
<li>
<p>速度× =&gt; C, golangの方が</p>
</li>
<li>
<p>今持っていない考え方が身につく？</p>
<ul>
<li>アクターモデル</li>
<li>関数プログラミング、マクロ、プロトコル</li>
<li>並行プログラミング、OTP</li>
</ul>
</li>
<li>
<p>適当な問題</p>
<ul>
<li>並列処理が効くツール
<ul>
<li>クローラー</li>
<li>chat, mastodon cloneとか？</li>
</ul>
</li>
<li>ライブラリ制作
<ul>
<li>マクロを使う必要がある(メタプログラミング)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>guest2 さっちゃん</h3>
<ul>
<li>phoenix new しとけばRailsみたく開発できる。Webはだいたいいける</li>
<li>dockerで環境をつくって、環境差異をなくした</li>
<li>lint: 開発の最初から入れる必要がある
<ul>
<li>dogma, credoの2つがある(credoの方が盛ん)</li>
<li>dialyzer: flowtypeみたく型を指定できる
<ul>
<li>但し、めちゃくちゃ遅い(最初に型情報のDBを生成する)</li>
</ul>
</li>
<li>test: ExUnit
<ul>
<li>関数合成だけで構築できると信じるとテストが書きやすくなる</li>
</ul>
</li>
</ul>
</li>
<li>awesome-elixer
<ul>
<li>ライブラリの選定に有用</li>
<li>elixir公式MLでも情報とれる</li>
</ul>
</li>
<li>別の言語で学ぶ
<ul>
<li>Haskell, Lisp, Scala</li>
</ul>
</li>
<li>プロセスの役割
<ul>
<li>タスクを分割する</li>
<li>状態を持つ</li>
</ul>
</li>
</ul>
<h3>LT</h3>
<h4>@color_box</h4>
<ul>
<li>
<p>とりあえず HexDoc</p>
</li>
<li>
<p>erlang ライブラリ多い</p>
</li>
<li>
<p>REPL環境が良い</p>
</li>
<li>
<p>iex -S mix でライブラリも参照できる</p>
</li>
<li>
<p>パターンマッチの重要性</p>
<ul>
<li>case</li>
<li>関数のシグネチャ<br>
-&gt; 関数が小さくなるので、読みやすくなる</li>
</ul>
</li>
</ul>
<h4>@cedretaber</h4>
<ul>
<li>Bibliotheca 蔵書管理アプリ</li>
<li>認証ライブラリを作った</li>
</ul>
<h4>@nunulk</h4>
<ul>
<li>ElixirでSlack botをつくっている</li>
</ul>
<h4>@yasuhiroki</h4>
<ul>
<li>シェル芸との共通点から好きになる</li>
</ul>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[鎌倉で開発合宿してきた]]></title>
            <link>/2017/02/14/kamakura-kaihatsu-gassyuku/</link>
            <guid>/2017/02/14/kamakura-kaihatsu-gassyuku/</guid>
            <pubDate>Tue, 14 Feb 2017 12:40:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2017年2月10日〜12日の間、鎌倉（由比ヶ浜）で開発合宿をしてきました。<br>
泊まった場所は以下です。</p>
<p><a href="http://www.ikyu.com/vacation/00050003/">光と水の邸宅</a></p>
<p>広いしきれいだし、とても使いやすかったので開発合宿にオススメです！</p>
<h2>発表資料</h2>
<div class="speakerdeck" data-id="3e5ab470ef564b02b22c545fbdbab89a"></div>
<h2>感想</h2>
<p>事前準備があまりできず、いい感じのアウトプットが出なかったのが心残りです。<br>
だいたい晴れていたのですが突然雪が降ったり、何だか変な天気でした。</p>
<p>OSSコミッターになるネタのために作った<a href="https://github.com/tensorflow/tensorflow/pull/7441">PR</a>は無事マージされてました。笑</p>
<p>由比ヶ浜の海岸。<br>
ここには写っていませんが、2月なのにサーファーが沢山いました。<br>
寒いのに・・・<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/ocean.jpg" alt="ocean"></p>
<p>2日目の昼。<br>
ずっと引きこもっていたので、空を見て気持ち良くなる大人たち<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/sky.jpg" alt="sky"></p>
<p>帰りがけ、鶴岡八幡宮に寄っていきました。<br>
<img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/thumbnail.png" alt="tsurugaoka"></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Deviseでフレンドリーフォワーディングを実装する]]></title>
            <link>/2016/12/30/devise-friendly-forwarding/</link>
            <guid>/2016/12/30/devise-friendly-forwarding/</guid>
            <pubDate>Fri, 30 Dec 2016 07:34:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>前置き</h2>
<p>Railsでの認証に <a href="https://github.com/plataformatec/devise">Devise</a> を使っている人は多いと思います。<br>
ただ、 Devise はデフォルトでは<strong>フレンドリーフォワーディング</strong>が効いていません。</p>
<p>フレンドリーフォワーディングとは、ユーザーが認証前に開こうとしていたページへ、認証後にリダイレクトさせることです。<br>
参考： <a href="http://railstutorial.jp/chapters/updating_and_deleting_users?version=4.2#sec-friendly_forwarding">Rails チュートリアル</a></p>
<p>最近機会があったので、<a href="https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update">DeviseのHow To</a>を参考に実装しました。<br>
その際にやったことを残しておきます。</p>
<p>なお、各バージョンは以下の通りです。</p>
<ul>
<li>Ruby 2.3.1</li>
<li>Rails 4.2.7.1</li>
<li>Devise 3.5.1</li>
</ul>
<h2>手順</h2>
<h3>アクセスされたURLを保存する</h3>
<p>認証前にアクセスしようとしたページをセッションに保存します。<br>
<code>current_user</code> が取得できれば認証できているので、その場合は除外しています。<br>
また、 <code>devise_controller</code> の各アクションの場合も除外しています。</p>
<pre><code class="hljs ruby"><span class="hljs-comment"># app/controllers/application_controller.rb</span>

before_action <span class="hljs-symbol">:store_current_location</span>, <span class="hljs-symbol">unless:</span> <span class="hljs-symbol">:devise_controller?</span>

private

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">store_current_location</span></span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> current_user
  store_location_for(<span class="hljs-symbol">:user</span>, request.url)
<span class="hljs-keyword">end</span>
</code></pre>
<p><code>store_location_for</code> を呼ぶと、<code>session[:user_return_to]</code> にURLを保存してくれます。<br>
<code>:user</code> の部分は認証のscopeです。大抵の場合は <code>:user</code> でOKかと思います。</p>
<p>実は、フレンドリーフォワーディングの実装としてはこれだけで完了です。<br>
<code>session[:user_return_to]</code> にURLが入っていると、認証後にリダイレクトしてくれるようです。</p>
<p>ただ、セキュリティ対策として以下の場合は追加の対応が必要です。</p>
<h3>認証後にセッションをリセットする場合</h3>
<p><a href="http://railsguides.jp/">Rails ガイド</a> のセキュリティのページで、<a href="http://railsguides.jp/security.html#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83-%E5%AF%BE%E5%BF%9C%E7%AD%96">セッション固定攻撃の対応策</a> について紹介されています。<br>
ログイン認証の際に、 <code>reset_session</code> を行なうというものです。<br>
これを行なうと、当然上で保存したURLも消えてしまうので、その値だけ別途引き継ぐ対応を行ないます。</p>
<h3><code>user_return_to</code> を引き継ぐ</h3>
<p><code>Devise::SessionsController</code> を継承したControllerで以下の対応をします。</p>
<pre><code class="hljs ruby"><span class="hljs-comment"># app/controllers/sessions_controller.rb</span>

before_action <span class="hljs-symbol">:reset_session_before_login</span>, <span class="hljs-symbol">only:</span> <span class="hljs-symbol">:create</span>

private

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset_session_before_login</span></span>
  user_return_to = session[<span class="hljs-symbol">:user_return_to</span>]
  reset_session

  session[<span class="hljs-symbol">:user_return_to</span>] = user_return_to <span class="hljs-keyword">if</span> user_return_to
<span class="hljs-keyword">end</span>
</code></pre>
<p>これで、認証時の <code>reset_session</code> をしつつフレンドリーフォワーディングをすることが可能になりました。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[React on Redux on Relay on Ruby on Rails]]></title>
            <link>/2016/10/27/rorororor/</link>
            <guid>/2016/10/27/rorororor/</guid>
            <pubDate>Thu, 27 Oct 2016 14:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>社内勉強会にてタイトルのような試みをし、<strong>失敗</strong>した話をしました。</p>
<div class="speakerdeck" data-id="5cadf924d4014b9386d3836cd7820b07"></div>
<br />
<p>React周辺ライブラリを整理するという一番の目的は達成できたかなと思います。<br>
ただまだまだ自分の中に落とし込めてない部分が多いので、キャッチアップしていこうという感じです。<br>
サンプルコードばっかり追ってないで、ちゃんとしたもの作っていこうな、俺。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Jekyll -> Middleman-blogに移行しました]]></title>
            <link>/2016/09/20/jekyll_to_middleman/</link>
            <guid>/2016/09/20/jekyll_to_middleman/</guid>
            <pubDate>Tue, 20 Sep 2016 12:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>ブログエンジンを<a href="https://jekyllrb.com/">Jekyll</a> -&gt; <a href="https://github.com/middleman/middleman-blog">Middleman-blog</a>に移行しました。<br>
移行した一番の理由は、<a href="https://shopify.github.io/liquid/">Liquid</a>記法（<code>{% %}</code>みたいなの）にいまいち慣れなかったことです。</p>
<p><img src="https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2016/09/20-jekyll_to_middleman/images/thumbnail.png" alt="middleman-logo"></p>
<h2>移行に際してやったこと</h2>
<h3>デザイン・レイアウト</h3>
<p>jekyllの時は <a href="https://jekyllthemes.io/">Jekyll Themes &amp; Template</a> の中から選んでそのデザインを使っていたのですが、今回は自分でカスタマイズしやすいようThemeを使わないことにしました。</p>
<p>まず、CSSフレームワークとして <a href="http://foundation.zurb.com/">Foundation</a> を使いました。<br>
数年前にver.5が出たと思ったのですが、もうver.6がリリースされているんですね…。<br>
軽量・シンプルでドキュメントもしっかりしていて使いやすかったです。</p>
<p>独自スタイルの追加は <a href="http://sass-lang.com/">Sass</a> で書いて、 <a href="https://webpack.github.io/">webpack</a> でCompileしています。<br>
JSはES2015で書けるようにしています。が、まだ特に書いてはいないです^^;</p>
<p>Middlemanには <a href="https://middlemanapp.com/jp/advanced/external-pipeline/">外部パイプライン</a> という機能があり、<code>middleman server</code> や <code>middleman build</code>の時にフロントエンドのコマンドを実行するよう設定できます。</p>
<pre><code class="hljs ruby">activate <span class="hljs-symbol">:external_pipeline</span>,
  <span class="hljs-symbol">name:</span> <span class="hljs-symbol">:webpack</span>,
  <span class="hljs-symbol">command:</span> build? ? <span class="hljs-string">"./node_modules/webpack/bin/webpack.js --bail"</span> : <span class="hljs-string">"./node_modules/webpack/bin/webpack.js --watch -d"</span>,
  <span class="hljs-symbol">source:</span> <span class="hljs-string">".tmp/dist"</span>,
  <span class="hljs-symbol">latency:</span> <span class="hljs-number">1</span>
</code></pre>
<h3>テンプレート</h3>
<p>Railsの開発で慣れている<a href="http://slim-lang.com/">Slim</a>を採用しました。<br>
<code>erb</code>書いてる時に比べて精神状態が良好に保たれます。</p>
<p>微妙にハマったのが<code>partial</code>の書き方で、<a href="https://middlemanapp.com/jp/basics/upgrade-v4/">v4 へのアップグレード</a>にもあるように、<code>partials_dir</code>の設定オプションが無くなっています。<br>
部分テンプレートの指定は<code>source</code>からの相対パスで<code>partial 'partials/my_partial'</code>のように書くことになります。</p>
<p>また、特に指定をしなければ<code>partials</code>以下もビルド対象となってしまうので、ビルド対象外として設定すると良いです。</p>
<pre><code class="hljs ruby">ignore <span class="hljs-string">'partials/*'</span>
</code></pre>
<p>これは<strong>開発時に気づきにくい罠</strong>でした。</p>
<h3>記事の移行</h3>
<p>元々Jekyllの記事は <a href="http://jekyllrb-ja.github.io/docs/frontmatter/">Front-matter</a> + Markdown で書いていたので、ほぼそのままMiddleman-blogにコピーするだけで完了しました。</p>
<h3>ファイル圧縮</h3>
<p>アセットを圧縮するための設定がデフォルトで用意されています。</p>
<pre><code class="hljs ruby">configure <span class="hljs-symbol">:build</span> <span class="hljs-keyword">do</span>
  activate <span class="hljs-symbol">:minify_css</span>
  activate <span class="hljs-symbol">:minify_javascript</span>
<span class="hljs-keyword">end</span>

activate <span class="hljs-symbol">:minify_html</span>
</code></pre>
<p>まだやれてないですが、画像の圧縮には<a href="https://github.com/plasticine/middleman-imageoptim">middleman-imageoptim</a>を使うと良さそうです。</p>
<h3>デプロイ</h3>
<p><a href="https://github.com/middleman-contrib/middleman-deploy">middleman-deploy</a>が便利です。<br>
自分は<a href="https://pages.github.com/">GitHub Pages</a>で公開しているので、<code>master</code>ブランチにPushして完了です。</p>
<pre><code class="hljs ruby">activate <span class="hljs-symbol">:deploy</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|deploy|</span>
  deploy.deploy_method = <span class="hljs-symbol">:git</span>
  deploy.branch = <span class="hljs-string">'master'</span> <span class="hljs-comment"># default: gh-pages</span>
  deploy.build_before = <span class="hljs-literal">true</span> <span class="hljs-comment"># default: false</span>
<span class="hljs-keyword">end</span>
</code></pre>
<h2>感想</h2>
<p>控えめに言って <a href="https://middlemanapp.com/jp/">Middleman</a> 最高でした！<br>
サイト作るのに必要だなと思うものがデフォルトで付いてたり拡張として用意してあって、たくさん楽できました。<br>
あとはRailsライクな <a href="https://middlemanapp.com/jp/basics/helper_methods/">ヘルパーメソッド</a> も用意してあるし、とにかくハードルが低かったです。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[rspec_rake っていうGemをつくってみた]]></title>
            <link>/2016/05/06/rake_rspec/</link>
            <guid>/2016/05/06/rake_rspec/</guid>
            <pubDate>Thu, 05 May 2016 15:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>人生初のGemをつくってみました！<br>
<a href="https://rubygems.org/gems/rspec_rake">rspec_rake</a></p>
<h1>背景</h1>
<p>Rakeタスクのテスト(RSpec)を書く時に躓くことが多く、そこを楽にできたらいいなーと思ったのがきっかけです。あとそろそろGemつくってみたかった。</p>
<h1>使い方</h1>
<p>仮に、</p>
<ul>
<li>Railsプロジェクト</li>
<li>Rakeファイルは<code>lib/tasks</code>以下に入ってる</li>
</ul>
<p>という想定だと、以下のような感じで設定します。</p>
<pre><code class="hljs "># in spec/rails_helper.rb

RSpecRake.configure do |config|
  config.require_tasks(File.join(Rails.root, 'lib', 'tasks'))
  config.auto_reenable = true
end
</code></pre>
<p><code>.require_tasks</code>はRakeタスク定義してるだけなので、他の方法でも良いです。<br>
どちらかと言うと、<code>.auto_reenable</code>の方が欲しい機能でした。</p>
<h1>auto_reenable</h1>
<p><a href="http://qiita.com/morygonzalez/items/699749c631f66e62637b">Rake タスクをテストコードの中で複数回実行する</a><br>
こちらの記事に書かれているように、Rakeタスクの<code>#invoke</code>メソッドを2回以上実行する時は、その都度<code>#reenable</code>メソッドを呼ぶ必要があります。<br>
ここではテストなので、成功パターン・失敗パターンだけでも2回以上実行することになりますよね…！</p>
<p>で、毎度<code>#reenable</code>を呼ぶのは面倒なので、</p>
<pre><code class="hljs ">  config.auto_reenable = true
</code></pre>
<p>と設定すれば、タスク実行後に自動的に<code>#reenable</code>するようにしました。</p>
<p><strong>但し、タスク内で別のタスクを呼んだりなど、無限ループするような書き方には注意です！</strong></p>
<p>ちなみに、<code>#execute</code>メソッドなら何度でも実行できて楽なのですが、こっちはこっちでタスクに引数が渡しづらいという悩みが出てきたりします笑</p>
<h1>specファイル内でのタスク実行方法</h1>
<p>上記の設定ができていれば、specファイル内では<code>Rake::Task</code>から対象のタスクを呼ぶだけでOKです。</p>
<pre><code class="hljs "># before, it, afterなどどこでも
Rake::Task['some:task'].invoke
</code></pre>
<p>各specファイルではRakeの定義などは要らないし、どのタスクでも呼べるので結構楽に書けると思います。</p>
<h1>懸念点</h1>
<p>RSpec起動時にすべてのRakeファイルを読み込む想定なので、テストの実行時間が増えるかもしれないです。<br>
色んなプロジェクトで試したりとかしてないので、やってみてどうだったとか感想もらえると嬉しいです！</p>
<h1>参考にした記事</h1>
<p><a href="https://robots.thoughtbot.com/test-rake-tasks-like-a-boss">Test Rake Tasks Like a BOSS</a><br>
<a href="http://dev.classmethod.jp/server-side/ruby-on-rails/ruby-on-rails_rspec_rake_test/">[Ruby on Rails]RSpecによるRakeのテスト</a><br>
<a href="http://qiita.com/morygonzalez/items/699749c631f66e62637b">Rake タスクをテストコードの中で複数回実行する</a><br>
<a href="http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/">RubyGemはめっちゃ簡単に作れる！</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[vimでgitするにはvimagitがおすすめ]]></title>
            <link>/2016/01/08/vimagit/</link>
            <guid>/2016/01/08/vimagit/</guid>
            <pubDate>Thu, 07 Jan 2016 15:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>年末に知った<a href="https://github.com/jreybert/vimagit">vimagit</a>ってvimのプラグインが使ってて気持ち良い。<br>
Gitの差分をvimで開けて、行単位でStageしたりCommitできる。<br>
<code>git add -p</code>するvimmerには特におすすめ！</p>
<p>ちなみにEmacsプラグインの<a href="https://github.com/magit/magit">magit</a>ってやつのコピー版らしい。<br>
インストール〜使い方、オススメ設定まで記載しておく。</p>
<h1>インストール</h1>
<pre><code class="hljs vim">NeoBundle <span class="hljs-string">'jreybert/vimagit'</span>
</code></pre>
<h1>使い方</h1>
<p><a href="https://github.com/jreybert/vimagit">GitHubのリポジトリ</a>にリンクされてる<a href="https://asciinema.org/a/28761">ビデオ</a>とかを見るとざっくりイメージできると思う。</p>
<h3>開き方</h3>
<p><code>:Magit</code> または <code>&lt;Leader&gt;M</code>でbufferを開く。</p>
<h3>セクション</h3>
<p>bufferは以下の5つのセクションに分かれている。<br>
後で記載するけど表示順などをオプションで指定できる。</p>
<ul>
<li><strong>info</strong>: current branchやHEAD commitのメッセージなどが表示されている</li>
<li><strong>Commit message</strong>: コミットする時に現れて、メッセージを入力する</li>
<li><strong>Staged changes</strong>: そのままだけどStagingされた変更部分</li>
<li><strong>Unstaged changes</strong>: まだStagingされてない変更部分。Untracked filesもここに表示される</li>
<li><strong>Stash list</strong>: Stashのリスト</li>
</ul>
<h3>コマンド</h3>
<p><a href="https://github.com/jreybert/vimagit/blob/master/README.md">README</a>みれば丁寧に書いてあるけど、自分が普段使うものを記載しておく。</p>
<table>
<thead>
<tr>
<th style="text-align:left">command</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:Magit または &lt;Leader&gt;M</td>
<td style="text-align:left">magit bufferを開く。すべてはここから</td>
</tr>
<tr>
<td style="text-align:left">S</td>
<td style="text-align:left">Stage &lt;-&gt; Unstage の切り替え。ファイル名の上ならファイルごとStageされるし、vで行選択すればその行だけStageされる</td>
</tr>
<tr>
<td style="text-align:left">DDD</td>
<td style="text-align:left">Unstagedセクションでだけ使える。変更を破棄する</td>
</tr>
<tr>
<td style="text-align:left">CC</td>
<td style="text-align:left">Commitセクション以外にいるならCommitセクションを開く。CommitセクションにいるならCommitする(説明むずい)</td>
</tr>
<tr>
<td style="text-align:left">CA</td>
<td style="text-align:left">CCのcommit --amendバージョン。直前のcommitに含めるならこれ。</td>
</tr>
<tr>
<td style="text-align:left">CF</td>
<td style="text-align:left">commit --amendで、コミットメッセージを変更しない場合はこのコマンド一発で完了</td>
</tr>
<tr>
<td style="text-align:left">R</td>
<td style="text-align:left">bufferをrefreshする</td>
</tr>
<tr>
<td style="text-align:left">q</td>
<td style="text-align:left">bufferを閉じる</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">help表示のON/OFF</td>
</tr>
</tbody>
</table>
<p>他にもIやLとか色々あるけど、自分はほぼ使ってない。</p>
<h3>オプション</h3>
<p>vimrcで指定できるオプション。</p>
<table>
<thead>
<tr>
<th style="text-align:left">option</th>
<th style="text-align:left">description</th>
<th style="text-align:left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">g:magit_enabled</td>
<td style="text-align:left">vimagitの有効[1]・無効[0]</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">g:magit_show_help</td>
<td style="text-align:left">ヘルプの表示[1]・非表示[0]</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">g:magit_default_show_all_files</td>
<td style="text-align:left">bufferを開いた時にdiffを閉じておく[0]・modified filesのdiffだけ表示[1]・全ファイルのdiffを表示[2]</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">g:magit_default_fold_level</td>
<td style="text-align:left">上記のdiff表示の詳細設定。ファイル名だけ表示する[0]・ファイル名とhunkの一覧だけ表示[1]・hunkの中身のdiffも表示[2]</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">g:magit_default_sections</td>
<td style="text-align:left">各セクションの表示/非表示と順番</td>
<td style="text-align:left">['info', 'global_help', 'commit', 'staged', 'unstaged']</td>
</tr>
<tr>
<td style="text-align:left">g:magit_warning_max_lines</td>
<td style="text-align:left">bufferを開く際にwarningを出すdiffの行数。実際に開くかはyes/noで回答</td>
<td style="text-align:left">10000</td>
</tr>
</tbody>
</table>
<h1>オススメ設定</h1>
<p>自分がやってる設定と理由を簡単に。</p>
<pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:magit_show_help</span> = <span class="hljs-number">0</span>  <span class="hljs-comment">" 少し慣れたらいらなくなる</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable">g:magit_default_show_all_files</span> = <span class="hljs-number">2</span>  <span class="hljs-comment">" わざわざ開くのは面倒なので</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable">g:magit_default_fold_level</span> = <span class="hljs-number">2</span>  <span class="hljs-comment">" 同上</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable">g:magit_default_sections</span> = [<span class="hljs-string">'global_help'</span>, <span class="hljs-string">'info'</span>, <span class="hljs-string">'unstaged'</span>, <span class="hljs-string">'staged'</span>, <span class="hljs-string">'commit'</span>]  <span class="hljs-comment">" helpはデフォルト非表示。次にcurrent情報。それ以下は上から順に処理していくイメージ</span>
</code></pre>
<p>最初のcommitが2015年9月。 READMEにもあるようにまだまだ機能追加されそう。</p>
<p>VimでGitといえば<a href="https://github.com/tpope/vim-fugitive">fugitive</a>だと思うけど、それには無いものをいっぱい持ってるし、併用もアリだと思う！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[マージ済ブランチを消すコマンドをつくった]]></title>
            <link>/2015/12/27/git-delete-merged/</link>
            <guid>/2015/12/27/git-delete-merged/</guid>
            <pubDate>Sun, 27 Dec 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>今までマージ済ブランチを消す時、<code>git branch --merged</code>してから1個1個<code>git branch -d xxxx</code>とか面倒くさいことしてたので、マージ済ブランチを表示して確認後にyesと打てばまとめて消せるようにした。<br>
但し、originとdevelopは消さないようにしてる。</p>
<pre><code class="hljs bash"><span class="hljs-keyword">function</span> git-delete-<span class="hljs-function"><span class="hljs-title">merged</span></span>() {
  merged=`git branch --merged | egrep -v <span class="hljs-string">'\*|develop|master'</span>`
  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$merged</span> = <span class="hljs-string">""</span> ]]; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">'No merged branch.'</span>
    <span class="hljs-built_in">return</span> 0
  <span class="hljs-keyword">fi</span>

  <span class="hljs-built_in">echo</span> -en <span class="hljs-string">"<span class="hljs-variable">$merged</span>\\ndelete? (y)es/(n)o: "</span>
  <span class="hljs-built_in">read</span> ans

  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$ans</span> =~ ^y(es)?$ ]]; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$merged</span>"</span> | xargs git branch -d
  <span class="hljs-keyword">else</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">'Cancelled.'</span>
  <span class="hljs-keyword">fi</span>
}

<span class="hljs-built_in">alias</span> gdm=<span class="hljs-string">'git-delete-merged'</span>
</code></pre>
<h4>参考</h4>
<p><a href="http://qiita.com/hajimeni/items/73d2155fc59e152630c4">Gitでマージ済みブランチを一括削除</a></p>
<h1>ついでに</h1>
<p>今までGitのサブコマンドは<code>gitconfig</code>のaliasに定義してたけど、<code>git xx</code>って打つのもちょっと手間なのでalias整理した！</p>
<pre><code class="hljs bash"><span class="hljs-built_in">alias</span> ga=<span class="hljs-string">'git add'</span>
<span class="hljs-built_in">alias</span> gap=<span class="hljs-string">'git add -p'</span>
<span class="hljs-built_in">alias</span> gb=<span class="hljs-string">'git branch'</span>
<span class="hljs-built_in">alias</span> gcm=<span class="hljs-string">'git commit -v'</span>
<span class="hljs-built_in">alias</span> gca=<span class="hljs-string">'git commit --amend'</span>
<span class="hljs-built_in">alias</span> gco=<span class="hljs-string">'git checkout'</span>
<span class="hljs-built_in">alias</span> gcof=<span class="hljs-string">'git-checkout-force'</span>
<span class="hljs-built_in">alias</span> gcp=<span class="hljs-string">'git cherry-pick'</span>
<span class="hljs-built_in">alias</span> gd=<span class="hljs-string">'git diff'</span>
<span class="hljs-built_in">alias</span> gdm=<span class="hljs-string">'git-delete-merged'</span>
<span class="hljs-built_in">alias</span> gl=<span class="hljs-string">"git log --pretty='%h %ci %s %cn'"</span>
<span class="hljs-built_in">alias</span> gpl=<span class="hljs-string">'git pull'</span>
<span class="hljs-built_in">alias</span> grb=<span class="hljs-string">'git rabase'</span>
<span class="hljs-built_in">alias</span> grbi=<span class="hljs-string">'git rabse -i'</span>
<span class="hljs-built_in">alias</span> grba=<span class="hljs-string">'git rabse --abort'</span>
<span class="hljs-built_in">alias</span> grbc=<span class="hljs-string">'git rabse --continue'</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> $(seq 10); <span class="hljs-keyword">do</span>
  <span class="hljs-built_in">alias</span> grbi<span class="hljs-variable">$n</span>=<span class="hljs-string">"git rebase -i HEAD~<span class="hljs-variable">$n</span>"</span>
<span class="hljs-keyword">done</span>
<span class="hljs-built_in">alias</span> grs=<span class="hljs-string">'git reset'</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> $(seq 10); <span class="hljs-keyword">do</span>
  <span class="hljs-built_in">alias</span> grs<span class="hljs-variable">$n</span>=<span class="hljs-string">"git reset HEAD~<span class="hljs-variable">$n</span>"</span>
<span class="hljs-keyword">done</span>
<span class="hljs-built_in">alias</span> gs=<span class="hljs-string">'git status'</span>
<span class="hljs-built_in">alias</span> gps=<span class="hljs-string">'git push'</span>
</code></pre>
<p>まだ慣れてなくてすぐ<code>git</code>って打っちゃうので、早く身体に覚えさせたい。</p>
<h4>参考</h4>
<p><a href="http://blog.enogineer.com/2014/12/04/git-ranking/">よく使うGitコマンドのエイリアス＆シェル関数トップ10+α</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[ctrlp.vimを試してみる]]></title>
            <link>/2015/11/08/ctrlp/</link>
            <guid>/2015/11/08/ctrlp/</guid>
            <pubDate>Sun, 08 Nov 2015 14:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>約1年位Vimでnerdtreeを使ってきたんだけど、そろそろ別のも使ってみたいと思ったので<strong>ctrlp</strong>を試してみることにする。</p>
<p>ちなみにnerdtreeはディレクトリのツリーが常に表示されてる分、幅が狭くて辛い時があった。</p>
<h1>インストール</h1>
<pre><code class="hljs vim">NeoBundle <span class="hljs-string">'ctrlpvim/ctrlp.vim'</span>
</code></pre>
<h1>起動</h1>
<p><code>&lt;c-p&gt;</code></p>
<p>適当にファイル名とか入力すれば絞り込んでくれる。</p>
<h1>Help</h1>
<pre><code class="hljs vim">:<span class="hljs-keyword">help</span> ctrlp-mappings
</code></pre>
<p>これ見とけばOK</p>
<h1>キー(デフォルト)</h1>
<table>
<thead>
<tr>
<th style="text-align:center">key</th>
<th style="text-align:center">action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;c-d&gt;</td>
<td style="text-align:center">フルパス検索モードとファイル名検索モード(&gt;d&gt;)の切り替え</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-r&gt;</td>
<td style="text-align:center">文字列検索モードと正規表現検索モード(r&gt;&gt;)の切り替え</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-f&gt;, &lt;c-b&gt;</td>
<td style="text-align:center">検索対象の切り替え(files, mru files, buffer)</td>
</tr>
<tr>
<td style="text-align:center">&lt;s-tab&gt;</td>
<td style="text-align:center">match-windowとpromptのfocus切り替え(match-windowに切り替える意味がイマイチわからない)</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-c&gt;, &lt;esc&gt;</td>
<td style="text-align:center">ctrlpの終了</td>
</tr>
<tr>
<td style="text-align:center">&lt;cr&gt;</td>
<td style="text-align:center">curren windowで開く</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-x&gt;</td>
<td style="text-align:center">horizonal splitで開く</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-v&gt;</td>
<td style="text-align:center">vertical splitで開く</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-z&gt;</td>
<td style="text-align:center">markする</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-o&gt;</td>
<td style="text-align:center">ダイアログ付きで開く(markしているのがあれｂ一気に開く)</td>
</tr>
<tr>
<td style="text-align:center">&lt;c-y&gt;</td>
<td style="text-align:center">新規ファイル作成</td>
</tr>
</tbody>
</table>
<h1>ファイル検索にagを使う</h1>
<p>agのインストール</p>
<pre><code class="hljs bash">brew install ag
</code></pre>
<p>ag.vimの設定</p>
<pre><code class="hljs vim">NeoBundle <span class="hljs-string">'rking/ag.vim'</span>

<span class="hljs-keyword">if</span> <span class="hljs-built_in">executable</span>(<span class="hljs-string">'ag'</span>)
  <span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_use_caching</span>=<span class="hljs-number">0</span>
  <span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_user_command</span>=<span class="hljs-string">'ag %s -i --nocolor --nogroup -g ""'</span>
<span class="hljs-keyword">endif</span>
</code></pre>
<p>はやい。</p>
<h1>参考</h1>
<ul>
<li><a href="http://christina04.hatenablog.com/entry/2014/10/30/100612">CtrlP + ag で vim の検索を高速化</a></li>
<li><a href="http://qiita.com/oahiroaki/items/d71337fb9d28303a54a8">ctrlp.vimの使い方まとめ</a></li>
</ul>
<p>次はag.vim、quickfixあたりの使い方整理してまとめたいな！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Global変数を管理するGem 'global']]></title>
            <link>/2015/05/04/rubygem_global/</link>
            <guid>/2015/05/04/rubygem_global/</guid>
            <pubDate>Mon, 04 May 2015 07:32:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>業務で使ってるGem「<strong>global</strong>」がかなり便利だったのでメモしておく。</p>
<p><a href="https://github.com/railsware/global">https://github.com/railsware/global</a></p>
<h2>導入手順(Railsの場合)</h2>
<h3>1.Gemfileに追加</h3>
<pre><code class="hljs ruby">gem <span class="hljs-string">'global'</span>
</code></pre>
<h3>2.initiallizersに追加</h3>
<p>config/initializers/global.rb</p>
<pre><code class="hljs ruby">Global.configure <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span>
  config.environment = Rails.env.to_s
  config.config_directory = Rails.root.join(<span class="hljs-string">'config/global'</span>).to_s
<span class="hljs-keyword">end</span>
</code></pre>
<p>ここまでやれば、<code>config/global/xxxx.yml</code>にファイルを置くと設定値を読んでくれる</p>
<pre><code class="hljs yaml"><span class="hljs-comment"># yamlファイルの例</span>
<span class="hljs-attr">default:</span>
<span class="hljs-attr">  error-email:</span> <span class="hljs-string">myname@example.com</span>
<span class="hljs-attr">production:</span>
<span class="hljs-attr">  error-email:</span> <span class="hljs-string">error@example.com</span>
</code></pre>
<p>変数へのアクセス方法</p>
<pre><code class="hljs ruby">Global.error-email <span class="hljs-comment"># 環境によって適切な方にアクセス</span>
</code></pre>
<h3>さらに</h3>
<p>階層を深くするには、単にyamlの階層を深くするか<br>
<code>config/global/xxxx/yyyy.yml</code><br>
のようにファイルパスを深くすれば期待通りに動いてくれる。</p>
<p>便利！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[定数のメソッド内定義]]></title>
            <link>/2015/05/01/ruby-define-const-in-method/</link>
            <guid>/2015/05/01/ruby-define-const-in-method/</guid>
            <pubDate>Fri, 01 May 2015 08:08:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>定数はメソッドの中で定義ができない</p>
<p><a href="http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html">http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html</a></p>
<p>確認してみました。</p>
<pre><code class="hljs ruby"><span class="hljs-meta">irb(main):001:0&gt;</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">def_const</span></span>
<span class="hljs-meta">irb(main):002:1&gt;</span>   CONST = <span class="hljs-string">"const"</span>
<span class="hljs-meta">irb(main):003:1&gt;</span> end
<span class="hljs-symbol">SyntaxError:</span> compile error
(irb)<span class="hljs-symbol">:</span><span class="hljs-number">2</span>: dynamic constant assignment
  CONST = <span class="hljs-string">"const"</span>
         ^
        from (irb)<span class="hljs-symbol">:</span><span class="hljs-number">3</span>
        from <span class="hljs-symbol">:</span><span class="hljs-number">0</span>
</code></pre>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Windowsコマンドプロンプトでaliasを使いたい]]></title>
            <link>/2014/02/16/windows_alias/</link>
            <guid>/2014/02/16/windows_alias/</guid>
            <pubDate>Sun, 16 Feb 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3><strong>cmd</strong></h3>
<p>でaliasなんて無理かなと半ば諦めていましたが、探してみればあるものですね。<br>
aliasを設定するには以下のようにします。</p>
<pre class="code" data-unlink="">
doskey ll=dir /ad
</pre>
<pre class="code" data-unlink="">
C:\Users\bakunyo\Desktop>ll
 ドライブ C のボリューム ラベルは Windows です
 ボリューム シリアル番号は 1ED0-4D6E です

 C:\Users\bakunyo\Desktop のディレクトリ

2014/02/01  21:16    <DIR>          .
2014/02/01  21:16    <DIR>          ..
2013/12/31  18:12    <DIR>          inbox
               0 個のファイル                   0 バイト
               3 個のディレクトリ  186,053,722,112 バイトの空き領域
</pre>
<p>おお、使えるようになっています！</p>
<p>続いて、aliasの一覧を確認するには、以下のようにします。</p>
<pre class="code" data-unlink="">
C:\Users\bakunyo\Desktop>doskey /macros
ll=dir /ad
</pre>
<p>実は、今回なんでalias使いたくなったかというと、<a href="http://d.hatena.ne.jp/keyword/rails">rails</a>の起動コマンドが長くて鬱陶しかったんですね。</p>
<pre class="code" data-unlink="">
bundle exec rails s
</pre>
<p>これをこのままショートカットにしても良いのですが、引数にして渡すこともできるそうです。</p>
<pre class="code" data-unlink="">
doskey bx=bundle exec $1 $2
</pre>
<p>$1は1番目、$2は2番目の引数。いろいろと応用が効きそうですね。<br>
実行してみます。</p>
<pre class="code" data-unlink="">
C:\Users\bakunyo\Desktop\inbox\workspace\ruby\sample_app>bx rails s
For a better Pry experience on Windows, please use ansicon:
   http://adoxa.3eeweb.com/ansicon/
=> Booting WEBrick
=> Rails 4.0.2 application starting in development on http://0.0.0.0:3000
=> Run `rails server -h` for more startup options
=> Ctrl-C to shutdown server
[2014-02-16 10:02:14] INFO  WEBrick 1.3.1
[2014-02-16 10:02:14] INFO  ruby 2.0.0 (2013-05-14) [i386-mingw32]
[2014-02-16 10:02:14] INFO  WEBrick::HTTPServer#start: pid=5624 port=3000
</pre>
<p><span style="color: #ff0000"><strong>起動できました！</strong></span><br>
※bxを<code>bundle exec</code>にしておいて、<code>bundle exec rais s</code>と実行することはできないんですね。</p>
<h3>設定の保存</h3>
<p>さて、この設定したaliasですが、どこかに保存しておかないと次にcmd起動した時には消えてしまっています。<br>
なので、ファイルに保存＆cmd起動時に読み込む設定をします。</p>
<p>まずは、設定をどこか適当な場所に保存します。</p>
<pre class="code" data-unlink="">
C:\Users\bakunyo>doskey /macros > C:\Users\bakunyo\.cmdrc
</pre>
<p>cmdの起動ファイルで右クリック＞プロパティを選択し、リンク先の中身に設定ファイルを読み込むよう追記してあげます。</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20140216/20140216103802.png" alt="f:id:bakunyo:20140216103802p:plain" title="f:id:bakunyo:20140216103802p:plain"></span></p>
<pre class="code" data-unlink="">
C:\Windows\System32\cmd.exe /k "doskey /macrofile=C:\Users\bakunyo\.cmdrc"
</pre>
<p>ちなみに、自分はRailsInstallerで加わった<a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>を以下のように編集しました。</p>
<pre class="code" data-unlink="">
C:\Windows\System32\cmd.exe /E:ON /k "C:\RailsInstaller\Ruby2.0.0\setup_environment.bat C:\RailsInstaller & doskey /macrofile=C:\Users\bakunyo\.cmdrc"
</pre>
<p>起動コマンドは＆で繋げられるみたいですね！<br>
これで、かなり便利になりました。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Sublimeでインデントを整形する]]></title>
            <link>/2014/01/30/sublime_indent/</link>
            <guid>/2014/01/30/sublime_indent/</guid>
            <pubDate>Thu, 30 Jan 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://d.hatena.ne.jp/keyword/Sublime">Sublime</a> Textにはデフォルトで**<span style="color: #ff0000">インデント</span>**を整形する機能があります。<br>
やり方は、<code>Edit &gt; Line &gt; Reindent</code>です。</p>
<p>ちなみにこの時適用されるインデントは、 <code>View &gt; Indentation &gt; Tab Width</code> で変更できます。</p>
<p>今回は、このReindentに<strong>ショートカット</strong>を設定してみます。<br>
ショートカットの設定は <code>Preferences &gt; Key Bindings - User</code>を開き、</p>
<pre class="code" data-unlink="">
  { "keys": ["super+ctrl+]"], "command": "reindent", "args": { "single_line": false }},
</pre>
<p>を追加して完了です。</p>
<p><code>super</code>は<a href="http://d.hatena.ne.jp/keyword/Mac">Mac</a>ならCommandキー、<a href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>なら<a href="http://d.hatena.ne.jp/keyword/Windows%A5%AD%A1%BC">Windowsキー</a>となります。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Ruby認定技術者のGoldに受かったので報告]]></title>
            <link>/2013/12/18/ruby_gold/</link>
            <guid>/2013/12/18/ruby_gold/</guid>
            <pubDate>Wed, 18 Dec 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>先日、<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>認定技術者の<span style="color: #f90e0e"><strong>Gold</strong></span>に合格してきました！</p>
<p>点数は、92点。<br>
まさかの<a href="http://bakunyo.hatenablog.com/entry/2013/07/11/Ruby%E8%AA%8D%E5%AE%9A%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AESilver%E3%81%AB%E5%8F%97%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E8%AB%B8%E3%80%85%E3%81%AE%E5%A0%B1%E5%91%8A">前回のSilver</a>の点数と同じでしたｗ</p>
<p>実は、8月にも一度受けたのですが2問ほど点数が足りなくて落ちました。<br>
<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のバージョンが1.8だから今の試験は微妙…とかいう意見は気にしないですよー笑</p>
<p>例によって勉強する際にやったことなどをメモしておきます。</p>
<h2>参考書</h2>
<h4><a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>公式資格教科書 <a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>技術者認定試験 Silver/Gold対応</h4>
<table>
<thead>
<tr>
<th>col 1</th>
<th>col 2</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/"><img src="http://ecx.images-amazon.com/images/I/41xcmbBRmlL._SL160_.jpg" alt=""></a></td>
<td><font size="-1"><a href="http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/" rel="nofollow" target="_top">Ruby公式資格教科書 Ruby技術者認定試験 Silver/Gold対応 (EXPERT EXPASS)</a><br><br>        増井 雄一郎,小川 伸一郎,(株)日立ソリューションズ 藁谷 修一,川尻 剛,牧 俊男,<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>アソシエーション,CTCテクノロジー(株) 監修 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a> 2012-02-22<br>        売り上げランキング : 113836<br><table style="border:none"><tbody><tr><td style="border:none;text-align:left;">                                                                                                          </td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://yomereba.com" rel="nofollow" target="_blank">ヨメレバ</a></td></tr></tbody></table></font></td>
</tr>
</tbody>
</table>
<p>公式なので。</p>
<h4>メタプログラミング<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a></h4>
<table>
<thead>
<tr>
<th>col 1</th>
<th>col 2</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/"><img src="http://ecx.images-amazon.com/images/I/51TODrMIEnL._SL160_.jpg" alt=""></a></td>
<td><font size="-1"><a href="http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/" rel="nofollow" target="_top">メタプログラミングRuby</a><br><br>        Paolo Perrotta <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A1%A6%A5%E1%A5%C7%A5%A3%A5%A2%A5%EF%A1%BC%A5%AF%A5%B9">アスキー・メディアワークス</a> 2010-08-28<br>        売り上げランキング : 94483<br><table style="border:none"><tbody><tr><td style="border:none;text-align:left;">                                                                                                       </td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://yomereba.com" rel="nofollow" target="_blank">ヨメレバ</a></td></tr></tbody></table></font></td>
</tr>
</tbody>
</table>
<p>Gold受けるには必読と言われている良書。<br>
2度目に読んだ時にようやく理解できました（苦笑）</p>
<h4>パーフェクト<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a></h4>
<table>
<thead>
<tr>
<th>col 1</th>
<th>col 2</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/"><img src="http://ecx.images-amazon.com/images/I/51K0jUf%2BiEL._SL160_.jpg" alt=""></a></td>
<td><font size="-1"><a href="http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/" rel="nofollow" target="_top">パーフェクトRuby (PERFECT SERIES 6)</a><br><br>        <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>サポーターズ,すがわら まさのり,寺田 玄太郎,三村 益隆,近藤 宇智朗,橋立 友宏,関口 亮一 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a> 2013-08-10<br>        売り上げランキング : 8780<br><table style="border:none"><tbody><tr><td style="border:none;text-align:left;">                                                                                                          </td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://yomereba.com" rel="nofollow" target="_blank">ヨメレバ</a></td></tr></tbody></table></font></td>
</tr>
</tbody>
</table>
<p>基本文法以外にもメタプログラミングや標準添付ライブラリの章など、色々と参考になります。<br>
章によって著者が変わっていくのでそのあたりも楽しめる。</p>
<h2>問題集</h2>
<h4>公式問題集</h4>
<p>上記公式テキストの後半に掲載されている問題集。基礎編も合わせて70問位あります。</p>
<h4>CTC模擬問題</h4>
<p>以下の2サイトで問題が解けるようになっています。<br>
たぶん、どちらも内容は同じなので好みのどちらかだけをやればOKだと思います。</p>
<ul>
<li><a href="http://www.school.ctc-g.co.jp/ruby/training_ruby_gold_01_10.html">CTC教育サービス</a><br>
スマホにも対応しているのがGood。</li>
<li><a href="http://jibun.atmarkit.co.jp/scenter/ittrain/121_cal.html">ITトレメ</a><br>
<a href="http://d.hatena.ne.jp/keyword/RSS">RSS</a>で購読できるので、毎日少しずつやりたい人にオススメ。</li>
</ul>
<h2>参考になる記事</h2>
<p>勉強のススメ方 + サンプルコードなどもあり、大変参考になります。<br>
<a href="http://qiita.com/nappa/items/9f2a06a81e223cb939ef">Ruby技術者認定試験Gold 必勝合格法 - Qiita</a><br>
<a href="http://coralreefs.hateblo.jp/entry/2013/05/09/170213">Ruby認定試験Goldに合格する３つのポイント！ - Coral Reefs</a><br>
<a href="http://d.hatena.ne.jp/rightgo09_ruby/20121226/p1">やったーRuby技術者認定Gold受かったよー＼(^o^)／ - PerlerのRuby日記</a></p>
<h2>その他のメモ</h2>
<p>手前味噌ですが以下の記事も参考まで！<br>
<a href="http://bakunyo.hatenablog.com/entry/2013/11/26/%E5%AE%9A%E6%95%B0%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%86%85%E5%AE%9A%E7%BE%A9">定数のメソッド内定義</a><br>
<a href="http://bakunyo.hatenablog.com/entry/2013/11/25/%E3%83%A6%E3%83%BC%E3%82%B6%E5%AE%9A%E7%BE%A9%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%3D%3D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89">ユーザ定義クラスの==メソッド</a><br>
<a href="http://bakunyo.hatenablog.com/entry/2013/10/25/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4">メソッドとブロックの戻り値</a><br>
<a href="http://bakunyo.hatenablog.com/entry/2013/10/23/Ruby%E5%88%B6%E5%BE%A1%E6%A7%8B%E9%80%A0%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%BE%E3%81%A8%E3%82%81">Ruby制御構造の戻り値まとめ</a><br>
<a href="http://bakunyo.hatenablog.com/entry/2013/10/23/%28Ruby%29floor%E3%81%A8truncate%E3%81%AE%E9%81%95%E3%81%84">floorとtruncateの違い</a><br>
<a href="http://bakunyo.hatenablog.com/entry/2013/08/26/%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92undef%E3%81%99%E3%82%8B">クラスメソッドをundefする</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[ユーザ定義クラスの==メソッド]]></title>
            <link>/2013/11/25/user_define_method/</link>
            <guid>/2013/11/25/user_define_method/</guid>
            <pubDate>Mon, 25 Nov 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>備忘用のメモ。</p>
<p>==メソッドはサブクラスで個別に定義されるべきとしており、デフォルトでObject#==メソッドはequal?メソッドと同じになっているようです。</p>
<p>ユーザ定義したクラスでは、素の状態では別オブジェクトで==メソッドを使うとfalseになります。</p>
<pre class="code" data-unlink="">
irb(main):001:0> class Foo
irb(main):002:1> end
=> nil
irb(main):003:0> Foo.new == Foo.new
=> false
</pre>]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[メソッドとブロックの戻り値]]></title>
            <link>/2013/10/25/return_value_of_method_and_block/</link>
            <guid>/2013/10/25/return_value_of_method_and_block/</guid>
            <pubDate>Fri, 25 Oct 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>メソッドとブロックの戻り値についてのメモ。</p>
<p>yieldの前に変数を置いて、ブロックの戻り値を受け取ることができます。<br>
ブロックの戻り値は、最後に評価された値です。</p>
<pre class="code" data-unlink="">
def my_method
  a = yield
  puts a + " received"
end

my_method do
  "block message"
end        # "block message received"と表示される
</pre>
<p>ブロック内でbreakを使うと、引数に指定した値がメソッドの戻り値となります。</p>
<pre class="code" data-unlink="">
def my_method
  a = yield
  puts a + " received"
end

my_method do
  break "block message"
end        # => "block message"
</pre>
<p>メソッド内でreturnを使い、戻り値を指定することができます。</p>
<pre class="code" data-unlink="">
def my_method
  a = yield
  if a == "block message"
    return "same"
  end
  puts a + " received"
end

my_method do
  "block message"
end        # => "same"
</pre>]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[(Ruby)floorとtruncateの違い]]></title>
            <link>/2013/10/23/floor_and_truncate/</link>
            <guid>/2013/10/23/floor_and_truncate/</guid>
            <pubDate>Wed, 23 Oct 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>Numeric#floorとNumeric#truncateの違い</h2>
<p><strong>floor</strong>は自身以下で最大の整数を返し、<strong>truncate</strong>は自身から0に近づくうち、最も近い整数を返します。<br>
正の値では結果は同じですが、負の値で結果が異なります。</p>
<pre class="code" data-unlink="">
C:\>irb
irb(main):001:0> 1.2.floor
=> 1
irb(main):002:0> 1.2.truncate
=> 1
irb(main):003:0> -1.2.floor
=> -2
irb(main):004:0> -1.2.truncate
=> -1
</pre>
<h2>公式リファレンス</h2>
<p><a href="http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/truncate.html">Numeric#truncate</a><br>
<a href="http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/floor.html">Numeric#floor</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Windowsでファイル名の一覧を取得する]]></title>
            <link>/2013/09/04/windows_files/</link>
            <guid>/2013/09/04/windows_files/</guid>
            <pubDate>Wed, 04 Sep 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>Windowsでファイル名の一覧を取得するコマンド</h2>
<p><a href="http://d.hatena.ne.jp/keyword/UNIX">UNIX</a>/<a href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>系のOSだと<code>ls</code>コマンドで出力できてしまうが、Windowsの<a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>でlsを実行すると日本語が文字化けすることが多く、困っていました。。<br>
で、Windowsコマンドはあまり使っていなかったのですが、調べてみると<code>dir</code>が使えることが分かりました。<br>
オプションは以下を使用。</p>
<table>
<thead>
<tr>
<th>option</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>/s</td>
<td>サブディレクトリを含める</td>
</tr>
<tr>
<td>/B</td>
<td>ファイル名のみ表示</td>
</tr>
</tbody>
</table>
<p>こんな感じで、出来ました〜</p>
<pre>
\Desktop\inbox>dir /B /s
\Desktop\inbox\file.xlsx
\Desktop\inbox\myfile.xls
\Desktop\inbox\shortcut
\Desktop\inbox\shortcut\bill.lnk
\Desktop\inbox\shortcut\ipmsg.lnk
\Desktop\inbox\shortcut\[sublime](http://d.hatena.ne.jp/keyword/sublime).lnk
</pre>
<h2>参考</h2>
<p><a href="http://itpro.nikkeibp.co.jp/article/Windows/20051025/223349/">Dir - ITPro Windowsコマンド集</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[複数ファイルのuploadができる「Uploadify」を使ってみた]]></title>
            <link>/2013/08/27/uploadify/</link>
            <guid>/2013/08/27/uploadify/</guid>
            <pubDate>Tue, 27 Aug 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>複数ファイルのアップロードに特化した「Uploadify」</h2>
<p><a href="http://d.hatena.ne.jp/keyword/jQuery">jQuery</a>のプラグインで、複数のファイルを選択しアップロードできる<a href="http://www.uploadify.com/">uploadify</a>というのを使ってみました。</p>
<p><a href="http://www.uploadify.com/"><img src="http://capture.heartrails.com/150x130/shadow?http://www.uploadify.com/" alt=""></a><a href="http://www.uploadify.com/">HTML5 File Upload Script, jQuery Multiple File Upload Plugin - Uploadify / UploadiFive - Uploadify</a><a href="http://b.hatena.ne.jp/entry/http://www.uploadify.com/"><img src="http://b.hatena.ne.jp/entry/image/http://www.uploadify.com/" alt=""></a></p>
<p><a href="http://www.uploadify.com/demos/">デモはこちら</a></p>
<h2>使い方</h2>
<p>以下の記事が大変参考になりました。</p>
<p><a href="http://www.tinybeans.net/blog/2010/04/13-121311.html">Ajax風にファイルをアップロードするjQueryプラグイン「Uploadify」の使い方 | かたつむりくんのWWW</a><a href="http://b.hatena.ne.jp/entry/http://www.tinybeans.net/blog/2010/04/13-121311.html"><img src="http://b.hatena.ne.jp/entry/image/http://www.tinybeans.net/blog/2010/04/13-121311.html" alt=""></a></p>
<p><a href="http://wataame.sumomo.ne.jp/archives/3370">ファイルをまとめてアップロードする jQuery のプラグイン「Uploadify」の使い方。 | Wataame Frog</a><a href="http://b.hatena.ne.jp/entry/http://wataame.sumomo.ne.jp/archives/3370"><img src="http://b.hatena.ne.jp/entry/image/http://wataame.sumomo.ne.jp/archives/3370" alt=""></a></p>
<h2>ファイル拡張子の限定</h2>
<p><strong>fileTypeExts</strong>というオプションで選択できるファイルの拡張子を限定できます。<br>
<a href="http://www.uploadify.com/documentation/uploadify/filetypeexts/">fileTypeExts - Uploadify Documentation</a></p>
<p><a href="http://www.uploadify.com/documentation/uploadify/filetypeexts/">デモはこちら</a></p>
<h2>指定外の拡張子が選ばれた場合の対応</h2>
<p>ファイル選択のダイアログで「ファイルの種類」→「すべてのファイル」としてしまうと、他の拡張子も選択できてしまいます(キューには追加されない)。<br>
選択後には、警告ダイアログが表示されます。<br>
メッセージの内容は</p>
<pre class="code" data-unlink="">
Some files were not added to the queue:
</pre>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130827/20130827203147.png" alt="f:id:bakunyo:20130827203147p:plain" title="f:id:bakunyo:20130827203147p:plain"></span></p>
<p>英語…ちょっと不親切なので、日本語に変えたいですね。<br>
このメッセージを変えるオプションがあっても良さそうなものですが、ありませんでした。<br>
そこで、<span style="color: #ff0000"><strong><a href="http://d.hatena.ne.jp/keyword/jquery">jquery</a>.uploadify.js</strong></span>を編集します。<br>
282行目と572行目にメッセージがありました。</p>
<pre class="code" data-unlink="">
...
  uploadQueue        : [], // The files currently to be uploaded
  errorMsg           : 'Some files were not added to the queue:'
};
...
</pre>
<pre class="code" data-unlink="">
...
  // Reset some queue info
  this.queueData.errorMsg       = 'Some files were not added to the queue:';
  this.queueData.filesReplaced  = 0;
...
</pre>
<p>上記2つを変更したら、メッセージを変えることができました！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[クラスメソッドをundefする]]></title>
            <link>/2013/08/26/undef_class_method/</link>
            <guid>/2013/08/26/undef_class_method/</guid>
            <pubDate>Mon, 26 Aug 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>でクラスメソッドをundefする時のメモ。<br>
まずは以下のようにクラスメソッドを定義し、undefする。</p>
<pre class="code" data-unlink="">
class A
  def A.msg
    puts "class method"
  end
end

class A
  undef A.msg
end
</pre>
<p><strong>結果、エラーになる。</strong><br>
<code>undef</code>メソッドはシンボルまたは識別子を受け付けるけど、<code>A.msg</code>だと識別子としては認識してくれないみたい。</p>
<h2>対策</h2>
<p>クラスを再オープンする。</p>
<pre class="code" data-unlink="">
class << A
  undef msg
end
</pre>
<p>これでundefできました。</p>
<p>ちなみに、undef_methodも同じようにクラスの再オープンをしないとエラーになる。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Sublime Text 3をインストールしてみた]]></title>
            <link>/2013/07/20/install_sublime3/</link>
            <guid>/2013/07/20/install_sublime3/</guid>
            <pubDate>Sat, 20 Jul 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3">以前インストールした</a><a href="http://d.hatena.ne.jp/keyword/Sublime">Sublime</a> Text 2をバージョンアップして<a href="http://d.hatena.ne.jp/keyword/Sublime">Sublime</a> Text 3をインストールしたので、はじめにやったことのメモです。<br>
以下の記事を参考にしました。<br>
<a href="http://futurismo.biz/archives/1572"><img src="http://capture.heartrails.com/150x130/shadow?http://futurismo.biz/archives/1572" alt=""></a><a href="http://futurismo.biz/archives/1572">Sublime Text3をWindowsに入れてみた！初めての導入と簡単なカスタマイズまとめ | Futurismo</a><a href="http://b.hatena.ne.jp/entry/http://futurismo.biz/archives/1572"><img src="http://b.hatena.ne.jp/entry/image/http://futurismo.biz/archives/1572" alt=""></a></p>
<h3>設定関連</h3>
<p>Preferences &gt; Settings - User</p>
<pre class="code" data-unlink="">
{
  // スペースやタブを表示する
  "draw_white_space": "all",

  // フォントサイズ
  "font_size": 10.2,

  // カーソル行をハイライトする
  "highlight_line": true,

  // 行間(上)
  "line_padding_top": 3,

  // 左側溝との間隔
  "margin": -3,

  // タブサイズ
  "tab_size": 2,

  // タブを押した時スペースに
  "translate_tabs_to_spaces": true,

  // 行末のスペースを保存時に削除
  "trim_trailing_white_space_on_save": true,

  // 横スクロールをなくす
  "word_wrap": true,

  // 無視するパッケージ
  "ignored_packages":
  [
    "Vintage"
  ],
}
</pre>
<h3>キー操作</h3>
<p>Preferences &gt; Key Bindings - User</p>
<pre class="code" data-unlink="">
[
  { "keys": ["alt+up"], "command": "swap_line_up" },
  { "keys": ["alt+down"], "command": "swap_line_down" },
]
</pre>
<p>ecllipseっぽく、<code>alt + ↑</code> <code>alt + ↓</code>で行移動できるようにしました＾＾</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Ruby認定技術者のSilverに受かったので諸々の報告]]></title>
            <link>/2013/07/11/ruby_silver/</link>
            <guid>/2013/07/11/ruby_silver/</guid>
            <pubDate>Thu, 11 Jul 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Ruby認定技術者のSilverに<span style="color: #ff0000"><strong>合格</strong></span>してきました！</p>
<p>得点は、92点（100点中）。</p>
<p>勉強の仕方については他のブログ等で多数解説されているので、ここではこれから勉強を始めるという方に役に立ちそうなメモを残しておきます。</p>
<p>Ruby公式資格教科書には、<strong><span style="color: #ff0000">実は沢山の訂正箇所があります。</span></strong></p>
<p>学習を始める際には、まず訂正箇所を一気に直しちゃいましょう！</p>
<p>正誤表は、以下で公開されています。</p>
<p><a href="http://gihyo.jp/book/2012/978-4-7741-5001-7/support">サポートページ - Ruby公式資格教科書 Ruby技術者認定試験Silver/Gold対応</a></p>
<p>また、サポートページで記載されてないけど、<span style="color: #ff0000">ここも誤りでは？</span>と思った箇所があるので以下に記載します。</p>
<h4>[1つ目]p.210 Hashクラスの説明</h4>
<p>ハッシュは連想配列とも呼ばれ、配列でのインデックスにあたるキーとして、数値以外の任意のRubyオブジェクトを利用できます。</p>
<p>これは誤りとはいえないかもしれませんが、何か違和感を覚えました。。</p>
<p>まるで、**<span style="color: #ff0000">連想配列は数値をキーに使用できない</span>**かのような言い回しに感じませんか？</p>
<p>僕の日本語読解能力が乏しいだけですかね？ そうかもしれないです。。。笑</p>
<h4>[2つ目]p.228 表5-4 ファイルをテストするメソッド</h4>
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>誤</td>
</tr>
<tr>
<td>正</td>
</tr>
</tbody>
</table>
<p>単なるスペルミスですね。</p>
<p>こちらはサポートページへお問い合わせ済です。</p>
<h4>実は破壊的なメソッド一覧</h4>
<p>公式問題集でかなりの割合を占める、破壊的・非破壊的メソッドの問題。<br>
<span style="color: #ff0000"><strong>！（エクスクラメーションマーク）</strong></span>が付いてればわかりやすいですが、無くても破壊的である場合が厄介です。</p>
<p>ということで、！ の付いていない破壊的メソッド、通称**<span style="color: #ff0000">「実は破壊的なメソッド」</span>**を一覧にしてみました。</p>
<h4>Stringクラス</h4>
<table>
<thead>
<tr>
<th style="text-align:left">実は破壊的なメソッド</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">insert</td>
</tr>
<tr>
<td style="text-align:left">replace</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
</tr>
<tr>
<td style="text-align:left">concat</td>
</tr>
<tr>
<td style="text-align:left">［］=</td>
</tr>
</tbody>
</table>
<h5>おまけ</h5>
<p>String#deleteは<strong>実は破壊的でない</strong></p>
<h4>Arrayクラス</h4>
<table>
<thead>
<tr>
<th style="text-align:left">実は破壊的なメソッド</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;&lt;</td>
</tr>
<tr>
<td style="text-align:left">push</td>
</tr>
<tr>
<td style="text-align:left">concat</td>
</tr>
<tr>
<td style="text-align:left">insert</td>
</tr>
<tr>
<td style="text-align:left">unshift</td>
</tr>
<tr>
<td style="text-align:left">[]=</td>
</tr>
<tr>
<td style="text-align:left">fill</td>
</tr>
<tr>
<td style="text-align:left">replace</td>
</tr>
<tr>
<td style="text-align:left">delete_at</td>
</tr>
<tr>
<td style="text-align:left">delete_if</td>
</tr>
<tr>
<td style="text-align:left">delete</td>
</tr>
<tr>
<td style="text-align:left">clear</td>
</tr>
<tr>
<td style="text-align:left">shift</td>
</tr>
<tr>
<td style="text-align:left">pop</td>
</tr>
</tbody>
</table>
<h4>Hashクラス</h4>
<table>
<thead>
<tr>
<th style="text-align:left">実は破壊的なメソッド</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">［］=</td>
</tr>
<tr>
<td style="text-align:left">delete</td>
</tr>
<tr>
<td style="text-align:left">delete_if</td>
</tr>
<tr>
<td style="text-align:left">replace</td>
</tr>
<tr>
<td style="text-align:left">shift</td>
</tr>
<tr>
<td style="text-align:left">update</td>
</tr>
<tr>
<td style="text-align:left">clear</td>
</tr>
</tbody>
</table>
<h4>おまけ</h4>
<p>実は破壊的じゃないメソッド merge、invert</p>
<h4>疑問…</h4>
<p>String#deleteは非破壊的なのに、Array#deleteは破壊的なんですよね。</p>
<p>このあたり、どう定義分けをしているのか気になって仕方ありません。</p>
<blockquote>
<p>2013.7.17 追記</p>
</blockquote>
<blockquote>
<p>破壊的メソッドの覚え方について以下の記事を参考にさせて頂いていました。</p>
</blockquote>
<blockquote>
<p><a href="http://jijixi.azito.com/gotow/widestudio/ruby_with_widestudio/1st_step_ruby_for_C_users.html">C 言語ユーザのための Ruby 入門</a></p>
<p>以下は引用。破壊的メソッドは、基本的に以下の3つのどれかだそうです。</p>
</blockquote>
<blockquote>
<hr>
<p>1.末尾に &quot;!&quot; が付いているメソッド</p>
</blockquote>
<blockquote>
<p>2.リスト的な構造を持つクラスにおいて特定の要素を追加・削除・変更するメソッド</p>
</blockquote>
<blockquote>
<p>3.オブジェクトそのものを置換えたり、消去したり、属性を変更したりするメソッド</p>
</blockquote>
<blockquote>
<hr>
<p>たしかに、こう考えるとわかりやすいですね！</p>
</blockquote>
<h4>Overrideできない演算子</h4>
<p>最後に、Overrideできない演算子をご紹介しておきます。</p>
<pre><code class="hljs ">= += ! not &amp;&amp; and || or :? ::
</code></pre>
<p>これだけ見るとただの記号の羅列にしか見えなくて覚えられそうにありませんが、<br>
以下のように分類すると記憶しやすいです。</p>
<ul>
<li>代入演算子（自己代入を含む）</li>
<li>論理演算子</li>
<li>三項演算子</li>
<li>::</li>
</ul>
<p>ということで、次はGold目指してがんばります！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[ミニツクの演習2を解いてみた。]]></title>
            <link>/2013/06/27/minitsuku2/</link>
            <guid>/2013/06/27/minitsuku2/</guid>
            <pubDate>Thu, 27 Jun 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://www.minituku.net/?locale=ja"><img src="http://capture.heartrails.com/150x130/shadow?http://www.minituku.net/?locale=ja" alt=""></a><a href="http://www.minituku.net/?locale=ja">ミニツク - Rubyのe-ラーニング研修システム</a><a href="http://b.hatena.ne.jp/entry/http://www.minituku.net/?locale=ja"><img src="http://b.hatena.ne.jp/entry/image/http://www.minituku.net/?locale=ja" alt=""></a></p>
<p><span style="color: #ff0000"><strong><a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>の<a href="http://d.hatena.ne.jp/keyword/e%A5%E9%A1%BC%A5%CB%A5%F3%A5%B0">eラーニング</a>システム</strong></span>である<a href="http://www.minituku.net/?locale=ja">ミニツク</a>が初級者にも分かりやすく内容も充実しています。<br>
自分のレベル感にぴったりと合っているので、最近は<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のお勉強は専らこれです。<br>
Matzさんのビデオ講義もあり、楽しく学習できます。<br>
<a href="http://www.minituku.net/courses/500228005/lessons/137422063/exercises/762982128?locale=ja">演習コースの2問目</a>を解いたのですが、ちょっと引っ掛かったのでメモを残しておきます。<br>
最初に、自分が作成したコードは以下です。<br>
所用時間は20分位でした（10分オーバーｗ）。</p>
<p>（見るからに酷いコードですね）<br>
まぁとりあえず動くし、OKとして解答を見ると、衝撃のコード量。</p>
<p>ここまで簡潔に書けるんですね…（感動）<br>
ただ、上記を実行してみるとエラーが発生。</p>
<pre class="code" data-unlink="">
minitk.rb:49:in `block in clever_print': undefined method `to_a' for "the":String (NoMethodError)
</pre>
<p>なるほど調べてみると、<strong><span style="color: #ff0000">String</span><strong>クラスの</strong><span style="color: #ff0000">to_a</span><strong>メソッドは無くなってしまったようですね(たぶん1.9以降で)。<br>
という事で、型を判別して</strong>String</strong>の場合はそのまま配列にpushすることにしました。</p>
<p>これで正常に動くようになりました。<br>
splat<a href="http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2">演算子</a>とか、case文の条件判断とか、大変勉強になります～！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[オプションの由来シリーズ - 正規表現]]></title>
            <link>/2013/06/25/regex_options/</link>
            <guid>/2013/06/25/regex_options/</guid>
            <pubDate>Tue, 25 Jun 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>コマンドやメソッドでよく見る<strong>1文字</strong>のオプション指定。例えば、こうゆうの。</p>
<pre class="code" data-unlink="">
tar zxvf
ps aux
</pre>
<p>とても便利だけど、何の略か分からないととても覚えにくいです。<br>
ということで、少しずつ由来を調べていくことにしました。<br>
調べても見つからない所は、想像で補います(間違えてたら教えてください)。</p>
<p>今回は、<a href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>のオプション。</p>
<h2><a href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>のオプション</h2>
<h4>アンカー</h4>
<table>
<thead>
<tr>
<th>オプション</th>
<th>機能</th>
<th>由来</th>
</tr>
</thead>
<tbody>
<tr>
<td>/b</td>
<td>単語境界</td>
<td><span style="color: #ff0000"><strong>Border</strong></span></td>
</tr>
</tbody>
</table>
<h4>マッチオプション</h4>
<table>
<thead>
<tr>
<th>オプション</th>
<th>機能</th>
<th>由来</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>大文字小文字の違いを無視する</td>
<td><span style="color: #ff0000"><strong>IgnoreCase</strong></span></td>
</tr>
<tr>
<td>g</td>
<td>マッチする場所すべてを対象にする</td>
<td><span style="color: #ff0000"><strong>GlobalMatch</strong></span></td>
</tr>
</tbody>
</table>
<h4>参考</h4>
<p><a href="http://doc.mas3.net/regexp/reference.html">手を動かしながら覚える正規表現＜リファレンス＞</a><br>
<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/yd1hzczs.aspx">正規表現のオプション - MSDN</a><br>
i =&gt; Ignoreのことだったのですね〜。知れば大したことないですが、知らないと何のことやら。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[crontab使い方まとめ。]]></title>
            <link>/2013/06/20/crontab/</link>
            <guid>/2013/06/20/crontab/</guid>
            <pubDate>Thu, 20 Jun 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130620/20130620214241.jpg" alt="f:id:bakunyo:20130620214241j:plain" title="f:id:bakunyo:20130620214241j:plain"></span></p>
<p><a href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>で定期的にコマンドを実行してくれる<span style="color: #ff0000"><strong>crontab</strong></span>の使い方をまとめてみました。</p>
<h2>まずはcrondが起動しているか確認</h2>
<p>デフォルトでは自動起動のはずですが、念の為crondが起動しているかを確認しておきましょう。<br>
ここで起動していなければ、その後の設定をいくらしても動いてくれることはありません:D</p>
<pre class="code" data-unlink="">
# /etc/rc.d/init.d/crond status
crond (pid  xxxx) を実行中...     // ちゃんと起動していますね！
</pre>
<h2>crontabファイルの設定</h2>
<p>crondが起動していることを確認できたら、crontabファイルの設定です。<br>
crontabファイルには「<strong><span style="color: #ff0000">この日付のこの時刻にこのコマンドを実行せよ</span></strong>」という命令が書き込まれています。<br>
crontabファイルは<code>/var/spool/cron/user</code>(ユーザー毎)に保存されていますが、<strong>基本的にcrontabファイルは直接編集せず、</strong><code>crontab</code>コマンドを使って編集するのが習わしです。<br>
以下はcrontabコマンドの説明です。</p>
<h4>crontabコマンド</h4>
<pre class="code" data-unlink="">
crontab [-u user] file
　または
crontab [-u user] [-e | -l | -r | -i]
</pre>
<h4>各オプションの説明</h4>
<table>
<thead>
<tr>
<th>オプション</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>userに対象となるユーザーを指定</td>
</tr>
<tr>
<td>e</td>
<td>エディタを起動し、crontabの内容を編集する</td>
</tr>
<tr>
<td>l</td>
<td>現在登録されている内容を表示する</td>
</tr>
<tr>
<td>r</td>
<td>現在登録されている内容を削除する</td>
</tr>
<tr>
<td>i</td>
<td>(rと併用して)削除する前に確認プロンプトを表示</td>
</tr>
</tbody>
</table>
<p>オプションでeを指定しようとしたら間違えてrを押してしまい、設定が全て削除されてしまった悲しい事例が各所で報告されています。</p>
<hr>
<p><a href="http://blog.cles.jp/item/3303">crontab -r とやってしまった時の対処法</a><a href="http://b.hatena.ne.jp/entry/http://blog.cles.jp/item/3303"><img src="http://b.hatena.ne.jp/entry/image/http://blog.cles.jp/item/3303" alt=""></a><br>
<a href="http://blog.kentarok.org/entry/20061030/1162206137">crontab -r を安全にする - delirious thoughts</a><a href="http://b.hatena.ne.jp/entry/http://blog.kentarok.org/entry/20061030/1162206137"><img src="http://b.hatena.ne.jp/entry/image/http://blog.kentarok.org/entry/20061030/1162206137" alt=""></a></p>
<hr>
<p>誤って削除してしまわないよう、eオプションは使わずに<strong>別ファイルにて管理した方が望ましい</strong>ようです。<br>
現在eオプションのみで管理しているなら、lオプションをリダイレクトして別ファイルに書き出しておきましょう。</p>
<pre class="code" data-unlink="">
# crontab -u user -l > ~/crontab.bk
</pre>
<h2>crontabファイルの書き方</h2>
<p>それではメインの、crontabファイルの書き方についてです。<br>
「<span style="color: #ff0000"><strong>この日付のこの時刻にこのコマンドを実行せよ</strong></span>」という命令を記述するために、以下の書式を用います。</p>
<pre class="code" data-unlink="">
分　時　日　月　曜日　＜コマンド＞
</pre>
<p>日付・時刻を表す5つのフィールドには、以下の値を設定できます。</p>
<table>
<thead>
<tr>
<th>フィールド</th>
<th>取りうる値</th>
</tr>
</thead>
<tbody>
<tr>
<td>分</td>
<td>0~59</td>
</tr>
<tr>
<td>時</td>
<td>0~23</td>
</tr>
<tr>
<td>日</td>
<td>1~31</td>
</tr>
<tr>
<td>月</td>
<td>1~12</td>
</tr>
<tr>
<td>曜日</td>
<td>0~7 (0と7が日曜日)</td>
</tr>
</tbody>
</table>
<h4>範囲指定</h4>
<p>各フィールドは<span style="color: #ff0000"><strong>-(ハイフン)</strong></span>でつなげて範囲指定することができます。<br>
以降、分フィールドを書き方の例として挙げていきます。</p>
<pre class="code" data-unlink="">
5-10    // 5分・6分・7分・8分・9分・10分に実行
</pre>
<p>このように、<code>5-10</code>と範囲指定することで5分~10分の間に毎分コマンドが実行されます。<br>
全範囲（分フィールドだと0~59）を範囲指定したい場合には<span style="color: #ff0000"><strong>*(アスタリスク)</strong></span>を使用します。</p>
<pre class="code" data-unlink="">
*   // 毎分実行
</pre>
<h4>リスト指定</h4>
<p>不連続な複数の値を指定したい時は、<span style="color: #ff0000"><strong>,(カンマ)</strong></span>で区切ってリスト指定することができます。</p>
<pre class="code" data-unlink="">
1,3,5   // 1分・3分・5分に実行
</pre>
<p>リスト指定の中に範囲指定を含めることも可能です。</p>
<pre class="code" data-unlink="">
1,3,5-10   // 1分・3分・5分・6分・7分・8分・9分・10分に実行
</pre>
<h4>間隔値指定</h4>
<p>「◯分間隔」などとしたい場合は、範囲指定と併せて間隔値を指定することができます。<br>
範囲指定の後に<span style="color: #ff0000"><strong>/(スラッシュ)</strong></span>をつづけ、その後に間隔値を指定します。</p>
<pre class="code" data-unlink="">
5-10/2   // 5分・7分・9分(5分~10分の間の2分間隔)に実行
*/5   // 5分おきに実行
</pre>
<h4>設定例</h4>
<p>これらの書き方を組み合わせて、「<span style="color: #ff0000"><strong>この日付のこの時刻に</strong></span>」の部分を指定します。<br>
以下、設定例です。<br>
ここでは仮に、usr/bin/cmdをコマンドとして実行するとします。</p>
<pre class="code" data-unlink="">
00 14 * * * /usr/bin/cmd      // 毎日14:00に実行
* * * * * /usr/bin/cmd        // 毎分実行
15,30 06 * * 2 /usr/bin/cmd   // 毎週火曜日の6:15と6:30に実行
05 23 * 3-5 4 /usr/bin/cmd    // 3~5月の毎週木曜日23:05に実行
</pre>
<p>といった具合です。</p>
<h4>ちょっと細かい話。</h4>
<p>cronは毎分このcrontabファイルをチェックし、**<span style="color: #ff0000">分・時・月が現在時刻と一致し、かつ日と曜日フィールドの2つのいずれかが現在時刻と一致すれば</span>**コマンドを実行します。<br>
この部分が少しややこしいのですが、cronは日フィールドと曜日フィールドの2つと見比べてコマンド実行するかを判断します。なので、この２つに関しては少し見方を変えてあげます。<br>
具体的には、日フィールドと曜日フィールドのそれぞれにおいて、<em>(アスタリスク)と</em>以外を指定した場合のどのような指定になるかを分けるとわかりやすいです。</p>
<pre><code>   | 日が*           | 日が*以外       
</code></pre>
<p>------ | ------------- | ------------<br>
曜日が*   | 毎日            | 日フィールドで指定した日<br>
曜日が*以外 | 曜日フィールドで指定した日 | いずれかに当てはまる日</p>
<p>設定例を以下に挙げます。</p>
<pre class="code" data-unlink="">
00 14 * * * /usr/bin/cmd         // 毎日14:00に実行
00 14 1,5 * * /usr/bin/cmd     // 毎月1日,5日の14:00に実行
00 14 * * 4 /usr/bin/cmd        // 毎週木曜日14:00に実行
00 14 1,5 * 4 /usr/bin/cmd    // 毎月1日,5日と毎週木曜日14:00に実行
</pre>
<p>といった感じになります。</p>
<p>他にも書くべきこととして**<a href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>の指定**などがあるのですが、疲れたのでここまで。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[git logで日報を書く]]></title>
            <link>/2013/05/25/daily_report_git/</link>
            <guid>/2013/05/25/daily_report_git/</guid>
            <pubDate>Sat, 25 May 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>いつも業務後に日報を書いてるんですけど、今日開発した部分を<span style="color: #ff0000"><strong>Git logを参照して</strong></span>ぱぱっとつくれないかな？ と思い調べてみたら、<strong>ありました。</strong></p>
<h2>やり方。</h2>
<p><code>--pretty</code>というオプションで、フォーマットを指定できるみたいです。という訳で、</p>
<pre class="code" data-unlink="">
C:\workspace\test>git log --pretty=format:"%cd %s"
Thu May 23 21:57:36 2013 +0900 change file ext from Text to Markdown
Thu May 23 21:56:18 2013 +0900 modify content
Thu May 23 21:54:39 2013 +0900 create README file
</pre>
<p>こんな感じでできました！</p>
<p>このやり方だと**<span style="color: #ff0000">1コミット1行</span>**になるので、どこからが本日分の作業だったのかが一目瞭然です！</p>
<p>ちなみに、<code>format:</code>の部分を省略して</p>
<pre class="code" data-unlink="">
git log --pretty="%cd %s"
</pre>
<p>でもうまく結果が表示されました〜！</p>
<h4>参考URL</h4>
<p><a href="http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%B1%A5%E6%AD%B4%E3%81%AE%E9%96%B2%E8%A6%A7">Git の基本 - コミット履歴の閲覧</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[そろそろ整理しておきたい、Gemコマンドの使い方]]></title>
            <link>/2013/05/23/gem_command/</link>
            <guid>/2013/05/23/gem_command/</guid>
            <pubDate>Thu, 23 May 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><strong><a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のパッケージ管理システム</strong>であるGemを使う機会も増えてきたので、そろそろコマンドをまとめておくことにしました。</p>
<h2><a href="http://d.hatena.ne.jp/keyword/RubyGems">RubyGems</a>とは?</h2>
<h4><a href="http://d.hatena.ne.jp/keyword/Wikipedia">Wikipedia</a>より引用</h4>
<blockquote>
<p><a href="http://d.hatena.ne.jp/keyword/RubyGems">RubyGems</a>は、<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>言語用のパッケージ管理システムであり、<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>のプログラムと（&quot;gem&quot; と呼ばれる）ライブラリの配布用標準フォーマットを提供している。gemを容易に管理でき、gemを配布するサーバの機能も持つ。<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>バージョン1.9以降では標準ライブラリの一部となっている。</p>
</blockquote>
<p>便利なGemパッケージが世の中には沢山配布されているので、有効に活用していきたいですね！<br>
Gemの公式マニュアルは以下になります。<br>
<a href="http://docs.rubygems.org/">RubyGems Manuals</a></p>
<p>それでは、よく使うGemコマンドを用途別にまとめていきます。</p>
<h2>Gemを探す</h2>
<p><code>list</code>または<code>search</code>は、ローカルもしくはリモートにあるGemパッケージを検索します。<br>
2つのコマンドはほぼ同じ動作をします。違いは以下の点です。</p>
<p><code>list</code>： **<span style="color: #ff0000">Gemパッケージ名の頭から文字列を指定して</span>**検索<br>
<code>search</code>： **<span style="color: #ff0000">Gemパッケージ名を<a href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>で</span>**検索</p>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem [list / search] [String] [options]</td>
<td>Stringで始まるGemを表示する</td>
</tr>
</tbody>
</table>
<p>以下のオプションを指定することができます。</p>
<table>
<thead>
<tr>
<th>オプション</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i, --[no-]installed</td>
<td>インストール済み[でない]Gemに限定する</td>
</tr>
<tr>
<td>-d, --[no-]details</td>
<td>詳細を併せて表示する</td>
</tr>
<tr>
<td>-l, --local</td>
<td>localを対象とする</td>
</tr>
<tr>
<td>-r, --remote</td>
<td>remoteを対象とする</td>
</tr>
<tr>
<td>-b, --both</td>
<td>local, remoteどちらも対象とする</td>
</tr>
</tbody>
</table>
<h5>デフォルトで指定されているオプション</h5>
<pre class="code" data-unlink="">
--local --no-details
</pre>
<p>デフォルトでは<span style="color: #ff0000">--local</span>が指定されているので、外部のを探したい時は<span style="color: #ff0000">-r</span>指定しないとダメですね〜。</p>
<p>また、インストールしてあったけどこれ何だっけ？ って時には</p>
<pre class="code" data-unlink="">
gem list GEMNAME -d
</pre>
<p>で中身を確認します。便利ですね！</p>
<p>なお、Gemパッケージは以下のWebサイトでも探すことができます。<br>
<a href="http://rubygems.org/">RubyGems.org</a><br>
<a href="https://www.ruby-toolbox.com/">The Ruby Toolbox</a></p>
<h2>Gemをインストールする</h2>
<p>Gemパッケージをインストールするコマンドです。</p>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem install [GEMNAME] [options]</td>
<td>localまたはremoteからGemパッケージをインストール</td>
</tr>
</tbody>
</table>
<p>以下のオプションを指定することができます。</p>
<table>
<thead>
<tr>
<th>オプション</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v, --version</td>
<td>バージョン指定 ex) -v &quot;= 1.0.0&quot;</td>
</tr>
<tr>
<td>--[no-]rdoc</td>
<td>Rdocドキュメントをダウンロードする[しない]</td>
</tr>
<tr>
<td>--[no-]ri</td>
<td>riドキュメントをダウンロードする[しない]</td>
</tr>
<tr>
<td>-l, --local</td>
<td>localからインストール</td>
</tr>
<tr>
<td>-r, --remote</td>
<td>remoteからインストール</td>
</tr>
<tr>
<td>-b, --both</td>
<td>local, remoteどちらからでも</td>
</tr>
</tbody>
</table>
<h5>デフォルトで指定されているオプション</h5>
<pre class="code" data-unlink="">
--both --version '>= 0' --rdoc --ri --no-force
--install-dir /my/gems/directory
</pre>
<p>個人的に使ったことが無いですが、ローカルからインストールする時は、<code>.gem</code>ファイルのある場所に移動してからコマンドを実行するみたいです。</p>
<h4>アンインストール</h4>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem uninstall [GEMNAME]</td>
<td>Gemパッケージをアンインストール</td>
</tr>
</tbody>
</table>
<p>versionが違うやつとかはややこしいのでこれで除いたりしますね。</p>
<h2>インストールしたGemファイル（の場所）を探す</h2>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem which [GEMNAME]</td>
<td>localにあるGEMNAMEパスを表示する</td>
</tr>
</tbody>
</table>
<p>gemファイルが置いてある場所の階層が深かったりするので、<strong>地味に便利</strong>です。<br>
ちなみに、</p>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem unpack [GEMNAME]</td>
<td>GEMFILEをカレントディレクトリにコピーする</td>
</tr>
</tbody>
</table>
<p>**<span style="color: #ff0000">Gemの中身を見たい時</span>**にはこちらの方が便利かもしれません。</p>
<h2>Gem自身の管理</h2>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem update --system</td>
<td>Gem自身をupdateする</td>
</tr>
<tr>
<td>gem -v</td>
<td>Gemのバージョンを表示する</td>
</tr>
</tbody>
</table>
<p>あんまりやったことが無いです（汗）</p>
<h2>ヘルプ</h2>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>gem help commands</td>
<td>使用できるコマンドの一覧を表示する</td>
</tr>
<tr>
<td>gem help [command]</td>
<td>commandのヘルプを表示する</td>
</tr>
<tr>
<td>gem server</td>
<td>サーバーを立ててgemのマニュアルを表示する</td>
</tr>
</tbody>
</table>
<p>分からなくなったらとりあえず<code>gem help command</code>です！</p>
<h2>ビルド関連</h2>
<p>自作したGemをビルドするときに使います。<br>
こちらはまだ試していないので、、いずれ更新します！</p>
<h4>参考になるサイト</h4>
<p><a href="http://ayaketan.hatenablog.com/entry/20111214/1323833813">RubyGemsの使い方 - ayaketanのプログラミング勉強日記</a><br>
<a href="http://docs.rubygems.org/">RubyGems Manuals</a><br>
<a href="http://yakinikunotare.boo.jp/orebase/index.php?Ruby%2FRubygems%BB%C8%A4%A4%CA%FD%A4%DE%A4%C8%A4%E1">Ruby/Rubygems使い方まとめ</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[1ライナーのコマンドを投稿するサイトが面白い]]></title>
            <link>/2013/05/18/one_liners/</link>
            <guid>/2013/05/18/one_liners/</guid>
            <pubDate>Sat, 18 May 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130518/20130518012220.png" alt="f:id:bakunyo:20130518012220p:plain" title="f:id:bakunyo:20130518012220p:plain"></span></p>
<p>コマンドラインで使える1ライナーを投稿して、相互に評価しあうサイト。<br>
ちょっとした空き時間につい見てしまいます。</p>
<p><a href="http://www.commandlinefu.com/commands/browse"><img src="http://capture.heartrails.com/150x130/shadow?http://www.commandlinefu.com/commands/browse" alt=""></a><a href="http://www.commandlinefu.com/commands/browse">All commands | commandlinefu.com</a><a href="http://b.hatena.ne.jp/entry/http://www.commandlinefu.com/commands/browse"><img src="http://b.hatena.ne.jp/entry/image/http://www.commandlinefu.com/commands/browse" alt=""></a></p>
<p>特に<a href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a>１ライナーとか勉強がてら見てます。例えば、</p>
<p><code>ruby -rdate -e 'puts DateTime.now'</code></p>
<p>で現在時刻を表示できる。<br>
<code>-rlibrary</code>でライブラリをrequireすることができるんですね〜！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[CSSのPosition指定(absolute)でハマったポイント]]></title>
            <link>/2013/05/16/css_position/</link>
            <guid>/2013/05/16/css_position/</guid>
            <pubDate>Thu, 16 May 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>のPositionで<code>absolute</code>指定とかしてたら何故か他の部分にまで影響してレイアウトが崩れたので何故なのか確認してみた。</p>
<h2>崩れた場合のサンプル</h2>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074651.png" alt="f:id:bakunyo:20130516074651p:plain" title="f:id:bakunyo:20130516074651p:plain"></span></p>
<p>枠だけグレーの四角がinput要素(text)で、それに対し右上に絶対位置指定で色付きグレーのdiv要素(something)を置いてる。<br>
ここまでは良いんだけど、その次に置きたい枠が緑色のdiv要素(next)が次じゃなくてinputに重なるようにして配置されてしまっている。</p>
<p>サンプルのソースは以下。</p>
<pre class="code" data-unlink="">
<!doctype html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>position test</title>
<style>
    .box {
      position: relative;
      width: 100px;
      height: 30px;
    }
    .text {
      position: absolute;
      width: 100px;
    }
    .something {
      position: absolute;
      right: -10px;
      top: -10px;
      width: 20px;
      height: 20px;
      background: #ccc;
    }
    .next {
      position: relative;
      width: 200px;
      height: 50px;
      border: 2px solid #2d5;
    }
</style>
</head>
<body>
<div class="box">
  <input type="text" class="text">
  <div class="something"></div>
</div>
<div class="next"></div>
</body>
</html>
</pre>
<h2>修正した</h2>
<p>色々試してみたんだけど、次のようにして解決できた。</p>
<pre class="code" data-unlink="">
.box {
    position: relative;
    width: 100px;
    height: 30px;   /* ←高さを指定する */
}
</pre>
<p><a href="http://d.hatena.ne.jp/keyword/chrome">chrome</a>の<a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D9%A5%ED%A5%C3%A5%D1">デベロッパ</a>ーツールで確認したところ、div要素(box)の高さが0となっていて、それを基準に配置していたので結果として重なってしまっていたということ。</p>
<p>結果もきちんと反映されました。</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074446.png" alt="f:id:bakunyo:20130516074446p:plain" title="f:id:bakunyo:20130516074446p:plain"></span></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[image_tagでソース指定でハマった]]></title>
            <link>/2013/04/25/source_of_image_tag/</link>
            <guid>/2013/04/25/source_of_image_tag/</guid>
            <pubDate>Thu, 25 Apr 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>でビューヘルパーの<code>stylesheet_link_tag</code>や<code>javascript_include_tag</code>とかって、ファイルの拡張子外して</p>
<pre class="code" data-unlink="">
<%= stylesheet_link_tag "application" %> # application.cssを読む
<%= javascript_include_tag "application" %> # application.jsを読む
</pre>
<p>って指定するけど、<code>image_tag</code>に関しては</p>
<pre class="code" data-unlink="">
<%= image_tag "img.png" %>
</pre>
<p>ってきちんと拡張子書いてあげないとだめ(画像の種類によって拡張子が違うから当たり前なんだけど)。</p>
<p>しかも、ブラウザのソース見ると/assets/img.pngみたいに<strong>imagesディレクトリが無い</strong>から余計混乱する(これは、AssetPipelineが処理してるのが原因っぽい)。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[RailsのActionMailerを使いGmail経由でメール送信する]]></title>
            <link>/2013/04/24/action_mailer/</link>
            <guid>/2013/04/24/action_mailer/</guid>
            <pubDate>Wed, 24 Apr 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>のバージョンは3.2。</p>
<p>以前は<a href="http://d.hatena.ne.jp/keyword/tls">tls</a>用のライブラリを自前で用意しなきゃいけなかったり大変だったみたいですが、現在はとても簡単になっています。</p>
<h3>1.設定</h3>
<p>まずは設定ファイルを編集します。</p>
<pre class="code" data-unlink="">
config/environments/development.rb

config.action_mailer.delivery_method = :smtp
config.action_mailer.raise_delivery_errors = true 
config.action_mailer.smtp_settings = {
  :address => 'smtp.gmail.com',
  :port => 587,
  :authentication => :login,
  :user_name => 'username', # ユーザー名
  :password => 'password' # パスワード
}
</pre>
<h3>2.Mailerを生成</h3>
<p><a href="http://d.hatena.ne.jp/keyword/rails">rails</a>コマンドで生成できます。</p>
<pre class="code" data-unlink="">
rails generate TestMailer sendmail
</pre>
<h3>3.Mailerを編集</h3>
<p>2で生成したMailerを編集します。</p>
<pre class="code" data-unlink="">
app/mailer/test_mailer.rb

# coding: utf-8
class TestMailer < ActionMailer::Base
  default from: "xxxxxx@gmail.com"

  # Subject can be set in your I18n file at config/locales/en.yml
  # with the following lookup:
  #
  #   en.test_mailer.sendmail.subject
  #
  def sendmail
    @greeting = "Hi"

    mail(:to => "xxxxxx@gmail.com",
   :subject => 'テスト送信')
  end
end
</pre>
<p>通常のコントローラーと同じように、テンプレート変数などをセット可能。</p>
<h3>4.メール本文を編集</h3>
<p>ビュー編集(erb)と同じです。2で自動的にerbファイルも生成されるはず。<br>
htmlにしたければ、拡張子を変更。</p>
<pre class="code" data-unlink="">
app/views/test_mailer/sendmail.text.erb

中身は自由に。
</pre>
<h3>5.Mailerを呼び出すControllerを定義</h3>
<p>MailerをどこかのControllerで呼び出してあげる必要があります。</p>
<pre class="code" data-unlink="">
app/controllers/hoge_controller.rb

def mail_send
  @mail = TestMailer.sendmail.deliver
  render :text => 'メール送信完了'
end
</pre>
<p><a href="http://d.hatena.ne.jp/keyword/sendmail">sendmail</a>メソッドはMail::Messageオブジェクトを返すだけなので、deliverメソッドを呼び出す必要があることに注意です。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[RailsはどこでCSSを指定するのか？]]></title>
            <link>/2013/04/20/css_in_rails/</link>
            <guid>/2013/04/20/css_in_rails/</guid>
            <pubDate>Sat, 20 Apr 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>最近<a href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>を触ることになり一通りTutorialを実践しているのだが、<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>をどこで指定した良いのか分からなかったので調べてみた。<br>
<a href="http://d.hatena.ne.jp/keyword/Rails">Rails</a>のバージョンは3.2。</p>
<h4>レイアウトテンプレート内の記述</h4>
<p>まず一般的に、レイアウトテンプレート内で<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>用のビューヘルパーを使う。<br>
デフォルトでは以下のようになっているはず。</p>
<pre class="code" data-unlink="">
app/views/layouts/application.html.erb
・・・・
　<%= stylesheet_link_tag    "application", :media => "all" %>
・・・・
</pre>
<p>stylesheet_link_tagの第1引数で、app/assets/stylesheets/からの<a href="http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%A5%D1%A5%B9">相対パス</a>で指定する。<br>
上記の場合、app/assets/stylesheets/application.<a href="http://d.hatena.ne.jp/keyword/css">css</a>が読み込まれる。</p>
<h4>デフォルトの<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>の記述</h4>
<p>次に、指定したapplication.<a href="http://d.hatena.ne.jp/keyword/css">css</a>を開いてみる。</p>
<pre class="code" data-unlink="">
app/assets/stylesheets/application.css

　/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the top of the
 * compiled file, but it's generally better to create a new file per style scope.
 *
 *= require_self
 *= require_tree .
 */
</pre>
<p>ここでファイルを開いて、コメントしか無いからといってスルーしないよう注意。</p>
<p>Rails 3.1から<strong>Asset pipeline</strong>という仕組みが導入されているらしい(詳しくは<a href="http://qa.atmarkit.co.jp/q/2269">railsはどこでcssを指定するのか？</a>)。</p>
<p>コメントの下の方にある</p>
<pre class="code" data-unlink="">
 *= require_self
 *= require_tree .
</pre>
<p>によって、さらに別の<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>を読み込むよう指定している。</p>
<p><code>require_tree</code>でstylesheets配下の<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>をすべて読みこむので、嫌な時はこれをはずしちゃえばいい。<br>
ちなみに、独自に作ったものや他所から持ってきた<a href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>は<code>require mystyle</code>などのように指定する。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[SQLでSELECTを書く時の順番]]></title>
            <link>/2013/04/15/order_of_select_sql/</link>
            <guid>/2013/04/15/order_of_select_sql/</guid>
            <pubDate>Mon, 15 Apr 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>SELECT文を書いてる時に下記のメモを見ながらやったら超捗ったので、残しておく。</p>
<p>上から順番に（もちろん必要なものだけ）書いていく。</p>
<ul>
<li>SELECT</li>
<li>FROM</li>
<li>WHERE</li>
<li>GROUP BY</li>
<li>HAVING</li>
<li>ORDER BY</li>
</ul>
<p>ちなみに、サブクエリはFROM句とWHERE句の中に書く。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[CakePHPでメールを送ったら文字化けした時の対処法。]]></title>
            <link>/2013/04/03/cakephp_charcode/</link>
            <guid>/2013/04/03/cakephp_charcode/</guid>
            <pubDate>Wed, 03 Apr 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3>[環境]</h3>
<p><a href="http://d.hatena.ne.jp/keyword/CakePHP">CakePHP</a> 1.3</p>
<h3>[状況]</h3>
<p>Email<a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント</a>を使用して、テンプレートを使用せずにシンプルなテキストでメールを送信したら文字化けが発生。</p>
<h3>[対処]</h3>
<p>まずは<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>のセットを<a href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a>に設定。</p>
<p><code>$this-&gt;Email-&gt;charset = 'utf-8';</code></p>
<p>これでも、一部直らない部分がある。</p>
<p>どうやら、1行の文字数が長い時に自動改行され、そこで文字化けが発生するらしい。</p>
<p>自動改行されない位に1行の文字数をそもそも長くしておく。</p>
<p><code>$this-&gt;Email-&gt;lineLength = 1024;</code></p>
<p>これで解決しました。</p>
<h3>[参考記事]</h3>
<p><a href="http://d.hatena.ne.jp/s-yo-ko/20101116">http://d.hatena.ne.jp/s-yo-ko/20101116</a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Sublime Text 2のBracketHighlighterをちょこっとカスタマイズする]]></title>
            <link>/2013/02/24/sublime_bracket_highlighter/</link>
            <guid>/2013/02/24/sublime_bracket_highlighter/</guid>
            <pubDate>Sun, 24 Feb 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234202.png" alt="f:id:bakunyo:20130223234202p:plain" title="f:id:bakunyo:20130223234202p:plain"></span></p>
<p><a href="http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3">前回の記事</a>で導入した<a href="http://d.hatena.ne.jp/keyword/Sublime">Sublime</a> Text 2。</p>
<p>非常に使い勝手が良いのですが、BracketHighlighterというプラグインで１つ気になることが。。</p>
<h2>見にくい。</h2>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234212.png" alt="f:id:bakunyo:20130223234212p:plain" title="f:id:bakunyo:20130223234212p:plain"></span></p>
<p>BracketHighlighterはタグやクォーテーションマークなどの開始と終了をハイライトしてくれるのですが、特にタグ以外がすごく見にくい。</p>
<p>上記の画像のように、ハイライトの線が太いためにカーソルの位置が見えなくなってしまうのですよね（ちなみにカーソルの位置は２つ目のダブルクォーテーションの後にあります）</p>
<h2>カスタマイズしてみる。</h2>
<p>Preferences &gt; Package Settings &gt; BracketHighlighter &gt; Settings - Default を開く。</p>
<p>すると中盤に、以下の記述が出てくる。</p>
<pre><code>// Outline? (solid|outline|underline|none)
&quot;quote_style&quot; : &quot;solid&quot;,
&quot;curly_style&quot; : &quot;solid&quot;,
&quot;round_style&quot; : &quot;solid&quot;,
&quot;square_style&quot;: &quot;solid&quot;,
&quot;angle_style&quot; : &quot;solid&quot;,
&quot;tag_style&quot;   : &quot;outline&quot;,
</code></pre>
<p>ここでハイライトのスタイルを決めてるみたいですね。</p>
<p>各キーワードはそれぞれ、</p>
<ul>
<li>quote ... &quot;&quot;</li>
<li>curly ... {}</li>
<li>round ... ()</li>
<li>square ... []</li>
<li>angle ... &lt;&gt;</li>
</ul>
<p>に対応していると思われます（多分...）。</p>
<p>**&quot;solid&quot;<strong>が例の太いハイライトなので、これを</strong>&quot;underline&quot;**に変更します。</p>
<p>ちなみに、Defaultの設定を残しておきたい場合は上記の部分をまるまるコピーしてUserの方にセッティングする。</p>
<pre><code>// Outline? (solid|outline|underline|none)
&quot;quote_style&quot; : &quot;underline&quot;,
&quot;curly_style&quot; : &quot;underline&quot;,
&quot;round_style&quot; : &quot;underline&quot;,
&quot;square_style&quot;: &quot;underline&quot;,
&quot;angle_style&quot; : &quot;underline&quot;,
&quot;tag_style&quot;   : &quot;outline&quot;,
</code></pre>
<p>**&quot;underline&quot;**にした場合は以下のようにハイライトされます。</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234216.png" alt="f:id:bakunyo:20130223234216p:plain" title="f:id:bakunyo:20130223234216p:plain"></span></p>
<p>少し地味ですが、ちゃんとカーソルの位置が見えるようになりました！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Gmailのアーカイブ機能と個人的によく使うショートカット]]></title>
            <link>/2013/02/21/archive_gmail/</link>
            <guid>/2013/02/21/archive_gmail/</guid>
            <pubDate>Thu, 21 Feb 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130206/20130206230926.png" alt="f:id:bakunyo:20130206230926p:plain" title="f:id:bakunyo:20130206230926p:plain"></span></p>
<p><a href="http://d.hatena.ne.jp/keyword/WEB%A5%E1%A1%BC%A5%EB">WEBメール</a>として不動の人気を誇る**<a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>**。</p>
<p>その人気の主な理由が、**&quot;アーカイブという概念&quot;<strong>と</strong>&quot;豊富なショートカットキー&quot;**にあると思います。</p>
<p>僕は<a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>を使い始めて６年位経ちますが、もはや他のメールサービスに乗り換える気が全く起きません。</p>
<p>一時期は1日600件ほどのメールを<a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>でさばいていましたが、メールに追われるという感覚は無かったです。</p>
<p>ということで、今回は僕なりの<a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>活用術を紹介します。</p>
<h2>アーカイブとは？</h2>
<p>アーカイブを説明するためには**「受信BOX」<strong>と</strong>「すべてのメール」**について説明が必要でしょう。</p>
<p>**「受信BOX」**はいわば玄関のポストのようなもの届いたメールがまず受信BOXに入ってきます。</p>
<p>ポストに届いたメールに対して返信するか捨てるのか、何らかの処理を行います。</p>
<p>何らかの&quot;すべき処理&quot;が済んだら、<strong>アーカイブ</strong>を行います。</p>
<p><strong>アーカイブ</strong>とは**「受信BOX」<strong>から取り除くこと。ただし、<strong>アーカイブ</strong>は</strong>削除**ではないという所がミソです。</p>
<p>受信BOXからアーカイブされたメールは、**「すべてのメール」**にきちんと保管されている為、後から検索などができます。</p>
<p>つまり、何らかの処理を行わなければならないメール<strong>だけ</strong>を受信BOXに残しておき、それ以外はアーカイブしておけば良いわけです。</p>
<h2>容量は大丈夫なの？</h2>
<p>削除せずにすべて残しておくわけですから、容量が心配になります。</p>
<p>しかし、そこは<a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>さんの素晴らしいところで、なんと**10GB(!!)**もの容量を用意してくれています。</p>
<p>何か以前よりも増えたような…</p>
<p>添付ファイル付きメールを毎日、大量に受け取っていない限り、この容量で足りなくなることはまずありません。</p>
<p>という訳で、この<strong>アーカイブ</strong>システム。使っていくほどに良さが分かってきます！</p>
<h2>ショートカットキーを使ってみる</h2>
<p><a href="http://d.hatena.ne.jp/keyword/Gmail">Gmail</a>でよく使うショートカットキーを列挙します。<br>
（ショートカットキーを有効にするために、設定の変更が必要です！）<br>
右２列は、メールを一覧している画面と個別のメールを開いてる時で有効かどうかです。</p>
<table>
<thead>
<tr>
<th style="text-align:center">キー</th>
<th>内容</th>
<th style="text-align:center">メール一覧</th>
<th>個別メール</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ｊ</td>
<td>次のメールへ</td>
<td style="text-align:center">◯</td>
<td>◯</td>
</tr>
<tr>
<td style="text-align:center">ｋ</td>
<td>前のメールへ</td>
<td style="text-align:center">◯</td>
<td>◯</td>
</tr>
<tr>
<td style="text-align:center">ｏ</td>
<td>メールを開く</td>
<td style="text-align:center">◯</td>
<td>-</td>
</tr>
<tr>
<td style="text-align:center">ｘ</td>
<td>メールを選択する</td>
<td style="text-align:center">◯</td>
<td>-</td>
</tr>
<tr>
<td style="text-align:center">Shift +ｉ</td>
<td>選択したメールを既読にする</td>
<td style="text-align:center">◯</td>
<td>-</td>
</tr>
<tr>
<td style="text-align:center">ｅ</td>
<td>アーカイブする</td>
<td style="text-align:center">◯</td>
<td>◯</td>
</tr>
</tbody>
</table>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[改行コードを知る]]></title>
            <link>/2013/01/31/linefeeds/</link>
            <guid>/2013/01/31/linefeeds/</guid>
            <pubDate>Thu, 31 Jan 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130131/20130131070720.jpg" alt="f:id:bakunyo:20130131070720j:plain" title="f:id:bakunyo:20130131070720j:plain"></span></p>
<p>photo credit: <a href="http://www.flickr.com/photos/olivander/999389454/">Olivander</a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by-nc-sa/2.0/">cc</a></p>
<h2>改行コードって？</h2>
<p><a href="http://ja.wikipedia.org/wiki/%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89">改行コード - Wikipedia</a></p>
<pre class="code" data-unlink="">
 改行コード とは、ワードプロセッサ（ワープロ専用機）やコンピュータなどにおいて、改行を表す制御文字である。日本では「改行コード」と総称する事が一般的なため、本項目では、キャリッジリターン(CR)とラインフィード(LF)の両方について記載する。
</pre>
<p>ちなみに<strong>改行</strong>とは、<strong>ひとつ下の行の行頭にカーソルを移すこと。</strong><br>
システムによって改行を表すコードが異なることがある為、いくつかの問題が発生してしまうことがあるんですね〜。。</p>
<h2>CRとLFって？</h2>
<p>改行コードは主に、CR(Carrige Return：行頭復帰)とLF(Line Feed：改行)の2種類あるようです。<br>
どちらも、語源はタイプライターに由来します（<a href="http://d.hatena.ne.jp/keyword/Wikipedia">Wikipedia</a>参照）。</p>
<h2>OS間の違い</h2>
<p>OS間で使われる改行コードが異なるようです（！）。<br>
Windows　→　CR+LF<br>
<a href="http://d.hatena.ne.jp/keyword/Mac%20OS">Mac OS</a>   →　CR<br>
<a href="http://d.hatena.ne.jp/keyword/UNIX">UNIX</a>　　 →　LF</p>
<p>テキストデータを扱う時は、<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>だけでなく改行コードにも気をつけましょう！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[会社でコーヒーミーティング@KDDIウェブコミュニケーションズに参加してきました]]></title>
            <link>/2013/01/18/coffee_meeting/</link>
            <guid>/2013/01/18/coffee_meeting/</guid>
            <pubDate>Fri, 18 Jan 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>コーヒーミーティングの会社見学イベントに参加してきました。</h2>
<p>1月16日（水）<strong>@<a href="http://d.hatena.ne.jp/keyword/KDDI">KDDI</a>ウェブコミュニケーションズで行われた会社見学イベント</strong>に参加してきました！</p>
<p><a href="http://coffeemeeting.jp/events/20130116">2013年1月16日 会社でコーヒーミーティング@KDDIウェブコミュニケーションズ | CoffeeMeeting[コーヒーミーティング]</a><a href="http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/events/20130116"><img src="http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/events/20130116" alt=""></a></p>
<p>普段は1対1で対話するコーヒーミーティングですが、今回は複数人（40人程度）が参加し、非常に新鮮な感じがしました。</p>
<h2>コーヒーミーティングって？</h2>
<p>そもそもの話ですが、CoffeeMeetingを知らない方向けにご紹介です！</p>
<pre class="code" data-unlink="">
＜コンセプト＞
CoffeeMeeting（コーヒーミーティング）は、コーヒー1杯を飲む時間を一緒に過ごしたい人と出会うためのサービスです。使い方はカンタン。あなたがお茶したい空き時間を登録し、ほかのユーザーからの申し込みを待つだけ。ちょっとした空き時間に気軽にお茶してみましょう！
</pre>
<p><a href="http://coffeemeeting.jp/">CoffeeMeeting[コーヒーミーティング]</a><a href="http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/"><img src="http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/" alt=""></a></p>
<h2>イベントの大まかな流れ</h2>
<p>当日は19:30に始まり、最後は少し時間押して21時過ぎに終了しました。大まかな流れと時間配分は、こんな感じです。</p>
<p>(1) 社員さんとコーヒーミーティング（30分位）<br>
(2) エイプリルフール企画を考えよう！（１時間位）<br>
(3) 豪華景品が当たる！ クイズ大会（15分位）</p>
<h2>感想など</h2>
<p>当然、イベントの進行に沿って事が運んでいくので、普段のコーヒーミーティングのようなゆったりした会話はあまり出来ませんでした…。<br>
ですが、多くの方と触れ合い、さらにそこから繋がりを持っていけるという意味で、とても有意義な時間を過ごすことができました！<br>
コーヒーミーティング代表の<a href="http://coffeemeeting.jp/daisaku">daisaku</a>さんにも初めてご挨拶することができ、非常に気持ちが昂ぶりました。<br>
daisakuさん他、イベントを企画運営してくださった<a href="http://d.hatena.ne.jp/keyword/KDDI">KDDI</a>ウェブコミュニケーションズの皆様、ありがとうございました！ ！</p>
<p>最後に、クイズ大会で空気を読まずに勝ちとってきたノベルティ・ステッカーの写真がこちらになります。</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130118/20130118075047.jpg" alt="f:id:bakunyo:20130118075047j:plain" title="f:id:bakunyo:20130118075047j:plain"></span></p>
<p>皆さんも、レッツ・コーヒーミーティング！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[文字コードについての２つの概念]]></title>
            <link>/2013/01/16/char_code/</link>
            <guid>/2013/01/16/char_code/</guid>
            <pubDate>Wed, 16 Jan 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><a href="http://bakunyo.hatenablog.com/entry/2012/12/27/IT%E3%83%91%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E8%A9%A6%E9%A8%93_%E5%8D%98%E8%AA%9Epart1">以前の投稿</a>からしばらく<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>について気になっていたので、少し整理してみました。</p>
<h2><a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>って？</h2>
<pre class="code" data-unlink="">
文字コード（もじコード）はコンピュータ上で文字を利用するために各文字に割り当てられるバイト表現。もしくは、バイト表現と文字の対応関係（文字コード体系）のことを指して「文字コード」と呼ぶことも多い。
</pre>
<p><a href="http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89">文字コード - Wikipedia</a><a href="http://b.hatena.ne.jp/entry/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89"><img src="http://b.hatena.ne.jp/entry/image/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89" alt=""></a></p>
<p>## なぜ、ややこしいのか</p>
<p><a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>に関して、<strong>（符号化）<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7">文字集合</a><strong>と</strong>（文字）符号化方式</strong>という区別がなされることがあるそうです。<br>
**（符号化）<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7">文字集合</a>**とは読んで字の如く、割り当ての対象にしている文字の集合のこと。<br>
<strong>「全てのひらがな」<strong>や</strong>「全てのひらがなとカタカナと漢字」<strong>みたいなものですね。<br>
一方で、</strong>（文字）符号化方式</strong>とは<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7">文字集合</a>をコンピュタが利用できるバイト列にどう変換するのか、という決め事。<br>
「あ」は001、「い」は010、「う」は011みたいに決まっていくんですかね。</p>
<p>上に挙げた投稿で「<a href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a>は<a href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a>の一種なのかな？」と書きましたが、まさにこの２つの区別が出来ていなかった事が混乱の原因でした。一種なのではなく、それぞれ、**「<a href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> = （符号化）<a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7">文字集合</a>」「<a href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> = （文字）符号化方式」**という対応関係になっていたのですね。</p>
<h2>参考記事</h2>
<p>こちらのブログを参考にさせていただきました。<br>
<a href="http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome">UnicodeとUTF-8の違いは？ - 自分的まとめ - Humanity</a><a href="http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome"><img src="http://b.hatena.ne.jp/entry/image/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome" alt=""></a></p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[Javaエンジニア研修スタート]]></title>
            <link>/2013/01/09/learning_java/</link>
            <guid>/2013/01/09/learning_java/</guid>
            <pubDate>Wed, 09 Jan 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>本日から研修スタート</h2>
<p>本日(1/8)から、新たな会社で<a href="http://d.hatena.ne.jp/keyword/Java">Java</a>エンジニアの研修がスタートした。<br>
年始ということもあって同期もそこそこいるんだけど、緊張の面持ちが伝わってくる。</p>
<h2>訪れるしあわせな時間</h2>
<p>これまでは勤務時間が終わって自宅に帰ってからの独学を続けていた。なので、日中の時間をおおいに使って技術の勉強に専念できるって、本当に幸せです。</p>
<h2>自宅の環境も構築</h2>
<p>自宅でも時々勉強する必要あるかな〜と思い、先ほどノートPC（OS：<a href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a>）に<a href="http://d.hatena.ne.jp/keyword/Eclipse">Eclipse</a>をインストール。このPCは元々新品で買ってWin7が入っていたんだけど、購入直後にわざわざ追い出して<a href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a>をインストールしました（何やってんだ俺）。</p>
<h2>今後も続きます。</h2>
<p>会社での研修は<a href="http://d.hatena.ne.jp/keyword/Java">Java</a>だけど、それに限らず色々なことに取り組んでいきたいなぁと思います！</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
        <item>
            <title><![CDATA[後で読むサービス「Pocket」の残り件数を確認する方法]]></title>
            <link>/2013/01/06/rest_of_pocket/</link>
            <guid>/2013/01/06/rest_of_pocket/</guid>
            <pubDate>Sun, 06 Jan 2013 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095333.png" alt="f:id:bakunyo:20130106095333p:plain" title="f:id:bakunyo:20130106095333p:plain"></span></p>
<h2><a href="http://d.hatena.ne.jp/keyword/RSS">RSS</a>処理ツールとしてPocketは超便利。</h2>
<p>GoogleRSSで気になった記事を一旦<a href="getpocket.com/">Pocket</a>に入れておいて、後で読めるようにしておいてる。やり方はこちらの記事が参考になります。</p>
<p><a href="http://kazoo1837.blog23.fc2.com/blog-entry-355.html">スキマ時間を活用したRSS処理法。記事はPocketにまとめてからシェア。 / 旧:あなたのスイッチを押すブログ</a><a href="http://b.hatena.ne.jp/entry/http://kazoo1837.blog23.fc2.com/blog-entry-355.html"><img src="http://b.hatena.ne.jp/entry/image/http://kazoo1837.blog23.fc2.com/blog-entry-355.html" alt=""></a></p>
<p>でも、どんどんPocketに投入しているといつの間にか記事が溜まりに溜まって消化不良になってしまう。。<br>
PocketでまだArchiveしてない記事があと何件あるのか、気になりますよねぇ！ ？</p>
<h2>PC版ではHomeの残件数が見れない。</h2>
<p>ええ。残念ながら、見れないんです。<br>
<a href="getpocket.com/">Pocket</a></p>
<h2><a href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a>版では見れる。</h2>
<p>できるかなーと思って試してみたら、できたんです。<br>
Optionで設定する箇所があったので紹介しておきます。<br>
まずはOptionをタッチして…</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095952.png" alt="f:id:bakunyo:20130106095952p:plain" title="f:id:bakunyo:20130106095952p:plain"></span></p>
<p>LISTの下の「Show App Badge Count」をONにする</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100002.png" alt="f:id:bakunyo:20130106100002p:plain" title="f:id:bakunyo:20130106100002p:plain"></span></p>
<p>結果、Badgeに残り件数が表示されるようになりました！</p>
<p><span itemscope="" itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100020.png" alt="f:id:bakunyo:20130106100020p:plain" title="f:id:bakunyo:20130106100020p:plain"></span></p>
<p>残り件数が分かるようになって、処理するまでの時間が読めるようになりました。</p>
]]></content:encoded>
            <author>izuta.hiroyuki@gmail.com (Izuta Hiroyuki)</author>
        </item>
    </channel>
</rss>