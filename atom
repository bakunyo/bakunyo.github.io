<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.bakunyo.com/</id>
    <title>BAKUNOTE</title>
    <updated>2018-01-14T13:20:37Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Izuta Hiroyuki</name>
        <email>izuta.hiroyuki@gmail.com</email>
        <uri>https://github.com/bakunyo</uri>
    </author>
    <link rel="alternate" href="https://blog.bakunyo.com/"/>
    <link rel="self" href="https://blog.bakunyo.com/atom"/>
    <subtitle>bakunyoの技術ノート。ruby, javascriptに関することやその他日々の記録です。</subtitle>
    <logo>https://blog.bakunyo.com/bakunyo.png</logo>
    <icon>https://blog.bakunyo.com/favicon.ico</icon>
    <rights>All rights reserved 2013, bakunyo</rights>
    <entry>
        <title type="html"><![CDATA[Amazpn VPCで踏み台経由でログインできるネットワーク環境をつくってみる]]></title>
        <id>https://blog.bakunyo.com/2017/12/17/amazon-vpc/</id>
        <link href="https://blog.bakunyo.com/2017/12/17/amazon-vpc/">
        </link>
        <updated>2017-12-17T04:30:00Z</updated>
        <content type="html"><![CDATA[&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;個人開発で使える本番サーバー環境が欲しかったのと、ちょうど仕事でも活かせそうだったので、自分でAWSのネットワーク環境を作ってみました。&lt;/p&gt;
&lt;h1&gt;全体像&lt;/h1&gt;
&lt;p&gt;用意したいサーバーは2つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;踏み台
&lt;ul&gt;
&lt;li&gt;sshでログインし、さらにsshで本番サーバーへログインするためのもの&lt;/li&gt;
&lt;li&gt;sshログイン用のport以外は開けない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本番サーバー
&lt;ul&gt;
&lt;li&gt;踏み台サーバーからのみsshでログイン可能&lt;/li&gt;
&lt;li&gt;(Webサーバーを予定してるけど、今回はhttpのportを開けたりとかしない)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;VPCの作成&lt;/h1&gt;
&lt;p&gt;AWSで管理する仮想ネットワークを定義します。&lt;/p&gt;
&lt;h4&gt;AWSマネジメントコンソールからサービス＞VPCを選択&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/1-dashboard.png&quot; alt=&quot;vpc-dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;既にデフォルトのVPCが定義されていますが、今回は使わずに削除します。&lt;/p&gt;
&lt;h4&gt;「VPCの作成」を選択&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/2-create-vpc.png&quot; alt=&quot;vpc-create&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Name&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;vpc-sample&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IPv4 CIDR ブロック&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;192.168.0.0/16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;CIDR ブロックは、仮想ネットワーク内のIPアドレスの範囲を指定します。&lt;br&gt;
今回は &lt;code&gt;192.168.0.0&lt;/code&gt; ~ &lt;code&gt;192.168.255.255&lt;/code&gt; で 65,536 個のIPアドレスを持つことになります。&lt;br&gt;
&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonVPC/latest/UserGuide/VPC_Subnets.html&quot;&gt;VPC とサブネット&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CIDRブロックは 16~28の間で指定する必要があるようです。&lt;/p&gt;
&lt;h1&gt;サブネットの作成&lt;/h1&gt;
&lt;p&gt;上で作成したVPCの中でネットワークを小分けにします。&lt;/p&gt;
&lt;h4&gt;VPCダッシュボードの中から「サブネット」を選択&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/3-subnet-dashboard.png&quot; alt=&quot;subnet-dashboard&quot;&gt;&lt;br&gt;
「サブネットの作成」を選択し、以下2つのサブネットを作成しました。&lt;/p&gt;
&lt;h4&gt;1つ目&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;名前タグ&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subnet-sample-public&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;VPC&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;{作成したvpc-sampleがデフォルトで選択されている}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;アベイラビリティゾーン&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ap-northeast-1a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IPv4 CIDR ブロック&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;192.168.1.0/24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;2つ目&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;名前タグ&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subnet-sample-private&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;VPC&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;{作成したvpc-sampleがデフォルトで選択されている}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;アベイラビリティゾーン&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ap-northeast-1a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;IPv4 CIDR ブロック&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;192.168.2.0/24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1つ目が踏み台用、2つ目が本番用という想定です。&lt;br&gt;
それぞれ256個ずつIPアドレスを持つことになります。&lt;/p&gt;
&lt;p&gt;アベイラビリティゾーンは東京では &lt;code&gt;ap-northeact-1a&lt;/code&gt; &lt;code&gt;ap-northeast-1c&lt;/code&gt; の2択ですが、どちらが具体的にどこの場所、というのはなく、仮想ネットワーク毎にAWS側で振り分けられるそうです。&lt;br&gt;
なので、 「 &lt;code&gt;1a&lt;/code&gt; は沢山の人が選んで混んでそうだからa &lt;code&gt;1c&lt;/code&gt; にしよう」みたいなことは意味がないらしいです。&lt;br&gt;
情報元はどこかのネット記事で読んだのですがどこかへ行ってしまいました。。&lt;/p&gt;
&lt;h1&gt;インターネットゲートウェイの作成&lt;/h1&gt;
&lt;p&gt;仮想ネットワークをインターネットと繋げる為に、インターネットゲートウェイを作成します。&lt;br&gt;
VPCダッシュボードからインターネットゲートウェイ＞インターネットゲートウェイの作成を選択&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/10-create-igw.png&quot; alt=&quot;create-igw&quot;&gt;&lt;br&gt;
名前は &lt;code&gt;igw-sample&lt;/code&gt; としておきます。&lt;/p&gt;
&lt;h1&gt;ルートテーブルの作成&lt;/h1&gt;
&lt;p&gt;上で作成したインターネットゲートウェイを紐付けるためのルートテーブルを作成します。&lt;br&gt;
ルートテーブル＞ルートテーブルの作成を選択し、 &lt;code&gt;rtb-sample&lt;/code&gt; を指定します。&lt;br&gt;
作成後、 &lt;code&gt;0.0.0.0/0&lt;/code&gt; (デフォルトゲートウェイとして) インターネットゲートウェイを紐付けます。&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/11-create-rtb.png&quot; alt=&quot;create-rtb&quot;&gt;&lt;br&gt;
さらに、「サブネットの関連付け」で踏み台用のサブネットである &lt;code&gt;subnet-sample-public&lt;/code&gt; を紐付けます。&lt;/p&gt;
&lt;h1&gt;EC2（踏み台）の作成&lt;/h1&gt;
&lt;p&gt;いよいよサーバーです。&lt;br&gt;
サービス＞EC2＞インスタンスから「インスタンスの作成」を選択&lt;br&gt;
&lt;a href=&quot;https://aws.amazon.com/jp/blogs/news/amazon-linux-2-release/&quot;&gt;ちょうど数日前にリリースされたAmazon Linux 2&lt;/a&gt; が無料枠で選べる状態だったので、これを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/5-create-ec2.png&quot; alt=&quot;create-ec2-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;t2.micro&lt;/code&gt; を選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/6-create-ec2.png&quot; alt=&quot;create-ec2-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;インスタンスの詳細設定です。&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/7-create-ec2.png&quot; alt=&quot;create-ec2-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;ちょっと項目数が多いのでかいつまんで。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ネットワーク&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;vpc-sample&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;サブネット&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subnet-sample-public&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自動割り当てパブリックIP&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;有効化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;プライマリIP&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;192.168.1.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ここは若干ハマってしまった所なのですが、プライマリIPを &lt;code&gt;192.168.1.1&lt;/code&gt; に指定したら、最後のEC2作成のフェーズでエラーになってしまいました。&lt;br&gt;
プライマリIPは先頭と末尾（&lt;code&gt;192.168.1.0&lt;/code&gt; &lt;code&gt;192.168.1.255&lt;/code&gt;）だけ避ければ良いと思っていたのですが、他にも &lt;code&gt;192.168.1.1&lt;/code&gt; &lt;code&gt;192.168.1.2&lt;/code&gt; &lt;code&gt;192.168.1.3&lt;/code&gt; は予約済アドレスとなるようです。&lt;br&gt;
プライマリIPはわざわざ指定しなくても良かったかもしれないです。&lt;/p&gt;
&lt;p&gt;参考： &lt;a href=&quot;http://blog.serverworks.co.jp/tech/2013/05/23/vpc_beginner-2/&quot;&gt;VPC初心者がハマりやすいポイントをまとめてみた&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次はストレージの追加です。&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-ec2.png&quot; alt=&quot;create-ec2-4&quot;&gt;&lt;br&gt;
デフォルトのまま進めます。&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/8-create-tag.png&quot; alt=&quot;create-ec2-5&quot;&gt;&lt;br&gt;
&lt;code&gt;Name&lt;/code&gt; タグに &lt;code&gt;bastion&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-ec2.png&quot; alt=&quot;create-ec2-6&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/12/17-amazon-vpc/images/9-create-sg.png&quot; alt=&quot;create-ec2-7&quot;&gt;&lt;/p&gt;
&lt;p&gt;「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を &lt;code&gt;bastion-sg&lt;/code&gt; とします。&lt;br&gt;
セキュリティグループの指定で、sshで &lt;code&gt;22&lt;/code&gt; をどこからでも受けられるようにします。&lt;/p&gt;
&lt;p&gt;「確認と作成」をクリックして、キーペアを作成してダウンロードしたら完了です。&lt;/p&gt;
&lt;h1&gt;EC2(本番用)の作成&lt;/h1&gt;
&lt;p&gt;ほぼ踏み台と同じなので、違うところだけピックアップします。&lt;/p&gt;
&lt;h3&gt;詳細設定&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;サブネット&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subnet-sample-private&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自動割り当てパブリックIP&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;サブネット設定を使用（無効）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;プライマリIP&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;192.168.2.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;タグ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; タグに &lt;code&gt;webserver&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;h3&gt;セキュリティグループ&lt;/h3&gt;
&lt;p&gt;「新しいセキュリティグループを作成する」を選択し、セキュリティグループ名を &lt;code&gt;web-sg&lt;/code&gt; とします。&lt;br&gt;
セキュリティグループの指定で、sshで &lt;code&gt;22&lt;/code&gt; を &lt;code&gt;192.168.1.0/24&lt;/code&gt; からのみ受けられるようにします。（ここポイントです）&lt;/p&gt;
&lt;h3&gt;キーペア&lt;/h3&gt;
&lt;p&gt;踏み台で作成したものと同じものを使うようにします。&lt;/p&gt;
&lt;h1&gt;sshログインしてみる&lt;/h1&gt;
&lt;p&gt;踏み台→本番への接続も同じキーペアで通せるように、以下のコマンドを打ちます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;ssh-add {pemファイルのパス}
ssh-add -l &lt;span class=&quot;hljs-comment&quot;&gt;# 登録できたか確認&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まずは踏み台のログインです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;ssh -i {pemファイルのパス} ec2-user@{踏み台に割当てられたパブリックIP}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ログインできたら、本番に指定したプライベートIPを使ってさらにsshログインします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ ssh 192.168.2.10 &lt;span class=&quot;hljs-comment&quot;&gt;# 本番用に指定したプライベートIP&lt;/span&gt;
Last login: Sun Dec 17 06:01:04 2017 from 192.168.1.10

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでログイン完了です！&lt;/p&gt;
&lt;h3&gt;ssh/configの設定&lt;/h3&gt;
&lt;p&gt;踏み台を通して1発で本番へログインできるようにするための設定です。&lt;br&gt;
&lt;code&gt;~/.ssh/config&lt;/code&gt; に記述します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;Host {踏み台用の好きな名前}
  HostName {踏み台パブリックIP}
  User ec2-user
  IdentityFile {pemファイルのパス}

Host {本番用の好きな名前}
  HostName {本番用プライベートIP}
  User ec2-user
  IdentityFile {pemファイルのパス}
  ProxyCommand ssh {踏み台用の好きな名前} -W %h:%p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記を指定しておけば、 &lt;code&gt;ssh {本番用の好きな名前}&lt;/code&gt; でログインできます。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails開発環境をdocker-composeで作ってみる]]></title>
        <id>https://blog.bakunyo.com/2017/07/06/docker-compose-rails/</id>
        <link href="https://blog.bakunyo.com/2017/07/06/docker-compose-rails/">
        </link>
        <updated>2017-07-05T15:09:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;久々に &lt;code&gt;rails new&lt;/code&gt; したい欲求が高まったので、今風っぽく &lt;code&gt;docker-compose&lt;/code&gt; を使って開発環境をつくります。&lt;br&gt;
docker公式がドキュメントを用意してくれているので、まずはそれで感覚を掴んでみます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/rails/&quot;&gt;Quickstart: Compose and Rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OSはMac(Sierra)です。手元にあったdockerも少し古くなっていたので、アップグレードしつつ進めます。&lt;/p&gt;
&lt;h1&gt;1. Docker環境の準備&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot;&gt;Install Docker for Mac&lt;/a&gt; からStable版のDockerをダウンロード・インストールします。&lt;br&gt;
元々&lt;strong&gt;Docker Toolbox&lt;/strong&gt;をインストールしていましたが、&lt;strong&gt;Docker for Mac&lt;/strong&gt;のインストーラーがよしなに差し替えたり調整してくれました。&lt;/p&gt;
&lt;p&gt;詳しくは以下です。&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/docker-for-mac/docker-toolbox/&quot;&gt;Docker for Mac vs. Docker Toolbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インストール後のバージョン確認&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ docker version
Client:
 Version:      17.06.0-ce
 API version:  1.30
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:31:53 2017
 OS/Arch:      darwin/amd64

Server:
 Version:      17.06.0-ce
 API version:  1.30 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:51:55 2017
 OS/Arch:      linux/amd64
 Experimental: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;

[bakunyo@wasta 01:04:10] ~
$ docker --version
Docker version 17.06.0-ce, build 02c1d87
[bakunyo@wasta 01:04:14] ~
$ docker-compose --version
docker-compose version 1.14.0, build c7bdf9e
[bakunyo@wasta 01:04:18] ~
$ docker-machine --version
docker-machine version 0.12.0, build 45c69ad
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;2. プロジェクトの定義&lt;/h1&gt;
&lt;p&gt;以下の4ファイルを作成します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs docker&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ruby:&lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev nodejs
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; mkdir /myapp
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; /myapp
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Gemfile /myapp/Gemfile
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Gemfile.lock /myapp/Gemfile.lock
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; bundle install
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; . /myapp
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;&lt;strong&gt;Gemfile&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;source &lt;span class=&quot;hljs-string&quot;&gt;&#039;https://rubygems.org&#039;&lt;/span&gt;
gem &lt;span class=&quot;hljs-string&quot;&gt;&#039;rails&#039;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#039;5.0.0.1&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;&lt;strong&gt;Gemfile.lock&lt;/strong&gt;&lt;br&gt;
空でOK&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs yml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#039;3&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;services:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  db:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    image:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;postgres&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  web:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    build:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    command:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-bullet&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;hljs-bullet&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#039;0.0.0.0&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    volumes:&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;.:/myapp&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    ports:&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;3000:3000&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;    depends_on:&lt;/span&gt;
&lt;span class=&quot;hljs-bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;3. プロジェクトのビルド&lt;/h1&gt;
&lt;p&gt;ここからいよいよ &lt;code&gt;docker-compose&lt;/code&gt; コマンドを使うので、軽く中身を確認しておきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/reference/run/&quot;&gt;docker-compose run&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/compose/reference/up/&quot;&gt;docker-compose up&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://docs.docker.com/compose/reference/build/&quot;&gt;docker-compose build&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; には複数のサービスが定義されていて、 &lt;code&gt;run&lt;/code&gt; は特定のサービス、 &lt;code&gt;up&lt;/code&gt; は全サービス(特定も可)に対する命令です。どちらも、コンテナが create &amp;amp; start されます。&lt;br&gt;
また、 &lt;code&gt;run&lt;/code&gt; は指定したサービス上で実行するコマンドを渡すことができ、 &lt;code&gt;docker-compose.yml&lt;/code&gt; に書いてある &lt;code&gt;command&lt;/code&gt; を上書きするみたいですね。&lt;/p&gt;
&lt;p&gt;簡単ですが以上を踏まえて、以下のコマンドを実行した後の流れを見ていきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ docker-compose run web rails new . --force --database=postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;流れの確認&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトネットワークを生成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run web&lt;/code&gt; なのでサービス[web]の起動が始まる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depend_on: db&lt;/code&gt; となっている為、サービス[db]を先に起動する
&lt;ul&gt;
&lt;li&gt;postgresのimageをpull &amp;amp; dbサービス用のネットワークを生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build: .&lt;/code&gt; なので &lt;code&gt;Dockerfile&lt;/code&gt; を元にコンテナを生成する
&lt;ul&gt;
&lt;li&gt;ruby:2.3.3 からimageをpull&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev nodejs&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;必要なライブラリのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN mkdir /myapp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WORKDIR /myapp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD Gemfile /myapp/Gemfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD Gemfile.lock /myapp/Gemfile.lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN bundle install&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;WORKDIRを指定しているので、 &lt;code&gt;/myapp/Gemfile&lt;/code&gt; を元にインストールが始まる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD . /myapp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose run&lt;/code&gt; の引数に渡しているコマンドが実行される(override)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rails new . --force --database=postgresql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コマンドが上書きされているので、 &lt;code&gt;rails s&lt;/code&gt; は実行されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt; オプションで、 &lt;code&gt;Gemfile&lt;/code&gt; が上書きされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;4. 再ビルド&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gemfileが書き換わったので、imageを再ビルドします。&lt;br&gt;
&lt;code&gt;rails new&lt;/code&gt; のとき &lt;code&gt;--skip-bundle&lt;/code&gt; しても良さそうですね。&lt;/p&gt;
&lt;h1&gt;5. DB設定&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;config/database.yml&lt;/code&gt; を以下に書き換え&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs yml&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;&amp;amp;default&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  adapter:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;postgresql&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  encoding:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;unicode&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  host:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;db&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  username:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;postgres&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  password:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  pool:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;hljs-attr&quot;&gt;development:&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;*default&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  database:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;myapp_development&lt;/span&gt;


&lt;span class=&quot;hljs-attr&quot;&gt;test:&lt;/span&gt;
  &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;*default&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  database:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;myapp_test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;host: db&lt;/code&gt; で接続できるということですね。便利！&lt;/p&gt;
&lt;h1&gt;6. サーバー起動&lt;/h1&gt;
&lt;p&gt;サービスを起動します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別のターミナルを開き、以下を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ docker-compose run web rake db:create
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
http://localhost:3000 にアクセスします。
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/07/06-docker-compose-rails/images/rails_welcome.png&quot; alt=&quot;rails welcome&quot;&gt;&lt;/p&gt;
&lt;p&gt;ちゃんと起動していました！&lt;br&gt;
Docker環境さえあれば、たった数ファイルでここまで構築できるってすごいですね。&lt;br&gt;
大体の流れは掴めたので、これをベースに自分用にカスタマイズしていこうと思います。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elixir入門]]></title>
        <id>https://blog.bakunyo.com/2017/05/27/elixir-introduction/</id>
        <link href="https://blog.bakunyo.com/2017/05/27/elixir-introduction/">
        </link>
        <updated>2017-05-27T08:01:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;2017/06/02 に行われた &lt;a href=&quot;https://beam-lang.connpass.com/event/51637/&quot;&gt;Elixir入門者LT大会&lt;/a&gt; へ参加する際、事前に準備しておいたことのメモ。&lt;/p&gt;
&lt;h2&gt;Elixirとは？&lt;/h2&gt;
&lt;h4&gt;公式サイト&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://elixir-lang.org/&quot;&gt;https://elixir-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スケーラブルで持続可能なアプリを作るためにデザインされた動的関数型言語&lt;/li&gt;
&lt;li&gt;Erlang VM上で動いている。
&lt;ul&gt;
&lt;li&gt;Erlang VMは、レイテンシが低く、配布可能で耐障害性もあり、Webでも組み込みシステムでも利用されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特徴
&lt;ul&gt;
&lt;li&gt;関数型&lt;/li&gt;
&lt;li&gt;拡張可能なDSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他の特徴
&lt;ul&gt;
&lt;li&gt;Ecosystem(mix)&lt;/li&gt;
&lt;li&gt;Interactive Development&lt;/li&gt;
&lt;li&gt;Erlang互換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;Macの場合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew update
brew install elixir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;その他の場合&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;基本&lt;/h2&gt;
&lt;p&gt;Elixir Schoolより&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iex&lt;/code&gt; でREPLを起動&lt;/li&gt;
&lt;li&gt;真偽判定: &lt;code&gt;false&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; 以外は真&lt;/li&gt;
&lt;li&gt;アトム &lt;code&gt;:foo&lt;/code&gt; はRubyのシンボルと同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true === :true&lt;/code&gt; は真&lt;/li&gt;
&lt;li&gt;モジュール名もアトム。宣言されていなくても。 &lt;code&gt;is_atom(MyApp)&lt;/code&gt; は真&lt;/li&gt;
&lt;li&gt;アトムは、Erlangのビルトインも含めたモジュール参照にも使われる。 &lt;code&gt;:crypto.rand_bytes 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;どんな型同士も比較可能、ソート可能&lt;/li&gt;
&lt;li&gt;文字の連結は &lt;code&gt;&amp;quot;Hello, &amp;quot; &amp;lt;&amp;gt; &amp;quot;Elixir&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;公式サイト&lt;br&gt;
&lt;a href=&quot;https://elixir-lang.org/&quot;&gt;https://elixir-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elixir School(日本語あり)&lt;br&gt;
&lt;a href=&quot;https://elixirschool.com&quot;&gt;https://elixirschool.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;イベントに参加した時のメモ&lt;/h2&gt;
&lt;h3&gt;guest1 @ohrdev おーはらさん&lt;/h3&gt;
&lt;h4&gt;なぜElixir&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可用性◯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;速度× =&amp;gt; C, golangの方が&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今持っていない考え方が身につく？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクターモデル&lt;/li&gt;
&lt;li&gt;関数プログラミング、マクロ、プロトコル&lt;/li&gt;
&lt;li&gt;並行プログラミング、OTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;適当な問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列処理が効くツール
&lt;ul&gt;
&lt;li&gt;クローラー&lt;/li&gt;
&lt;li&gt;chat, mastodon cloneとか？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ライブラリ制作
&lt;ul&gt;
&lt;li&gt;マクロを使う必要がある(メタプログラミング)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;guest2 さっちゃん&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;phoenix new しとけばRailsみたく開発できる。Webはだいたいいける&lt;/li&gt;
&lt;li&gt;dockerで環境をつくって、環境差異をなくした&lt;/li&gt;
&lt;li&gt;lint: 開発の最初から入れる必要がある
&lt;ul&gt;
&lt;li&gt;dogma, credoの2つがある(credoの方が盛ん)&lt;/li&gt;
&lt;li&gt;dialyzer: flowtypeみたく型を指定できる
&lt;ul&gt;
&lt;li&gt;但し、めちゃくちゃ遅い(最初に型情報のDBを生成する)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;test: ExUnit
&lt;ul&gt;
&lt;li&gt;関数合成だけで構築できると信じるとテストが書きやすくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;awesome-elixer
&lt;ul&gt;
&lt;li&gt;ライブラリの選定に有用&lt;/li&gt;
&lt;li&gt;elixir公式MLでも情報とれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;別の言語で学ぶ
&lt;ul&gt;
&lt;li&gt;Haskell, Lisp, Scala&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プロセスの役割
&lt;ul&gt;
&lt;li&gt;タスクを分割する&lt;/li&gt;
&lt;li&gt;状態を持つ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;LT&lt;/h3&gt;
&lt;h4&gt;@color_box&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;とりあえず HexDoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;erlang ライブラリ多い&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPL環境が良い&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iex -S mix でライブラリも参照できる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;パターンマッチの重要性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case&lt;/li&gt;
&lt;li&gt;関数のシグネチャ&lt;br&gt;
-&amp;gt; 関数が小さくなるので、読みやすくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;@cedretaber&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Bibliotheca 蔵書管理アプリ&lt;/li&gt;
&lt;li&gt;認証ライブラリを作った&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;@nunulk&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ElixirでSlack botをつくっている&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;@yasuhiroki&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;シェル芸との共通点から好きになる&lt;/li&gt;
&lt;/ul&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[鎌倉で開発合宿してきた]]></title>
        <id>https://blog.bakunyo.com/2017/02/14/kamakura-kaihatsu-gassyuku/</id>
        <link href="https://blog.bakunyo.com/2017/02/14/kamakura-kaihatsu-gassyuku/">
        </link>
        <updated>2017-02-14T12:40:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;2017年2月10日〜12日の間、鎌倉（由比ヶ浜）で開発合宿をしてきました。&lt;br&gt;
泊まった場所は以下です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ikyu.com/vacation/00050003/&quot;&gt;光と水の邸宅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;広いしきれいだし、とても使いやすかったので開発合宿にオススメです！&lt;/p&gt;
&lt;h2&gt;発表資料&lt;/h2&gt;
&lt;div class=&quot;speakerdeck&quot; data-id=&quot;3e5ab470ef564b02b22c545fbdbab89a&quot;&gt;&lt;/div&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;事前準備があまりできず、いい感じのアウトプットが出なかったのが心残りです。&lt;br&gt;
だいたい晴れていたのですが突然雪が降ったり、何だか変な天気でした。&lt;/p&gt;
&lt;p&gt;OSSコミッターになるネタのために作った&lt;a href=&quot;https://github.com/tensorflow/tensorflow/pull/7441&quot;&gt;PR&lt;/a&gt;は無事マージされてました。笑&lt;/p&gt;
&lt;p&gt;由比ヶ浜の海岸。&lt;br&gt;
ここには写っていませんが、2月なのにサーファーが沢山いました。&lt;br&gt;
寒いのに・・・&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/ocean.jpg&quot; alt=&quot;ocean&quot;&gt;&lt;/p&gt;
&lt;p&gt;2日目の昼。&lt;br&gt;
ずっと引きこもっていたので、空を見て気持ち良くなる大人たち&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/sky.jpg&quot; alt=&quot;sky&quot;&gt;&lt;/p&gt;
&lt;p&gt;帰りがけ、鶴岡八幡宮に寄っていきました。&lt;br&gt;
&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2017/02/14-kamakura-kaihatsu-gassyuku/images/thumbnail.png&quot; alt=&quot;tsurugaoka&quot;&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deviseでフレンドリーフォワーディングを実装する]]></title>
        <id>https://blog.bakunyo.com/2016/12/30/devise-friendly-forwarding/</id>
        <link href="https://blog.bakunyo.com/2016/12/30/devise-friendly-forwarding/">
        </link>
        <updated>2016-12-30T07:34:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;前置き&lt;/h2&gt;
&lt;p&gt;Railsでの認証に &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt; を使っている人は多いと思います。&lt;br&gt;
ただ、 Devise はデフォルトでは&lt;strong&gt;フレンドリーフォワーディング&lt;/strong&gt;が効いていません。&lt;/p&gt;
&lt;p&gt;フレンドリーフォワーディングとは、ユーザーが認証前に開こうとしていたページへ、認証後にリダイレクトさせることです。&lt;br&gt;
参考： &lt;a href=&quot;http://railstutorial.jp/chapters/updating_and_deleting_users?version=4.2#sec-friendly_forwarding&quot;&gt;Rails チュートリアル&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近機会があったので、&lt;a href=&quot;https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update&quot;&gt;DeviseのHow To&lt;/a&gt;を参考に実装しました。&lt;br&gt;
その際にやったことを残しておきます。&lt;/p&gt;
&lt;p&gt;なお、各バージョンは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 2.3.1&lt;/li&gt;
&lt;li&gt;Rails 4.2.7.1&lt;/li&gt;
&lt;li&gt;Devise 3.5.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;アクセスされたURLを保存する&lt;/h3&gt;
&lt;p&gt;認証前にアクセスしようとしたページをセッションに保存します。&lt;br&gt;
&lt;code&gt;current_user&lt;/code&gt; が取得できれば認証できているので、その場合は除外しています。&lt;br&gt;
また、 &lt;code&gt;devise_controller&lt;/code&gt; の各アクションの場合も除外しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;

before_action &lt;span class=&quot;hljs-symbol&quot;&gt;:store_current_location&lt;/span&gt;, &lt;span class=&quot;hljs-symbol&quot;&gt;unless:&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:devise_controller?&lt;/span&gt;

private

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;store_current_location&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; current_user
  store_location_for(&lt;span class=&quot;hljs-symbol&quot;&gt;:user&lt;/span&gt;, request.url)
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;store_location_for&lt;/code&gt; を呼ぶと、&lt;code&gt;session[:user_return_to]&lt;/code&gt; にURLを保存してくれます。&lt;br&gt;
&lt;code&gt;:user&lt;/code&gt; の部分は認証のscopeです。大抵の場合は &lt;code&gt;:user&lt;/code&gt; でOKかと思います。&lt;/p&gt;
&lt;p&gt;実は、フレンドリーフォワーディングの実装としてはこれだけで完了です。&lt;br&gt;
&lt;code&gt;session[:user_return_to]&lt;/code&gt; にURLが入っていると、認証後にリダイレクトしてくれるようです。&lt;/p&gt;
&lt;p&gt;ただ、セキュリティ対策として以下の場合は追加の対応が必要です。&lt;/p&gt;
&lt;h3&gt;認証後にセッションをリセットする場合&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://railsguides.jp/&quot;&gt;Rails ガイド&lt;/a&gt; のセキュリティのページで、&lt;a href=&quot;http://railsguides.jp/security.html#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83-%E5%AF%BE%E5%BF%9C%E7%AD%96&quot;&gt;セッション固定攻撃の対応策&lt;/a&gt; について紹介されています。&lt;br&gt;
ログイン認証の際に、 &lt;code&gt;reset_session&lt;/code&gt; を行なうというものです。&lt;br&gt;
これを行なうと、当然上で保存したURLも消えてしまうので、その値だけ別途引き継ぐ対応を行ないます。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;user_return_to&lt;/code&gt; を引き継ぐ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Devise::SessionsController&lt;/code&gt; を継承したControllerで以下の対応をします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# app/controllers/sessions_controller.rb&lt;/span&gt;

before_action &lt;span class=&quot;hljs-symbol&quot;&gt;:reset_session_before_login&lt;/span&gt;, &lt;span class=&quot;hljs-symbol&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:create&lt;/span&gt;

private

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;reset_session_before_login&lt;/span&gt;&lt;/span&gt;
  user_return_to = session[&lt;span class=&quot;hljs-symbol&quot;&gt;:user_return_to&lt;/span&gt;]
  reset_session

  session[&lt;span class=&quot;hljs-symbol&quot;&gt;:user_return_to&lt;/span&gt;] = user_return_to &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; user_return_to
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで、認証時の &lt;code&gt;reset_session&lt;/code&gt; をしつつフレンドリーフォワーディングをすることが可能になりました。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React on Redux on Relay on Ruby on Rails]]></title>
        <id>https://blog.bakunyo.com/2016/10/27/rorororor/</id>
        <link href="https://blog.bakunyo.com/2016/10/27/rorororor/">
        </link>
        <updated>2016-10-27T14:30:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;社内勉強会にてタイトルのような試みをし、&lt;strong&gt;失敗&lt;/strong&gt;した話をしました。&lt;/p&gt;
&lt;div class=&quot;speakerdeck&quot; data-id=&quot;5cadf924d4014b9386d3836cd7820b07&quot;&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;p&gt;React周辺ライブラリを整理するという一番の目的は達成できたかなと思います。&lt;br&gt;
ただまだまだ自分の中に落とし込めてない部分が多いので、キャッチアップしていこうという感じです。&lt;br&gt;
サンプルコードばっかり追ってないで、ちゃんとしたもの作っていこうな、俺。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jekyll -> Middleman-blogに移行しました]]></title>
        <id>https://blog.bakunyo.com/2016/09/20/jekyll_to_middleman/</id>
        <link href="https://blog.bakunyo.com/2016/09/20/jekyll_to_middleman/">
        </link>
        <updated>2016-09-20T12:15:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;ブログエンジンを&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/middleman/middleman-blog&quot;&gt;Middleman-blog&lt;/a&gt;に移行しました。&lt;br&gt;
移行した一番の理由は、&lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt;記法（&lt;code&gt;{% %}&lt;/code&gt;みたいなの）にいまいち慣れなかったことです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-ap-northeast-1.amazonaws.com/bakunote-images/2016/09/20-jekyll_to_middleman/images/thumbnail.png&quot; alt=&quot;middleman-logo&quot;&gt;&lt;/p&gt;
&lt;h2&gt;移行に際してやったこと&lt;/h2&gt;
&lt;h3&gt;デザイン・レイアウト&lt;/h3&gt;
&lt;p&gt;jekyllの時は &lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;Jekyll Themes &amp;amp; Template&lt;/a&gt; の中から選んでそのデザインを使っていたのですが、今回は自分でカスタマイズしやすいようThemeを使わないことにしました。&lt;/p&gt;
&lt;p&gt;まず、CSSフレームワークとして &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Foundation&lt;/a&gt; を使いました。&lt;br&gt;
数年前にver.5が出たと思ったのですが、もうver.6がリリースされているんですね…。&lt;br&gt;
軽量・シンプルでドキュメントもしっかりしていて使いやすかったです。&lt;/p&gt;
&lt;p&gt;独自スタイルの追加は &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; で書いて、 &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; でCompileしています。&lt;br&gt;
JSはES2015で書けるようにしています。が、まだ特に書いてはいないです^^;&lt;/p&gt;
&lt;p&gt;Middlemanには &lt;a href=&quot;https://middlemanapp.com/jp/advanced/external-pipeline/&quot;&gt;外部パイプライン&lt;/a&gt; という機能があり、&lt;code&gt;middleman server&lt;/code&gt; や &lt;code&gt;middleman build&lt;/code&gt;の時にフロントエンドのコマンドを実行するよう設定できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;activate &lt;span class=&quot;hljs-symbol&quot;&gt;:external_pipeline&lt;/span&gt;,
  &lt;span class=&quot;hljs-symbol&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:webpack&lt;/span&gt;,
  &lt;span class=&quot;hljs-symbol&quot;&gt;command:&lt;/span&gt; build? ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;./node_modules/webpack/bin/webpack.js --bail&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;./node_modules/webpack/bin/webpack.js --watch -d&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-symbol&quot;&gt;source:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.tmp/dist&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-symbol&quot;&gt;latency:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;p&gt;Railsの開発で慣れている&lt;a href=&quot;http://slim-lang.com/&quot;&gt;Slim&lt;/a&gt;を採用しました。&lt;br&gt;
&lt;code&gt;erb&lt;/code&gt;書いてる時に比べて精神状態が良好に保たれます。&lt;/p&gt;
&lt;p&gt;微妙にハマったのが&lt;code&gt;partial&lt;/code&gt;の書き方で、&lt;a href=&quot;https://middlemanapp.com/jp/basics/upgrade-v4/&quot;&gt;v4 へのアップグレード&lt;/a&gt;にもあるように、&lt;code&gt;partials_dir&lt;/code&gt;の設定オプションが無くなっています。&lt;br&gt;
部分テンプレートの指定は&lt;code&gt;source&lt;/code&gt;からの相対パスで&lt;code&gt;partial &#039;partials/my_partial&#039;&lt;/code&gt;のように書くことになります。&lt;/p&gt;
&lt;p&gt;また、特に指定をしなければ&lt;code&gt;partials&lt;/code&gt;以下もビルド対象となってしまうので、ビルド対象外として設定すると良いです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;ignore &lt;span class=&quot;hljs-string&quot;&gt;&#039;partials/*&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは&lt;strong&gt;開発時に気づきにくい罠&lt;/strong&gt;でした。&lt;/p&gt;
&lt;h3&gt;記事の移行&lt;/h3&gt;
&lt;p&gt;元々Jekyllの記事は &lt;a href=&quot;http://jekyllrb-ja.github.io/docs/frontmatter/&quot;&gt;Front-matter&lt;/a&gt; + Markdown で書いていたので、ほぼそのままMiddleman-blogにコピーするだけで完了しました。&lt;/p&gt;
&lt;h3&gt;ファイル圧縮&lt;/h3&gt;
&lt;p&gt;アセットを圧縮するための設定がデフォルトで用意されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;configure &lt;span class=&quot;hljs-symbol&quot;&gt;:build&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;
  activate &lt;span class=&quot;hljs-symbol&quot;&gt;:minify_css&lt;/span&gt;
  activate &lt;span class=&quot;hljs-symbol&quot;&gt;:minify_javascript&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;

activate &lt;span class=&quot;hljs-symbol&quot;&gt;:minify_html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まだやれてないですが、画像の圧縮には&lt;a href=&quot;https://github.com/plasticine/middleman-imageoptim&quot;&gt;middleman-imageoptim&lt;/a&gt;を使うと良さそうです。&lt;/p&gt;
&lt;h3&gt;デプロイ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/middleman-contrib/middleman-deploy&quot;&gt;middleman-deploy&lt;/a&gt;が便利です。&lt;br&gt;
自分は&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;で公開しているので、&lt;code&gt;master&lt;/code&gt;ブランチにPushして完了です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;activate &lt;span class=&quot;hljs-symbol&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;|deploy|&lt;/span&gt;
  deploy.deploy_method = &lt;span class=&quot;hljs-symbol&quot;&gt;:git&lt;/span&gt;
  deploy.branch = &lt;span class=&quot;hljs-string&quot;&gt;&#039;master&#039;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# default: gh-pages&lt;/span&gt;
  deploy.build_before = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# default: false&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;控えめに言って &lt;a href=&quot;https://middlemanapp.com/jp/&quot;&gt;Middleman&lt;/a&gt; 最高でした！&lt;br&gt;
サイト作るのに必要だなと思うものがデフォルトで付いてたり拡張として用意してあって、たくさん楽できました。&lt;br&gt;
あとはRailsライクな &lt;a href=&quot;https://middlemanapp.com/jp/basics/helper_methods/&quot;&gt;ヘルパーメソッド&lt;/a&gt; も用意してあるし、とにかくハードルが低かったです。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[rspec_rake っていうGemをつくってみた]]></title>
        <id>https://blog.bakunyo.com/2016/05/06/rake_rspec/</id>
        <link href="https://blog.bakunyo.com/2016/05/06/rake_rspec/">
        </link>
        <updated>2016-05-05T15:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;人生初のGemをつくってみました！&lt;br&gt;
&lt;a href=&quot;https://rubygems.org/gems/rspec_rake&quot;&gt;rspec_rake&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;Rakeタスクのテスト(RSpec)を書く時に躓くことが多く、そこを楽にできたらいいなーと思ったのがきっかけです。あとそろそろGemつくってみたかった。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;p&gt;仮に、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Railsプロジェクト&lt;/li&gt;
&lt;li&gt;Rakeファイルは&lt;code&gt;lib/tasks&lt;/code&gt;以下に入ってる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という想定だと、以下のような感じで設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs &quot;&gt;# in spec/rails_helper.rb

RSpecRake.configure do |config|
  config.require_tasks(File.join(Rails.root, &#039;lib&#039;, &#039;tasks&#039;))
  config.auto_reenable = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.require_tasks&lt;/code&gt;はRakeタスク定義してるだけなので、他の方法でも良いです。&lt;br&gt;
どちらかと言うと、&lt;code&gt;.auto_reenable&lt;/code&gt;の方が欲しい機能でした。&lt;/p&gt;
&lt;h1&gt;auto_reenable&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://qiita.com/morygonzalez/items/699749c631f66e62637b&quot;&gt;Rake タスクをテストコードの中で複数回実行する&lt;/a&gt;&lt;br&gt;
こちらの記事に書かれているように、Rakeタスクの&lt;code&gt;#invoke&lt;/code&gt;メソッドを2回以上実行する時は、その都度&lt;code&gt;#reenable&lt;/code&gt;メソッドを呼ぶ必要があります。&lt;br&gt;
ここではテストなので、成功パターン・失敗パターンだけでも2回以上実行することになりますよね…！&lt;/p&gt;
&lt;p&gt;で、毎度&lt;code&gt;#reenable&lt;/code&gt;を呼ぶのは面倒なので、&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs &quot;&gt;  config.auto_reenable = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と設定すれば、タスク実行後に自動的に&lt;code&gt;#reenable&lt;/code&gt;するようにしました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但し、タスク内で別のタスクを呼んだりなど、無限ループするような書き方には注意です！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;#execute&lt;/code&gt;メソッドなら何度でも実行できて楽なのですが、こっちはこっちでタスクに引数が渡しづらいという悩みが出てきたりします笑&lt;/p&gt;
&lt;h1&gt;specファイル内でのタスク実行方法&lt;/h1&gt;
&lt;p&gt;上記の設定ができていれば、specファイル内では&lt;code&gt;Rake::Task&lt;/code&gt;から対象のタスクを呼ぶだけでOKです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs &quot;&gt;# before, it, afterなどどこでも
Rake::Task[&#039;some:task&#039;].invoke
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;各specファイルではRakeの定義などは要らないし、どのタスクでも呼べるので結構楽に書けると思います。&lt;/p&gt;
&lt;h1&gt;懸念点&lt;/h1&gt;
&lt;p&gt;RSpec起動時にすべてのRakeファイルを読み込む想定なので、テストの実行時間が増えるかもしれないです。&lt;br&gt;
色んなプロジェクトで試したりとかしてないので、やってみてどうだったとか感想もらえると嬉しいです！&lt;/p&gt;
&lt;h1&gt;参考にした記事&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://robots.thoughtbot.com/test-rake-tasks-like-a-boss&quot;&gt;Test Rake Tasks Like a BOSS&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://dev.classmethod.jp/server-side/ruby-on-rails/ruby-on-rails_rspec_rake_test/&quot;&gt;[Ruby on Rails]RSpecによるRakeのテスト&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://qiita.com/morygonzalez/items/699749c631f66e62637b&quot;&gt;Rake タスクをテストコードの中で複数回実行する&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/&quot;&gt;RubyGemはめっちゃ簡単に作れる！&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vimでgitするにはvimagitがおすすめ]]></title>
        <id>https://blog.bakunyo.com/2016/01/08/vimagit/</id>
        <link href="https://blog.bakunyo.com/2016/01/08/vimagit/">
        </link>
        <updated>2016-01-07T15:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;年末に知った&lt;a href=&quot;https://github.com/jreybert/vimagit&quot;&gt;vimagit&lt;/a&gt;ってvimのプラグインが使ってて気持ち良い。&lt;br&gt;
Gitの差分をvimで開けて、行単位でStageしたりCommitできる。&lt;br&gt;
&lt;code&gt;git add -p&lt;/code&gt;するvimmerには特におすすめ！&lt;/p&gt;
&lt;p&gt;ちなみにEmacsプラグインの&lt;a href=&quot;https://github.com/magit/magit&quot;&gt;magit&lt;/a&gt;ってやつのコピー版らしい。&lt;br&gt;
インストール〜使い方、オススメ設定まで記載しておく。&lt;/p&gt;
&lt;h1&gt;インストール&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;NeoBundle &lt;span class=&quot;hljs-string&quot;&gt;&#039;jreybert/vimagit&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jreybert/vimagit&quot;&gt;GitHubのリポジトリ&lt;/a&gt;にリンクされてる&lt;a href=&quot;https://asciinema.org/a/28761&quot;&gt;ビデオ&lt;/a&gt;とかを見るとざっくりイメージできると思う。&lt;/p&gt;
&lt;h3&gt;開き方&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:Magit&lt;/code&gt; または &lt;code&gt;&amp;lt;Leader&amp;gt;M&lt;/code&gt;でbufferを開く。&lt;/p&gt;
&lt;h3&gt;セクション&lt;/h3&gt;
&lt;p&gt;bufferは以下の5つのセクションに分かれている。&lt;br&gt;
後で記載するけど表示順などをオプションで指定できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;info&lt;/strong&gt;: current branchやHEAD commitのメッセージなどが表示されている&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit message&lt;/strong&gt;: コミットする時に現れて、メッセージを入力する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staged changes&lt;/strong&gt;: そのままだけどStagingされた変更部分&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unstaged changes&lt;/strong&gt;: まだStagingされてない変更部分。Untracked filesもここに表示される&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stash list&lt;/strong&gt;: Stashのリスト&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コマンド&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jreybert/vimagit/blob/master/README.md&quot;&gt;README&lt;/a&gt;みれば丁寧に書いてあるけど、自分が普段使うものを記載しておく。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;command&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:Magit または &amp;lt;Leader&amp;gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;magit bufferを開く。すべてはここから&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stage &amp;lt;-&amp;gt; Unstage の切り替え。ファイル名の上ならファイルごとStageされるし、vで行選択すればその行だけStageされる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;DDD&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Unstagedセクションでだけ使える。変更を破棄する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CC&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Commitセクション以外にいるならCommitセクションを開く。CommitセクションにいるならCommitする(説明むずい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CA&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CCのcommit --amendバージョン。直前のcommitに含めるならこれ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CF&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;commit --amendで、コミットメッセージを変更しない場合はこのコマンド一発で完了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;R&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bufferをrefreshする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;q&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bufferを閉じる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;h&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;help表示のON/OFF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;他にもIやLとか色々あるけど、自分はほぼ使ってない。&lt;/p&gt;
&lt;h3&gt;オプション&lt;/h3&gt;
&lt;p&gt;vimrcで指定できるオプション。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;option&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;description&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_enabled&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;vimagitの有効[1]・無効[0]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_show_help&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ヘルプの表示[1]・非表示[0]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_default_show_all_files&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bufferを開いた時にdiffを閉じておく[0]・modified filesのdiffだけ表示[1]・全ファイルのdiffを表示[2]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_default_fold_level&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;上記のdiff表示の詳細設定。ファイル名だけ表示する[0]・ファイル名とhunkの一覧だけ表示[1]・hunkの中身のdiffも表示[2]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_default_sections&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;各セクションの表示/非表示と順番&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[&#039;info&#039;, &#039;global_help&#039;, &#039;commit&#039;, &#039;staged&#039;, &#039;unstaged&#039;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;g:magit_warning_max_lines&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bufferを開く際にwarningを出すdiffの行数。実際に開くかはyes/noで回答&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;10000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;オススメ設定&lt;/h1&gt;
&lt;p&gt;自分がやってる設定と理由を簡単に。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:magit_show_help&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;&quot; 少し慣れたらいらなくなる&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:magit_default_show_all_files&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;&quot; わざわざ開くのは面倒なので&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:magit_default_fold_level&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;&quot; 同上&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:magit_default_sections&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&#039;global_help&#039;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#039;info&#039;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#039;unstaged&#039;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#039;staged&#039;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#039;commit&#039;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;&quot; helpはデフォルト非表示。次にcurrent情報。それ以下は上から順に処理していくイメージ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最初のcommitが2015年9月。 READMEにもあるようにまだまだ機能追加されそう。&lt;/p&gt;
&lt;p&gt;VimでGitといえば&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;だと思うけど、それには無いものをいっぱい持ってるし、併用もアリだと思う！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マージ済ブランチを消すコマンドをつくった]]></title>
        <id>https://blog.bakunyo.com/2015/12/27/git-delete-merged/</id>
        <link href="https://blog.bakunyo.com/2015/12/27/git-delete-merged/">
        </link>
        <updated>2015-12-27T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;今までマージ済ブランチを消す時、&lt;code&gt;git branch --merged&lt;/code&gt;してから1個1個&lt;code&gt;git branch -d xxxx&lt;/code&gt;とか面倒くさいことしてたので、マージ済ブランチを表示して確認後にyesと打てばまとめて消せるようにした。&lt;br&gt;
但し、originとdevelopは消さないようにしてる。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; git-delete-&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;merged&lt;/span&gt;&lt;/span&gt;() {
  merged=`git branch --merged | egrep -v &lt;span class=&quot;hljs-string&quot;&gt;&#039;\*|develop|master&#039;&lt;/span&gt;`
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [[ &lt;span class=&quot;hljs-variable&quot;&gt;$merged&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; ]]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#039;No merged branch.&#039;&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; 0
  &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;

  &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -en &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$merged&lt;/span&gt;\\ndelete? (y)es/(n)o: &quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; ans

  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [[ &lt;span class=&quot;hljs-variable&quot;&gt;$ans&lt;/span&gt; =~ ^y(es)?$ ]]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$merged&lt;/span&gt;&quot;&lt;/span&gt; | xargs git branch -d
  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#039;Cancelled.&#039;&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;
}

&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gdm=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git-delete-merged&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://qiita.com/hajimeni/items/73d2155fc59e152630c4&quot;&gt;Gitでマージ済みブランチを一括削除&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ついでに&lt;/h1&gt;
&lt;p&gt;今までGitのサブコマンドは&lt;code&gt;gitconfig&lt;/code&gt;のaliasに定義してたけど、&lt;code&gt;git xx&lt;/code&gt;って打つのもちょっと手間なのでalias整理した！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; ga=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git add&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gap=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git add -p&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gb=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git branch&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gcm=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git commit -v&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gca=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git commit --amend&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gco=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git checkout&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gcof=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git-checkout-force&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gcp=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git cherry-pick&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gd=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git diff&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gdm=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git-delete-merged&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gl=&lt;span class=&quot;hljs-string&quot;&gt;&quot;git log --pretty=&#039;%h %ci %s %cn&#039;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gpl=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git pull&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grb=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git rabase&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grbi=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git rabse -i&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grba=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git rabse --abort&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grbc=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git rabse --continue&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; $(seq 10); &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grbi&lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;git rebase -i HEAD~&lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grs=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git reset&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; $(seq 10); &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; grs&lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;git reset HEAD~&lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gs=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git status&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;alias&lt;/span&gt; gps=&lt;span class=&quot;hljs-string&quot;&gt;&#039;git push&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まだ慣れてなくてすぐ&lt;code&gt;git&lt;/code&gt;って打っちゃうので、早く身体に覚えさせたい。&lt;/p&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.enogineer.com/2014/12/04/git-ranking/&quot;&gt;よく使うGitコマンドのエイリアス＆シェル関数トップ10+α&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ctrlp.vimを試してみる]]></title>
        <id>https://blog.bakunyo.com/2015/11/08/ctrlp/</id>
        <link href="https://blog.bakunyo.com/2015/11/08/ctrlp/">
        </link>
        <updated>2015-11-08T14:15:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;約1年位Vimでnerdtreeを使ってきたんだけど、そろそろ別のも使ってみたいと思ったので&lt;strong&gt;ctrlp&lt;/strong&gt;を試してみることにする。&lt;/p&gt;
&lt;p&gt;ちなみにnerdtreeはディレクトリのツリーが常に表示されてる分、幅が狭くて辛い時があった。&lt;/p&gt;
&lt;h1&gt;インストール&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;NeoBundle &lt;span class=&quot;hljs-string&quot;&gt;&#039;ctrlpvim/ctrlp.vim&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;起動&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;適当にファイル名とか入力すれば絞り込んでくれる。&lt;/p&gt;
&lt;h1&gt;Help&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;help&lt;/span&gt; ctrlp-mappings
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ見とけばOK&lt;/p&gt;
&lt;h1&gt;キー(デフォルト)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;key&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-d&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;フルパス検索モードとファイル名検索モード(&amp;gt;d&amp;gt;)の切り替え&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-r&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;文字列検索モードと正規表現検索モード(r&amp;gt;&amp;gt;)の切り替え&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-f&amp;gt;, &amp;lt;c-b&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;検索対象の切り替え(files, mru files, buffer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;s-tab&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;match-windowとpromptのfocus切り替え(match-windowに切り替える意味がイマイチわからない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-c&amp;gt;, &amp;lt;esc&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrlpの終了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;cr&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;curren windowで開く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-x&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;horizonal splitで開く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-v&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;vertical splitで開く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-z&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;markする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-o&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ダイアログ付きで開く(markしているのがあれｂ一気に開く)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;c-y&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;新規ファイル作成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;ファイル検索にagを使う&lt;/h1&gt;
&lt;p&gt;agのインストール&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;brew install ag
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ag.vimの設定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;NeoBundle &lt;span class=&quot;hljs-string&quot;&gt;&#039;rking/ag.vim&#039;&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;executable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#039;ag&#039;&lt;/span&gt;)
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:ctrlp_use_caching&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;g:ctrlp_user_command&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#039;ag %s -i --nocolor --nogroup -g &quot;&quot;&#039;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;はやい。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://christina04.hatenablog.com/entry/2014/10/30/100612&quot;&gt;CtrlP + ag で vim の検索を高速化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/oahiroaki/items/d71337fb9d28303a54a8&quot;&gt;ctrlp.vimの使い方まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次はag.vim、quickfixあたりの使い方整理してまとめたいな！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Global変数を管理するGem 'global']]></title>
        <id>https://blog.bakunyo.com/2015/05/04/rubygem_global/</id>
        <link href="https://blog.bakunyo.com/2015/05/04/rubygem_global/">
        </link>
        <updated>2015-05-04T07:32:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;業務で使ってるGem「&lt;strong&gt;global&lt;/strong&gt;」がかなり便利だったのでメモしておく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/railsware/global&quot;&gt;https://github.com/railsware/global&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;導入手順(Railsの場合)&lt;/h2&gt;
&lt;h3&gt;1.Gemfileに追加&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;gem &lt;span class=&quot;hljs-string&quot;&gt;&#039;global&#039;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2.initiallizersに追加&lt;/h3&gt;
&lt;p&gt;config/initializers/global.rb&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;Global.configure &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;|config|&lt;/span&gt;
  config.environment = Rails.env.to_s
  config.config_directory = Rails.root.join(&lt;span class=&quot;hljs-string&quot;&gt;&#039;config/global&#039;&lt;/span&gt;).to_s
&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここまでやれば、&lt;code&gt;config/global/xxxx.yml&lt;/code&gt;にファイルを置くと設定値を読んでくれる&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# yamlファイルの例&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;default:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  error-email:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;myname@example.com&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;production:&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;  error-email:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;error@example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変数へのアクセス方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;Global.error-email &lt;span class=&quot;hljs-comment&quot;&gt;# 環境によって適切な方にアクセス&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;さらに&lt;/h3&gt;
&lt;p&gt;階層を深くするには、単にyamlの階層を深くするか&lt;br&gt;
&lt;code&gt;config/global/xxxx/yyyy.yml&lt;/code&gt;&lt;br&gt;
のようにファイルパスを深くすれば期待通りに動いてくれる。&lt;/p&gt;
&lt;p&gt;便利！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[定数のメソッド内定義]]></title>
        <id>https://blog.bakunyo.com/2015/05/01/ruby-define-const-in-method/</id>
        <link href="https://blog.bakunyo.com/2015/05/01/ruby-define-const-in-method/">
        </link>
        <updated>2015-05-01T08:08:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;定数はメソッドの中で定義ができない&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html&quot;&gt;http://docs.ruby-lang.org/ja/1.8.7/doc/spec=2fvariables.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;確認してみました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;def_const&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;irb(main):002:1&amp;gt;&lt;/span&gt;   CONST = &lt;span class=&quot;hljs-string&quot;&gt;&quot;const&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;irb(main):003:1&amp;gt;&lt;/span&gt; end
&lt;span class=&quot;hljs-symbol&quot;&gt;SyntaxError:&lt;/span&gt; compile error
(irb)&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: dynamic constant assignment
  CONST = &lt;span class=&quot;hljs-string&quot;&gt;&quot;const&quot;&lt;/span&gt;
         ^
        from (irb)&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;
        from &lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsコマンドプロンプトでaliasを使いたい]]></title>
        <id>https://blog.bakunyo.com/2014/02/16/windows_alias/</id>
        <link href="https://blog.bakunyo.com/2014/02/16/windows_alias/">
        </link>
        <updated>2014-02-16T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h3&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;でaliasなんて無理かなと半ば諦めていましたが、探してみればあるものですね。&lt;br&gt;
aliasを設定するには以下のようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
doskey ll=dir /ad
&lt;/pre&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Users\bakunyo\Desktop&gt;ll
 ドライブ C のボリューム ラベルは Windows です
 ボリューム シリアル番号は 1ED0-4D6E です

 C:\Users\bakunyo\Desktop のディレクトリ

2014/02/01  21:16    &lt;DIR&gt;          .
2014/02/01  21:16    &lt;DIR&gt;          ..
2013/12/31  18:12    &lt;DIR&gt;          inbox
               0 個のファイル                   0 バイト
               3 個のディレクトリ  186,053,722,112 バイトの空き領域
&lt;/pre&gt;
&lt;p&gt;おお、使えるようになっています！&lt;/p&gt;
&lt;p&gt;続いて、aliasの一覧を確認するには、以下のようにします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Users\bakunyo\Desktop&gt;doskey /macros
ll=dir /ad
&lt;/pre&gt;
&lt;p&gt;実は、今回なんでalias使いたくなったかというと、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;の起動コマンドが長くて鬱陶しかったんですね。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
bundle exec rails s
&lt;/pre&gt;
&lt;p&gt;これをこのままショートカットにしても良いのですが、引数にして渡すこともできるそうです。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
doskey bx=bundle exec $1 $2
&lt;/pre&gt;
&lt;p&gt;$1は1番目、$2は2番目の引数。いろいろと応用が効きそうですね。&lt;br&gt;
実行してみます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Users\bakunyo\Desktop\inbox\workspace\ruby\sample_app&gt;bx rails s
For a better Pry experience on Windows, please use ansicon:
   http://adoxa.3eeweb.com/ansicon/
=&gt; Booting WEBrick
=&gt; Rails 4.0.2 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
[2014-02-16 10:02:14] INFO  WEBrick 1.3.1
[2014-02-16 10:02:14] INFO  ruby 2.0.0 (2013-05-14) [i386-mingw32]
[2014-02-16 10:02:14] INFO  WEBrick::HTTPServer#start: pid=5624 port=3000
&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;起動できました！&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;
※bxを&lt;code&gt;bundle exec&lt;/code&gt;にしておいて、&lt;code&gt;bundle exec rais s&lt;/code&gt;と実行することはできないんですね。&lt;/p&gt;
&lt;h3&gt;設定の保存&lt;/h3&gt;
&lt;p&gt;さて、この設定したaliasですが、どこかに保存しておかないと次にcmd起動した時には消えてしまっています。&lt;br&gt;
なので、ファイルに保存＆cmd起動時に読み込む設定をします。&lt;/p&gt;
&lt;p&gt;まずは、設定をどこか適当な場所に保存します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Users\bakunyo&gt;doskey /macros &gt; C:\Users\bakunyo\.cmdrc
&lt;/pre&gt;
&lt;p&gt;cmdの起動ファイルで右クリック＞プロパティを選択し、リンク先の中身に設定ファイルを読み込むよう追記してあげます。&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20140216/20140216103802.png&quot; alt=&quot;f:id:bakunyo:20140216103802p:plain&quot; title=&quot;f:id:bakunyo:20140216103802p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Windows\System32\cmd.exe /k &quot;doskey /macrofile=C:\Users\bakunyo\.cmdrc&quot;
&lt;/pre&gt;
&lt;p&gt;ちなみに、自分はRailsInstallerで加わった&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8&quot;&gt;コマンドプロンプト&lt;/a&gt;を以下のように編集しました。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\Windows\System32\cmd.exe /E:ON /k &quot;C:\RailsInstaller\Ruby2.0.0\setup_environment.bat C:\RailsInstaller &amp; doskey /macrofile=C:\Users\bakunyo\.cmdrc&quot;
&lt;/pre&gt;
&lt;p&gt;起動コマンドは＆で繋げられるみたいですね！&lt;br&gt;
これで、かなり便利になりました。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublimeでインデントを整形する]]></title>
        <id>https://blog.bakunyo.com/2014/01/30/sublime_indent/</id>
        <link href="https://blog.bakunyo.com/2014/01/30/sublime_indent/">
        </link>
        <updated>2014-01-30T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Textにはデフォルトで**&lt;span style=&quot;color: #ff0000&quot;&gt;インデント&lt;/span&gt;**を整形する機能があります。&lt;br&gt;
やり方は、&lt;code&gt;Edit &amp;gt; Line &amp;gt; Reindent&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;ちなみにこの時適用されるインデントは、 &lt;code&gt;View &amp;gt; Indentation &amp;gt; Tab Width&lt;/code&gt; で変更できます。&lt;/p&gt;
&lt;p&gt;今回は、このReindentに&lt;strong&gt;ショートカット&lt;/strong&gt;を設定してみます。&lt;br&gt;
ショートカットの設定は &lt;code&gt;Preferences &amp;gt; Key Bindings - User&lt;/code&gt;を開き、&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
  { &quot;keys&quot;: [&quot;super+ctrl+]&quot;], &quot;command&quot;: &quot;reindent&quot;, &quot;args&quot;: { &quot;single_line&quot;: false }},
&lt;/pre&gt;
&lt;p&gt;を追加して完了です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt;は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;ならCommandキー、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;なら&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Windows%A5%AD%A1%BC&quot;&gt;Windowsキー&lt;/a&gt;となります。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ruby認定技術者のGoldに受かったので報告]]></title>
        <id>https://blog.bakunyo.com/2013/12/18/ruby_gold/</id>
        <link href="https://blog.bakunyo.com/2013/12/18/ruby_gold/">
        </link>
        <updated>2013-12-18T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;先日、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;認定技術者の&lt;span style=&quot;color: #f90e0e&quot;&gt;&lt;strong&gt;Gold&lt;/strong&gt;&lt;/span&gt;に合格してきました！&lt;/p&gt;
&lt;p&gt;点数は、92点。&lt;br&gt;
まさかの&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/07/11/Ruby%E8%AA%8D%E5%AE%9A%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AESilver%E3%81%AB%E5%8F%97%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E8%AB%B8%E3%80%85%E3%81%AE%E5%A0%B1%E5%91%8A&quot;&gt;前回のSilver&lt;/a&gt;の点数と同じでしたｗ&lt;/p&gt;
&lt;p&gt;実は、8月にも一度受けたのですが2問ほど点数が足りなくて落ちました。&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のバージョンが1.8だから今の試験は微妙…とかいう意見は気にしないですよー笑&lt;/p&gt;
&lt;p&gt;例によって勉強する際にやったことなどをメモしておきます。&lt;/p&gt;
&lt;h2&gt;参考書&lt;/h2&gt;
&lt;h4&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;公式資格教科書 &lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;技術者認定試験 Silver/Gold対応&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;col 1&lt;/th&gt;
&lt;th&gt;col 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41xcmbBRmlL._SL160_.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4774150010/bakunyo-22/&quot; rel=&quot;nofollow&quot; target=&quot;_top&quot;&gt;Ruby公式資格教科書 Ruby技術者認定試験 Silver/Gold対応 (EXPERT EXPASS)&lt;/a&gt;&lt;br&gt;&lt;br&gt;        増井 雄一郎,小川 伸一郎,(株)日立ソリューションズ 藁谷 修一,川尻 剛,牧 俊男,&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;アソシエーション,CTCテクノロジー(株) 監修 &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2&quot;&gt;技術評論社&lt;/a&gt; 2012-02-22&lt;br&gt;        売り上げランキング : 113836&lt;br&gt;&lt;table style=&quot;border:none&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;border:none;text-align:left;&quot;&gt;                                                                                                          &lt;/td&gt;&lt;td style=&quot;vertical-align:bottom;padding-left:10px;font-size:x-small;border:none&quot;&gt;by &lt;a href=&quot;http://yomereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ヨメレバ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;公式なので。&lt;/p&gt;
&lt;h4&gt;メタプログラミング&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;col 1&lt;/th&gt;
&lt;th&gt;col 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51TODrMIEnL._SL160_.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4048687158/bakunyo-22/&quot; rel=&quot;nofollow&quot; target=&quot;_top&quot;&gt;メタプログラミングRuby&lt;/a&gt;&lt;br&gt;&lt;br&gt;        Paolo Perrotta &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A1%A6%A5%E1%A5%C7%A5%A3%A5%A2%A5%EF%A1%BC%A5%AF%A5%B9&quot;&gt;アスキー・メディアワークス&lt;/a&gt; 2010-08-28&lt;br&gt;        売り上げランキング : 94483&lt;br&gt;&lt;table style=&quot;border:none&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;border:none;text-align:left;&quot;&gt;                                                                                                       &lt;/td&gt;&lt;td style=&quot;vertical-align:bottom;padding-left:10px;font-size:x-small;border:none&quot;&gt;by &lt;a href=&quot;http://yomereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ヨメレバ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Gold受けるには必読と言われている良書。&lt;br&gt;
2度目に読んだ時にようやく理解できました（苦笑）&lt;/p&gt;
&lt;h4&gt;パーフェクト&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;col 1&lt;/th&gt;
&lt;th&gt;col 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51K0jUf%2BiEL._SL160_.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/asin/4774158798/bakunyo-22/&quot; rel=&quot;nofollow&quot; target=&quot;_top&quot;&gt;パーフェクトRuby (PERFECT SERIES 6)&lt;/a&gt;&lt;br&gt;&lt;br&gt;        &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;サポーターズ,すがわら まさのり,寺田 玄太郎,三村 益隆,近藤 宇智朗,橋立 友宏,関口 亮一 &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2&quot;&gt;技術評論社&lt;/a&gt; 2013-08-10&lt;br&gt;        売り上げランキング : 8780&lt;br&gt;&lt;table style=&quot;border:none&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;border:none;text-align:left;&quot;&gt;                                                                                                          &lt;/td&gt;&lt;td style=&quot;vertical-align:bottom;padding-left:10px;font-size:x-small;border:none&quot;&gt;by &lt;a href=&quot;http://yomereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ヨメレバ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;基本文法以外にもメタプログラミングや標準添付ライブラリの章など、色々と参考になります。&lt;br&gt;
章によって著者が変わっていくのでそのあたりも楽しめる。&lt;/p&gt;
&lt;h2&gt;問題集&lt;/h2&gt;
&lt;h4&gt;公式問題集&lt;/h4&gt;
&lt;p&gt;上記公式テキストの後半に掲載されている問題集。基礎編も合わせて70問位あります。&lt;/p&gt;
&lt;h4&gt;CTC模擬問題&lt;/h4&gt;
&lt;p&gt;以下の2サイトで問題が解けるようになっています。&lt;br&gt;
たぶん、どちらも内容は同じなので好みのどちらかだけをやればOKだと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.school.ctc-g.co.jp/ruby/training_ruby_gold_01_10.html&quot;&gt;CTC教育サービス&lt;/a&gt;&lt;br&gt;
スマホにも対応しているのがGood。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jibun.atmarkit.co.jp/scenter/ittrain/121_cal.html&quot;&gt;ITトレメ&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/keyword/RSS&quot;&gt;RSS&lt;/a&gt;で購読できるので、毎日少しずつやりたい人にオススメ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考になる記事&lt;/h2&gt;
&lt;p&gt;勉強のススメ方 + サンプルコードなどもあり、大変参考になります。&lt;br&gt;
&lt;a href=&quot;http://qiita.com/nappa/items/9f2a06a81e223cb939ef&quot;&gt;Ruby技術者認定試験Gold 必勝合格法 - Qiita&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://coralreefs.hateblo.jp/entry/2013/05/09/170213&quot;&gt;Ruby認定試験Goldに合格する３つのポイント！ - Coral Reefs&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/rightgo09_ruby/20121226/p1&quot;&gt;やったーRuby技術者認定Gold受かったよー＼(^o^)／ - PerlerのRuby日記&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;その他のメモ&lt;/h2&gt;
&lt;p&gt;手前味噌ですが以下の記事も参考まで！&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/11/26/%E5%AE%9A%E6%95%B0%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%86%85%E5%AE%9A%E7%BE%A9&quot;&gt;定数のメソッド内定義&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/11/25/%E3%83%A6%E3%83%BC%E3%82%B6%E5%AE%9A%E7%BE%A9%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%3D%3D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89&quot;&gt;ユーザ定義クラスの==メソッド&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/10/25/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4&quot;&gt;メソッドとブロックの戻り値&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/10/23/Ruby%E5%88%B6%E5%BE%A1%E6%A7%8B%E9%80%A0%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%BE%E3%81%A8%E3%82%81&quot;&gt;Ruby制御構造の戻り値まとめ&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/10/23/%28Ruby%29floor%E3%81%A8truncate%E3%81%AE%E9%81%95%E3%81%84&quot;&gt;floorとtruncateの違い&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/08/26/%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92undef%E3%81%99%E3%82%8B&quot;&gt;クラスメソッドをundefする&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ユーザ定義クラスの==メソッド]]></title>
        <id>https://blog.bakunyo.com/2013/11/25/user_define_method/</id>
        <link href="https://blog.bakunyo.com/2013/11/25/user_define_method/">
        </link>
        <updated>2013-11-25T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;備忘用のメモ。&lt;/p&gt;
&lt;p&gt;==メソッドはサブクラスで個別に定義されるべきとしており、デフォルトでObject#==メソッドはequal?メソッドと同じになっているようです。&lt;/p&gt;
&lt;p&gt;ユーザ定義したクラスでは、素の状態では別オブジェクトで==メソッドを使うとfalseになります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
irb(main):001:0&gt; class Foo
irb(main):002:1&gt; end
=&gt; nil
irb(main):003:0&gt; Foo.new == Foo.new
=&gt; false
&lt;/pre&gt;]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[メソッドとブロックの戻り値]]></title>
        <id>https://blog.bakunyo.com/2013/10/25/return_value_of_method_and_block/</id>
        <link href="https://blog.bakunyo.com/2013/10/25/return_value_of_method_and_block/">
        </link>
        <updated>2013-10-25T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;メソッドとブロックの戻り値についてのメモ。&lt;/p&gt;
&lt;p&gt;yieldの前に変数を置いて、ブロックの戻り値を受け取ることができます。&lt;br&gt;
ブロックの戻り値は、最後に評価された値です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
def my_method
  a = yield
  puts a + &quot; received&quot;
end

my_method do
  &quot;block message&quot;
end        # &quot;block message received&quot;と表示される
&lt;/pre&gt;
&lt;p&gt;ブロック内でbreakを使うと、引数に指定した値がメソッドの戻り値となります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
def my_method
  a = yield
  puts a + &quot; received&quot;
end

my_method do
  break &quot;block message&quot;
end        # =&gt; &quot;block message&quot;
&lt;/pre&gt;
&lt;p&gt;メソッド内でreturnを使い、戻り値を指定することができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
def my_method
  a = yield
  if a == &quot;block message&quot;
    return &quot;same&quot;
  end
  puts a + &quot; received&quot;
end

my_method do
  &quot;block message&quot;
end        # =&gt; &quot;same&quot;
&lt;/pre&gt;]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(Ruby)floorとtruncateの違い]]></title>
        <id>https://blog.bakunyo.com/2013/10/23/floor_and_truncate/</id>
        <link href="https://blog.bakunyo.com/2013/10/23/floor_and_truncate/">
        </link>
        <updated>2013-10-23T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;Numeric#floorとNumeric#truncateの違い&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;floor&lt;/strong&gt;は自身以下で最大の整数を返し、&lt;strong&gt;truncate&lt;/strong&gt;は自身から0に近づくうち、最も近い整数を返します。&lt;br&gt;
正の値では結果は同じですが、負の値で結果が異なります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\&gt;irb
irb(main):001:0&gt; 1.2.floor
=&gt; 1
irb(main):002:0&gt; 1.2.truncate
=&gt; 1
irb(main):003:0&gt; -1.2.floor
=&gt; -2
irb(main):004:0&gt; -1.2.truncate
=&gt; -1
&lt;/pre&gt;
&lt;h2&gt;公式リファレンス&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/truncate.html&quot;&gt;Numeric#truncate&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://doc.ruby-lang.org/ja/1.9.3/method/Numeric/i/floor.html&quot;&gt;Numeric#floor&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsでファイル名の一覧を取得する]]></title>
        <id>https://blog.bakunyo.com/2013/09/04/windows_files/</id>
        <link href="https://blog.bakunyo.com/2013/09/04/windows_files/">
        </link>
        <updated>2013-09-04T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;Windowsでファイル名の一覧を取得するコマンド&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/UNIX&quot;&gt;UNIX&lt;/a&gt;/&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;系のOSだと&lt;code&gt;ls&lt;/code&gt;コマンドで出力できてしまうが、Windowsの&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8&quot;&gt;コマンドプロンプト&lt;/a&gt;でlsを実行すると日本語が文字化けすることが多く、困っていました。。&lt;br&gt;
で、Windowsコマンドはあまり使っていなかったのですが、調べてみると&lt;code&gt;dir&lt;/code&gt;が使えることが分かりました。&lt;br&gt;
オプションは以下を使用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/s&lt;/td&gt;
&lt;td&gt;サブディレクトリを含める&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/B&lt;/td&gt;
&lt;td&gt;ファイル名のみ表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;こんな感じで、出来ました〜&lt;/p&gt;
&lt;pre&gt;
\Desktop\inbox&gt;dir /B /s
\Desktop\inbox\file.xlsx
\Desktop\inbox\myfile.xls
\Desktop\inbox\shortcut
\Desktop\inbox\shortcut\bill.lnk
\Desktop\inbox\shortcut\ipmsg.lnk
\Desktop\inbox\shortcut\[sublime](http://d.hatena.ne.jp/keyword/sublime).lnk
&lt;/pre&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/Windows/20051025/223349/&quot;&gt;Dir - ITPro Windowsコマンド集&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[複数ファイルのuploadができる「Uploadify」を使ってみた]]></title>
        <id>https://blog.bakunyo.com/2013/08/27/uploadify/</id>
        <link href="https://blog.bakunyo.com/2013/08/27/uploadify/">
        </link>
        <updated>2013-08-27T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;複数ファイルのアップロードに特化した「Uploadify」&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;のプラグインで、複数のファイルを選択しアップロードできる&lt;a href=&quot;http://www.uploadify.com/&quot;&gt;uploadify&lt;/a&gt;というのを使ってみました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uploadify.com/&quot;&gt;&lt;img src=&quot;http://capture.heartrails.com/150x130/shadow?http://www.uploadify.com/&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.uploadify.com/&quot;&gt;HTML5 File Upload Script, jQuery Multiple File Upload Plugin - Uploadify / UploadiFive - Uploadify&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.uploadify.com/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://www.uploadify.com/&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uploadify.com/demos/&quot;&gt;デモはこちら&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;p&gt;以下の記事が大変参考になりました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tinybeans.net/blog/2010/04/13-121311.html&quot;&gt;Ajax風にファイルをアップロードするjQueryプラグイン「Uploadify」の使い方 | かたつむりくんのWWW&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.tinybeans.net/blog/2010/04/13-121311.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://www.tinybeans.net/blog/2010/04/13-121311.html&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wataame.sumomo.ne.jp/archives/3370&quot;&gt;ファイルをまとめてアップロードする jQuery のプラグイン「Uploadify」の使い方。 | Wataame Frog&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://wataame.sumomo.ne.jp/archives/3370&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://wataame.sumomo.ne.jp/archives/3370&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ファイル拡張子の限定&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;fileTypeExts&lt;/strong&gt;というオプションで選択できるファイルの拡張子を限定できます。&lt;br&gt;
&lt;a href=&quot;http://www.uploadify.com/documentation/uploadify/filetypeexts/&quot;&gt;fileTypeExts - Uploadify Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uploadify.com/documentation/uploadify/filetypeexts/&quot;&gt;デモはこちら&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;指定外の拡張子が選ばれた場合の対応&lt;/h2&gt;
&lt;p&gt;ファイル選択のダイアログで「ファイルの種類」→「すべてのファイル」としてしまうと、他の拡張子も選択できてしまいます(キューには追加されない)。&lt;br&gt;
選択後には、警告ダイアログが表示されます。&lt;br&gt;
メッセージの内容は&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
Some files were not added to the queue:
&lt;/pre&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130827/20130827203147.png&quot; alt=&quot;f:id:bakunyo:20130827203147p:plain&quot; title=&quot;f:id:bakunyo:20130827203147p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;英語…ちょっと不親切なので、日本語に変えたいですね。&lt;br&gt;
このメッセージを変えるオプションがあっても良さそうなものですが、ありませんでした。&lt;br&gt;
そこで、&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/jquery&quot;&gt;jquery&lt;/a&gt;.uploadify.js&lt;/strong&gt;&lt;/span&gt;を編集します。&lt;br&gt;
282行目と572行目にメッセージがありました。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
...
  uploadQueue        : [], // The files currently to be uploaded
  errorMsg           : &#039;Some files were not added to the queue:&#039;
};
...
&lt;/pre&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
...
  // Reset some queue info
  this.queueData.errorMsg       = &#039;Some files were not added to the queue:&#039;;
  this.queueData.filesReplaced  = 0;
...
&lt;/pre&gt;
&lt;p&gt;上記2つを変更したら、メッセージを変えることができました！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クラスメソッドをundefする]]></title>
        <id>https://blog.bakunyo.com/2013/08/26/undef_class_method/</id>
        <link href="https://blog.bakunyo.com/2013/08/26/undef_class_method/">
        </link>
        <updated>2013-08-26T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;でクラスメソッドをundefする時のメモ。&lt;br&gt;
まずは以下のようにクラスメソッドを定義し、undefする。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
class A
  def A.msg
    puts &quot;class method&quot;
  end
end

class A
  undef A.msg
end
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;結果、エラーになる。&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;undef&lt;/code&gt;メソッドはシンボルまたは識別子を受け付けるけど、&lt;code&gt;A.msg&lt;/code&gt;だと識別子としては認識してくれないみたい。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;クラスを再オープンする。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
class &lt;&lt; A
  undef msg
end
&lt;/pre&gt;
&lt;p&gt;これでundefできました。&lt;/p&gt;
&lt;p&gt;ちなみに、undef_methodも同じようにクラスの再オープンをしないとエラーになる。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 3をインストールしてみた]]></title>
        <id>https://blog.bakunyo.com/2013/07/20/install_sublime3/</id>
        <link href="https://blog.bakunyo.com/2013/07/20/install_sublime3/">
        </link>
        <updated>2013-07-20T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3&quot;&gt;以前インストールした&lt;/a&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 2をバージョンアップして&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 3をインストールしたので、はじめにやったことのメモです。&lt;br&gt;
以下の記事を参考にしました。&lt;br&gt;
&lt;a href=&quot;http://futurismo.biz/archives/1572&quot;&gt;&lt;img src=&quot;http://capture.heartrails.com/150x130/shadow?http://futurismo.biz/archives/1572&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://futurismo.biz/archives/1572&quot;&gt;Sublime Text3をWindowsに入れてみた！初めての導入と簡単なカスタマイズまとめ | Futurismo&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://futurismo.biz/archives/1572&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://futurismo.biz/archives/1572&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;設定関連&lt;/h3&gt;
&lt;p&gt;Preferences &amp;gt; Settings - User&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
{
  // スペースやタブを表示する
  &quot;draw_white_space&quot;: &quot;all&quot;,

  // フォントサイズ
  &quot;font_size&quot;: 10.2,

  // カーソル行をハイライトする
  &quot;highlight_line&quot;: true,

  // 行間(上)
  &quot;line_padding_top&quot;: 3,

  // 左側溝との間隔
  &quot;margin&quot;: -3,

  // タブサイズ
  &quot;tab_size&quot;: 2,

  // タブを押した時スペースに
  &quot;translate_tabs_to_spaces&quot;: true,

  // 行末のスペースを保存時に削除
  &quot;trim_trailing_white_space_on_save&quot;: true,

  // 横スクロールをなくす
  &quot;word_wrap&quot;: true,

  // 無視するパッケージ
  &quot;ignored_packages&quot;:
  [
    &quot;Vintage&quot;
  ],
}
&lt;/pre&gt;
&lt;h3&gt;キー操作&lt;/h3&gt;
&lt;p&gt;Preferences &amp;gt; Key Bindings - User&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
[
  { &quot;keys&quot;: [&quot;alt+up&quot;], &quot;command&quot;: &quot;swap_line_up&quot; },
  { &quot;keys&quot;: [&quot;alt+down&quot;], &quot;command&quot;: &quot;swap_line_down&quot; },
]
&lt;/pre&gt;
&lt;p&gt;ecllipseっぽく、&lt;code&gt;alt + ↑&lt;/code&gt; &lt;code&gt;alt + ↓&lt;/code&gt;で行移動できるようにしました＾＾&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ruby認定技術者のSilverに受かったので諸々の報告]]></title>
        <id>https://blog.bakunyo.com/2013/07/11/ruby_silver/</id>
        <link href="https://blog.bakunyo.com/2013/07/11/ruby_silver/">
        </link>
        <updated>2013-07-11T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;Ruby認定技術者のSilverに&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;合格&lt;/strong&gt;&lt;/span&gt;してきました！&lt;/p&gt;
&lt;p&gt;得点は、92点（100点中）。&lt;/p&gt;
&lt;p&gt;勉強の仕方については他のブログ等で多数解説されているので、ここではこれから勉強を始めるという方に役に立ちそうなメモを残しておきます。&lt;/p&gt;
&lt;p&gt;Ruby公式資格教科書には、&lt;strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;実は沢山の訂正箇所があります。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学習を始める際には、まず訂正箇所を一気に直しちゃいましょう！&lt;/p&gt;
&lt;p&gt;正誤表は、以下で公開されています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gihyo.jp/book/2012/978-4-7741-5001-7/support&quot;&gt;サポートページ - Ruby公式資格教科書 Ruby技術者認定試験Silver/Gold対応&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;また、サポートページで記載されてないけど、&lt;span style=&quot;color: #ff0000&quot;&gt;ここも誤りでは？&lt;/span&gt;と思った箇所があるので以下に記載します。&lt;/p&gt;
&lt;h4&gt;[1つ目]p.210 Hashクラスの説明&lt;/h4&gt;
&lt;p&gt;ハッシュは連想配列とも呼ばれ、配列でのインデックスにあたるキーとして、数値以外の任意のRubyオブジェクトを利用できます。&lt;/p&gt;
&lt;p&gt;これは誤りとはいえないかもしれませんが、何か違和感を覚えました。。&lt;/p&gt;
&lt;p&gt;まるで、**&lt;span style=&quot;color: #ff0000&quot;&gt;連想配列は数値をキーに使用できない&lt;/span&gt;**かのような言い回しに感じませんか？&lt;/p&gt;
&lt;p&gt;僕の日本語読解能力が乏しいだけですかね？ そうかもしれないです。。。笑&lt;/p&gt;
&lt;h4&gt;[2つ目]p.228 表5-4 ファイルをテストするメソッド&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;誤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;正&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;単なるスペルミスですね。&lt;/p&gt;
&lt;p&gt;こちらはサポートページへお問い合わせ済です。&lt;/p&gt;
&lt;h4&gt;実は破壊的なメソッド一覧&lt;/h4&gt;
&lt;p&gt;公式問題集でかなりの割合を占める、破壊的・非破壊的メソッドの問題。&lt;br&gt;
&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;！（エクスクラメーションマーク）&lt;/strong&gt;&lt;/span&gt;が付いてればわかりやすいですが、無くても破壊的である場合が厄介です。&lt;/p&gt;
&lt;p&gt;ということで、！ の付いていない破壊的メソッド、通称**&lt;span style=&quot;color: #ff0000&quot;&gt;「実は破壊的なメソッド」&lt;/span&gt;**を一覧にしてみました。&lt;/p&gt;
&lt;h4&gt;Stringクラス&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;実は破壊的なメソッド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;insert&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;concat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;［］=&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;おまけ&lt;/h5&gt;
&lt;p&gt;String#deleteは&lt;strong&gt;実は破壊的でない&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Arrayクラス&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;実は破壊的なメソッド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;concat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;insert&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;unshift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[]=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;fill&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;delete_at&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;delete_if&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;clear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pop&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Hashクラス&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;実は破壊的なメソッド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;［］=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;delete_if&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;clear&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;おまけ&lt;/h4&gt;
&lt;p&gt;実は破壊的じゃないメソッド merge、invert&lt;/p&gt;
&lt;h4&gt;疑問…&lt;/h4&gt;
&lt;p&gt;String#deleteは非破壊的なのに、Array#deleteは破壊的なんですよね。&lt;/p&gt;
&lt;p&gt;このあたり、どう定義分けをしているのか気になって仕方ありません。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2013.7.17 追記&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;破壊的メソッドの覚え方について以下の記事を参考にさせて頂いていました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jijixi.azito.com/gotow/widestudio/ruby_with_widestudio/1st_step_ruby_for_C_users.html&quot;&gt;C 言語ユーザのための Ruby 入門&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下は引用。破壊的メソッドは、基本的に以下の3つのどれかだそうです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;hr&gt;
&lt;p&gt;1.末尾に &amp;quot;!&amp;quot; が付いているメソッド&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.リスト的な構造を持つクラスにおいて特定の要素を追加・削除・変更するメソッド&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3.オブジェクトそのものを置換えたり、消去したり、属性を変更したりするメソッド&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;hr&gt;
&lt;p&gt;たしかに、こう考えるとわかりやすいですね！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Overrideできない演算子&lt;/h4&gt;
&lt;p&gt;最後に、Overrideできない演算子をご紹介しておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs &quot;&gt;= += ! not &amp;amp;&amp;amp; and || or :? ::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これだけ見るとただの記号の羅列にしか見えなくて覚えられそうにありませんが、&lt;br&gt;
以下のように分類すると記憶しやすいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代入演算子（自己代入を含む）&lt;/li&gt;
&lt;li&gt;論理演算子&lt;/li&gt;
&lt;li&gt;三項演算子&lt;/li&gt;
&lt;li&gt;::&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、次はGold目指してがんばります！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ミニツクの演習2を解いてみた。]]></title>
        <id>https://blog.bakunyo.com/2013/06/27/minitsuku2/</id>
        <link href="https://blog.bakunyo.com/2013/06/27/minitsuku2/">
        </link>
        <updated>2013-06-27T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://www.minituku.net/?locale=ja&quot;&gt;&lt;img src=&quot;http://capture.heartrails.com/150x130/shadow?http://www.minituku.net/?locale=ja&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.minituku.net/?locale=ja&quot;&gt;ミニツク - Rubyのe-ラーニング研修システム&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.minituku.net/?locale=ja&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://www.minituku.net/?locale=ja&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の&lt;a href=&quot;http://d.hatena.ne.jp/keyword/e%A5%E9%A1%BC%A5%CB%A5%F3%A5%B0&quot;&gt;eラーニング&lt;/a&gt;システム&lt;/strong&gt;&lt;/span&gt;である&lt;a href=&quot;http://www.minituku.net/?locale=ja&quot;&gt;ミニツク&lt;/a&gt;が初級者にも分かりやすく内容も充実しています。&lt;br&gt;
自分のレベル感にぴったりと合っているので、最近は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のお勉強は専らこれです。&lt;br&gt;
Matzさんのビデオ講義もあり、楽しく学習できます。&lt;br&gt;
&lt;a href=&quot;http://www.minituku.net/courses/500228005/lessons/137422063/exercises/762982128?locale=ja&quot;&gt;演習コースの2問目&lt;/a&gt;を解いたのですが、ちょっと引っ掛かったのでメモを残しておきます。&lt;br&gt;
最初に、自分が作成したコードは以下です。&lt;br&gt;
所用時間は20分位でした（10分オーバーｗ）。&lt;/p&gt;
&lt;p&gt;（見るからに酷いコードですね）&lt;br&gt;
まぁとりあえず動くし、OKとして解答を見ると、衝撃のコード量。&lt;/p&gt;
&lt;p&gt;ここまで簡潔に書けるんですね…（感動）&lt;br&gt;
ただ、上記を実行してみるとエラーが発生。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
minitk.rb:49:in `block in clever_print&#039;: undefined method `to_a&#039; for &quot;the&quot;:String (NoMethodError)
&lt;/pre&gt;
&lt;p&gt;なるほど調べてみると、&lt;strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;String&lt;/span&gt;&lt;strong&gt;クラスの&lt;/strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;to_a&lt;/span&gt;&lt;strong&gt;メソッドは無くなってしまったようですね(たぶん1.9以降で)。&lt;br&gt;
という事で、型を判別して&lt;/strong&gt;String&lt;/strong&gt;の場合はそのまま配列にpushすることにしました。&lt;/p&gt;
&lt;p&gt;これで正常に動くようになりました。&lt;br&gt;
splat&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;とか、case文の条件判断とか、大変勉強になります～！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オプションの由来シリーズ - 正規表現]]></title>
        <id>https://blog.bakunyo.com/2013/06/25/regex_options/</id>
        <link href="https://blog.bakunyo.com/2013/06/25/regex_options/">
        </link>
        <updated>2013-06-25T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;コマンドやメソッドでよく見る&lt;strong&gt;1文字&lt;/strong&gt;のオプション指定。例えば、こうゆうの。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
tar zxvf
ps aux
&lt;/pre&gt;
&lt;p&gt;とても便利だけど、何の略か分からないととても覚えにくいです。&lt;br&gt;
ということで、少しずつ由来を調べていくことにしました。&lt;br&gt;
調べても見つからない所は、想像で補います(間違えてたら教えてください)。&lt;/p&gt;
&lt;p&gt;今回は、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;のオプション。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;のオプション&lt;/h2&gt;
&lt;h4&gt;アンカー&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;由来&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/b&lt;/td&gt;
&lt;td&gt;単語境界&lt;/td&gt;
&lt;td&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;Border&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;マッチオプション&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;由来&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;大文字小文字の違いを無視する&lt;/td&gt;
&lt;td&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;IgnoreCase&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;マッチする場所すべてを対象にする&lt;/td&gt;
&lt;td&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;GlobalMatch&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://doc.mas3.net/regexp/reference.html&quot;&gt;手を動かしながら覚える正規表現＜リファレンス＞&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://msdn.microsoft.com/ja-jp/library/vstudio/yd1hzczs.aspx&quot;&gt;正規表現のオプション - MSDN&lt;/a&gt;&lt;br&gt;
i =&amp;gt; Ignoreのことだったのですね〜。知れば大したことないですが、知らないと何のことやら。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[crontab使い方まとめ。]]></title>
        <id>https://blog.bakunyo.com/2013/06/20/crontab/</id>
        <link href="https://blog.bakunyo.com/2013/06/20/crontab/">
        </link>
        <updated>2013-06-20T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130620/20130620214241.jpg&quot; alt=&quot;f:id:bakunyo:20130620214241j:plain&quot; title=&quot;f:id:bakunyo:20130620214241j:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;で定期的にコマンドを実行してくれる&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;crontab&lt;/strong&gt;&lt;/span&gt;の使い方をまとめてみました。&lt;/p&gt;
&lt;h2&gt;まずはcrondが起動しているか確認&lt;/h2&gt;
&lt;p&gt;デフォルトでは自動起動のはずですが、念の為crondが起動しているかを確認しておきましょう。&lt;br&gt;
ここで起動していなければ、その後の設定をいくらしても動いてくれることはありません:D&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
# /etc/rc.d/init.d/crond status
crond (pid  xxxx) を実行中...     // ちゃんと起動していますね！
&lt;/pre&gt;
&lt;h2&gt;crontabファイルの設定&lt;/h2&gt;
&lt;p&gt;crondが起動していることを確認できたら、crontabファイルの設定です。&lt;br&gt;
crontabファイルには「&lt;strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;この日付のこの時刻にこのコマンドを実行せよ&lt;/span&gt;&lt;/strong&gt;」という命令が書き込まれています。&lt;br&gt;
crontabファイルは&lt;code&gt;/var/spool/cron/user&lt;/code&gt;(ユーザー毎)に保存されていますが、&lt;strong&gt;基本的にcrontabファイルは直接編集せず、&lt;/strong&gt;&lt;code&gt;crontab&lt;/code&gt;コマンドを使って編集するのが習わしです。&lt;br&gt;
以下はcrontabコマンドの説明です。&lt;/p&gt;
&lt;h4&gt;crontabコマンド&lt;/h4&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
crontab [-u user] file
　または
crontab [-u user] [-e | -l | -r | -i]
&lt;/pre&gt;
&lt;h4&gt;各オプションの説明&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;userに対象となるユーザーを指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;エディタを起動し、crontabの内容を編集する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;現在登録されている内容を表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;現在登録されている内容を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;(rと併用して)削除する前に確認プロンプトを表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;オプションでeを指定しようとしたら間違えてrを押してしまい、設定が全て削除されてしまった悲しい事例が各所で報告されています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cles.jp/item/3303&quot;&gt;crontab -r とやってしまった時の対処法&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.cles.jp/item/3303&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://blog.cles.jp/item/3303&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://blog.kentarok.org/entry/20061030/1162206137&quot;&gt;crontab -r を安全にする - delirious thoughts&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.kentarok.org/entry/20061030/1162206137&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://blog.kentarok.org/entry/20061030/1162206137&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;誤って削除してしまわないよう、eオプションは使わずに&lt;strong&gt;別ファイルにて管理した方が望ましい&lt;/strong&gt;ようです。&lt;br&gt;
現在eオプションのみで管理しているなら、lオプションをリダイレクトして別ファイルに書き出しておきましょう。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
# crontab -u user -l &gt; ~/crontab.bk
&lt;/pre&gt;
&lt;h2&gt;crontabファイルの書き方&lt;/h2&gt;
&lt;p&gt;それではメインの、crontabファイルの書き方についてです。&lt;br&gt;
「&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;この日付のこの時刻にこのコマンドを実行せよ&lt;/strong&gt;&lt;/span&gt;」という命令を記述するために、以下の書式を用います。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
分　時　日　月　曜日　＜コマンド＞
&lt;/pre&gt;
&lt;p&gt;日付・時刻を表す5つのフィールドには、以下の値を設定できます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フィールド&lt;/th&gt;
&lt;th&gt;取りうる値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;分&lt;/td&gt;
&lt;td&gt;0~59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;時&lt;/td&gt;
&lt;td&gt;0~23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日&lt;/td&gt;
&lt;td&gt;1~31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;月&lt;/td&gt;
&lt;td&gt;1~12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;曜日&lt;/td&gt;
&lt;td&gt;0~7 (0と7が日曜日)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;範囲指定&lt;/h4&gt;
&lt;p&gt;各フィールドは&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;-(ハイフン)&lt;/strong&gt;&lt;/span&gt;でつなげて範囲指定することができます。&lt;br&gt;
以降、分フィールドを書き方の例として挙げていきます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
5-10    // 5分・6分・7分・8分・9分・10分に実行
&lt;/pre&gt;
&lt;p&gt;このように、&lt;code&gt;5-10&lt;/code&gt;と範囲指定することで5分~10分の間に毎分コマンドが実行されます。&lt;br&gt;
全範囲（分フィールドだと0~59）を範囲指定したい場合には&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;*(アスタリスク)&lt;/strong&gt;&lt;/span&gt;を使用します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
*   // 毎分実行
&lt;/pre&gt;
&lt;h4&gt;リスト指定&lt;/h4&gt;
&lt;p&gt;不連続な複数の値を指定したい時は、&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;,(カンマ)&lt;/strong&gt;&lt;/span&gt;で区切ってリスト指定することができます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
1,3,5   // 1分・3分・5分に実行
&lt;/pre&gt;
&lt;p&gt;リスト指定の中に範囲指定を含めることも可能です。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
1,3,5-10   // 1分・3分・5分・6分・7分・8分・9分・10分に実行
&lt;/pre&gt;
&lt;h4&gt;間隔値指定&lt;/h4&gt;
&lt;p&gt;「◯分間隔」などとしたい場合は、範囲指定と併せて間隔値を指定することができます。&lt;br&gt;
範囲指定の後に&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;/(スラッシュ)&lt;/strong&gt;&lt;/span&gt;をつづけ、その後に間隔値を指定します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
5-10/2   // 5分・7分・9分(5分~10分の間の2分間隔)に実行
*/5   // 5分おきに実行
&lt;/pre&gt;
&lt;h4&gt;設定例&lt;/h4&gt;
&lt;p&gt;これらの書き方を組み合わせて、「&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;この日付のこの時刻に&lt;/strong&gt;&lt;/span&gt;」の部分を指定します。&lt;br&gt;
以下、設定例です。&lt;br&gt;
ここでは仮に、usr/bin/cmdをコマンドとして実行するとします。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
00 14 * * * /usr/bin/cmd      // 毎日14:00に実行
* * * * * /usr/bin/cmd        // 毎分実行
15,30 06 * * 2 /usr/bin/cmd   // 毎週火曜日の6:15と6:30に実行
05 23 * 3-5 4 /usr/bin/cmd    // 3~5月の毎週木曜日23:05に実行
&lt;/pre&gt;
&lt;p&gt;といった具合です。&lt;/p&gt;
&lt;h4&gt;ちょっと細かい話。&lt;/h4&gt;
&lt;p&gt;cronは毎分このcrontabファイルをチェックし、**&lt;span style=&quot;color: #ff0000&quot;&gt;分・時・月が現在時刻と一致し、かつ日と曜日フィールドの2つのいずれかが現在時刻と一致すれば&lt;/span&gt;**コマンドを実行します。&lt;br&gt;
この部分が少しややこしいのですが、cronは日フィールドと曜日フィールドの2つと見比べてコマンド実行するかを判断します。なので、この２つに関しては少し見方を変えてあげます。&lt;br&gt;
具体的には、日フィールドと曜日フィールドのそれぞれにおいて、&lt;em&gt;(アスタリスク)と&lt;/em&gt;以外を指定した場合のどのような指定になるかを分けるとわかりやすいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   | 日が*           | 日が*以外       
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;------ | ------------- | ------------&lt;br&gt;
曜日が*   | 毎日            | 日フィールドで指定した日&lt;br&gt;
曜日が*以外 | 曜日フィールドで指定した日 | いずれかに当てはまる日&lt;/p&gt;
&lt;p&gt;設定例を以下に挙げます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
00 14 * * * /usr/bin/cmd         // 毎日14:00に実行
00 14 1,5 * * /usr/bin/cmd     // 毎月1日,5日の14:00に実行
00 14 * * 4 /usr/bin/cmd        // 毎週木曜日14:00に実行
00 14 1,5 * 4 /usr/bin/cmd    // 毎月1日,5日と毎週木曜日14:00に実行
&lt;/pre&gt;
&lt;p&gt;といった感じになります。&lt;/p&gt;
&lt;p&gt;他にも書くべきこととして**&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&quot;&gt;環境変数&lt;/a&gt;の指定**などがあるのですが、疲れたのでここまで。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[git logで日報を書く]]></title>
        <id>https://blog.bakunyo.com/2013/05/25/daily_report_git/</id>
        <link href="https://blog.bakunyo.com/2013/05/25/daily_report_git/">
        </link>
        <updated>2013-05-25T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;いつも業務後に日報を書いてるんですけど、今日開発した部分を&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;Git logを参照して&lt;/strong&gt;&lt;/span&gt;ぱぱっとつくれないかな？ と思い調べてみたら、&lt;strong&gt;ありました。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;やり方。&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;--pretty&lt;/code&gt;というオプションで、フォーマットを指定できるみたいです。という訳で、&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
C:\workspace\test&gt;git log --pretty=format:&quot;%cd %s&quot;
Thu May 23 21:57:36 2013 +0900 change file ext from Text to Markdown
Thu May 23 21:56:18 2013 +0900 modify content
Thu May 23 21:54:39 2013 +0900 create README file
&lt;/pre&gt;
&lt;p&gt;こんな感じでできました！&lt;/p&gt;
&lt;p&gt;このやり方だと**&lt;span style=&quot;color: #ff0000&quot;&gt;1コミット1行&lt;/span&gt;**になるので、どこからが本日分の作業だったのかが一目瞭然です！&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;code&gt;format:&lt;/code&gt;の部分を省略して&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
git log --pretty=&quot;%cd %s&quot;
&lt;/pre&gt;
&lt;p&gt;でもうまく結果が表示されました〜！&lt;/p&gt;
&lt;h4&gt;参考URL&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%B1%A5%E6%AD%B4%E3%81%AE%E9%96%B2%E8%A6%A7&quot;&gt;Git の基本 - コミット履歴の閲覧&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[そろそろ整理しておきたい、Gemコマンドの使い方]]></title>
        <id>https://blog.bakunyo.com/2013/05/23/gem_command/</id>
        <link href="https://blog.bakunyo.com/2013/05/23/gem_command/">
        </link>
        <updated>2013-05-23T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のパッケージ管理システム&lt;/strong&gt;であるGemを使う機会も増えてきたので、そろそろコマンドをまとめておくことにしました。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/RubyGems&quot;&gt;RubyGems&lt;/a&gt;とは?&lt;/h2&gt;
&lt;h4&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Wikipedia&quot;&gt;Wikipedia&lt;/a&gt;より引用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/RubyGems&quot;&gt;RubyGems&lt;/a&gt;は、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;言語用のパッケージ管理システムであり、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のプログラムと（&amp;quot;gem&amp;quot; と呼ばれる）ライブラリの配布用標準フォーマットを提供している。gemを容易に管理でき、gemを配布するサーバの機能も持つ。&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;バージョン1.9以降では標準ライブラリの一部となっている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;便利なGemパッケージが世の中には沢山配布されているので、有効に活用していきたいですね！&lt;br&gt;
Gemの公式マニュアルは以下になります。&lt;br&gt;
&lt;a href=&quot;http://docs.rubygems.org/&quot;&gt;RubyGems Manuals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;それでは、よく使うGemコマンドを用途別にまとめていきます。&lt;/p&gt;
&lt;h2&gt;Gemを探す&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;または&lt;code&gt;search&lt;/code&gt;は、ローカルもしくはリモートにあるGemパッケージを検索します。&lt;br&gt;
2つのコマンドはほぼ同じ動作をします。違いは以下の点です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;： **&lt;span style=&quot;color: #ff0000&quot;&gt;Gemパッケージ名の頭から文字列を指定して&lt;/span&gt;**検索&lt;br&gt;
&lt;code&gt;search&lt;/code&gt;： **&lt;span style=&quot;color: #ff0000&quot;&gt;Gemパッケージ名を&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;で&lt;/span&gt;**検索&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem [list / search] [String] [options]&lt;/td&gt;
&lt;td&gt;Stringで始まるGemを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のオプションを指定することができます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-i, --[no-]installed&lt;/td&gt;
&lt;td&gt;インストール済み[でない]Gemに限定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d, --[no-]details&lt;/td&gt;
&lt;td&gt;詳細を併せて表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l, --local&lt;/td&gt;
&lt;td&gt;localを対象とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-r, --remote&lt;/td&gt;
&lt;td&gt;remoteを対象とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-b, --both&lt;/td&gt;
&lt;td&gt;local, remoteどちらも対象とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;デフォルトで指定されているオプション&lt;/h5&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
--local --no-details
&lt;/pre&gt;
&lt;p&gt;デフォルトでは&lt;span style=&quot;color: #ff0000&quot;&gt;--local&lt;/span&gt;が指定されているので、外部のを探したい時は&lt;span style=&quot;color: #ff0000&quot;&gt;-r&lt;/span&gt;指定しないとダメですね〜。&lt;/p&gt;
&lt;p&gt;また、インストールしてあったけどこれ何だっけ？ って時には&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
gem list GEMNAME -d
&lt;/pre&gt;
&lt;p&gt;で中身を確認します。便利ですね！&lt;/p&gt;
&lt;p&gt;なお、Gemパッケージは以下のWebサイトでも探すことができます。&lt;br&gt;
&lt;a href=&quot;http://rubygems.org/&quot;&gt;RubyGems.org&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.ruby-toolbox.com/&quot;&gt;The Ruby Toolbox&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Gemをインストールする&lt;/h2&gt;
&lt;p&gt;Gemパッケージをインストールするコマンドです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem install [GEMNAME] [options]&lt;/td&gt;
&lt;td&gt;localまたはremoteからGemパッケージをインストール&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のオプションを指定することができます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-v, --version&lt;/td&gt;
&lt;td&gt;バージョン指定 ex) -v &amp;quot;= 1.0.0&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--[no-]rdoc&lt;/td&gt;
&lt;td&gt;Rdocドキュメントをダウンロードする[しない]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--[no-]ri&lt;/td&gt;
&lt;td&gt;riドキュメントをダウンロードする[しない]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l, --local&lt;/td&gt;
&lt;td&gt;localからインストール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-r, --remote&lt;/td&gt;
&lt;td&gt;remoteからインストール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-b, --both&lt;/td&gt;
&lt;td&gt;local, remoteどちらからでも&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;デフォルトで指定されているオプション&lt;/h5&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
--both --version &#039;&gt;= 0&#039; --rdoc --ri --no-force
--install-dir /my/gems/directory
&lt;/pre&gt;
&lt;p&gt;個人的に使ったことが無いですが、ローカルからインストールする時は、&lt;code&gt;.gem&lt;/code&gt;ファイルのある場所に移動してからコマンドを実行するみたいです。&lt;/p&gt;
&lt;h4&gt;アンインストール&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem uninstall [GEMNAME]&lt;/td&gt;
&lt;td&gt;Gemパッケージをアンインストール&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;versionが違うやつとかはややこしいのでこれで除いたりしますね。&lt;/p&gt;
&lt;h2&gt;インストールしたGemファイル（の場所）を探す&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem which [GEMNAME]&lt;/td&gt;
&lt;td&gt;localにあるGEMNAMEパスを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;gemファイルが置いてある場所の階層が深かったりするので、&lt;strong&gt;地味に便利&lt;/strong&gt;です。&lt;br&gt;
ちなみに、&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem unpack [GEMNAME]&lt;/td&gt;
&lt;td&gt;GEMFILEをカレントディレクトリにコピーする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;**&lt;span style=&quot;color: #ff0000&quot;&gt;Gemの中身を見たい時&lt;/span&gt;**にはこちらの方が便利かもしれません。&lt;/p&gt;
&lt;h2&gt;Gem自身の管理&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem update --system&lt;/td&gt;
&lt;td&gt;Gem自身をupdateする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gem -v&lt;/td&gt;
&lt;td&gt;Gemのバージョンを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;あんまりやったことが無いです（汗）&lt;/p&gt;
&lt;h2&gt;ヘルプ&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gem help commands&lt;/td&gt;
&lt;td&gt;使用できるコマンドの一覧を表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gem help [command]&lt;/td&gt;
&lt;td&gt;commandのヘルプを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gem server&lt;/td&gt;
&lt;td&gt;サーバーを立ててgemのマニュアルを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;分からなくなったらとりあえず&lt;code&gt;gem help command&lt;/code&gt;です！&lt;/p&gt;
&lt;h2&gt;ビルド関連&lt;/h2&gt;
&lt;p&gt;自作したGemをビルドするときに使います。&lt;br&gt;
こちらはまだ試していないので、、いずれ更新します！&lt;/p&gt;
&lt;h4&gt;参考になるサイト&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://ayaketan.hatenablog.com/entry/20111214/1323833813&quot;&gt;RubyGemsの使い方 - ayaketanのプログラミング勉強日記&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://docs.rubygems.org/&quot;&gt;RubyGems Manuals&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://yakinikunotare.boo.jp/orebase/index.php?Ruby%2FRubygems%BB%C8%A4%A4%CA%FD%A4%DE%A4%C8%A4%E1&quot;&gt;Ruby/Rubygems使い方まとめ&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1ライナーのコマンドを投稿するサイトが面白い]]></title>
        <id>https://blog.bakunyo.com/2013/05/18/one_liners/</id>
        <link href="https://blog.bakunyo.com/2013/05/18/one_liners/">
        </link>
        <updated>2013-05-18T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130518/20130518012220.png&quot; alt=&quot;f:id:bakunyo:20130518012220p:plain&quot; title=&quot;f:id:bakunyo:20130518012220p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;コマンドラインで使える1ライナーを投稿して、相互に評価しあうサイト。&lt;br&gt;
ちょっとした空き時間につい見てしまいます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.commandlinefu.com/commands/browse&quot;&gt;&lt;img src=&quot;http://capture.heartrails.com/150x130/shadow?http://www.commandlinefu.com/commands/browse&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.commandlinefu.com/commands/browse&quot;&gt;All commands | commandlinefu.com&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.commandlinefu.com/commands/browse&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://www.commandlinefu.com/commands/browse&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特に&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;１ライナーとか勉強がてら見てます。例えば、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ruby -rdate -e &#039;puts DateTime.now&#039;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;で現在時刻を表示できる。&lt;br&gt;
&lt;code&gt;-rlibrary&lt;/code&gt;でライブラリをrequireすることができるんですね〜！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSSのPosition指定(absolute)でハマったポイント]]></title>
        <id>https://blog.bakunyo.com/2013/05/16/css_position/</id>
        <link href="https://blog.bakunyo.com/2013/05/16/css_position/">
        </link>
        <updated>2013-05-16T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;のPositionで&lt;code&gt;absolute&lt;/code&gt;指定とかしてたら何故か他の部分にまで影響してレイアウトが崩れたので何故なのか確認してみた。&lt;/p&gt;
&lt;h2&gt;崩れた場合のサンプル&lt;/h2&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074651.png&quot; alt=&quot;f:id:bakunyo:20130516074651p:plain&quot; title=&quot;f:id:bakunyo:20130516074651p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;枠だけグレーの四角がinput要素(text)で、それに対し右上に絶対位置指定で色付きグレーのdiv要素(something)を置いてる。&lt;br&gt;
ここまでは良いんだけど、その次に置きたい枠が緑色のdiv要素(next)が次じゃなくてinputに重なるようにして配置されてしまっている。&lt;/p&gt;
&lt;p&gt;サンプルのソースは以下。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
&lt;!doctype html&gt;
&lt;html lang=&quot;ja&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;position test&lt;/title&gt;
&lt;style&gt;
    .box {
      position: relative;
      width: 100px;
      height: 30px;
    }
    .text {
      position: absolute;
      width: 100px;
    }
    .something {
      position: absolute;
      right: -10px;
      top: -10px;
      width: 20px;
      height: 20px;
      background: #ccc;
    }
    .next {
      position: relative;
      width: 200px;
      height: 50px;
      border: 2px solid #2d5;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;box&quot;&gt;
  &lt;input type=&quot;text&quot; class=&quot;text&quot;&gt;
  &lt;div class=&quot;something&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;next&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/pre&gt;
&lt;h2&gt;修正した&lt;/h2&gt;
&lt;p&gt;色々試してみたんだけど、次のようにして解決できた。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
.box {
    position: relative;
    width: 100px;
    height: 30px;   /* ←高さを指定する */
}
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/chrome&quot;&gt;chrome&lt;/a&gt;の&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D9%A5%ED%A5%C3%A5%D1&quot;&gt;デベロッパ&lt;/a&gt;ーツールで確認したところ、div要素(box)の高さが0となっていて、それを基準に配置していたので結果として重なってしまっていたということ。&lt;/p&gt;
&lt;p&gt;結果もきちんと反映されました。&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130516/20130516074446.png&quot; alt=&quot;f:id:bakunyo:20130516074446p:plain&quot; title=&quot;f:id:bakunyo:20130516074446p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[image_tagでソース指定でハマった]]></title>
        <id>https://blog.bakunyo.com/2013/04/25/source_of_image_tag/</id>
        <link href="https://blog.bakunyo.com/2013/04/25/source_of_image_tag/">
        </link>
        <updated>2013-04-25T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;でビューヘルパーの&lt;code&gt;stylesheet_link_tag&lt;/code&gt;や&lt;code&gt;javascript_include_tag&lt;/code&gt;とかって、ファイルの拡張子外して&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
&lt;%= stylesheet_link_tag &quot;application&quot; %&gt; # application.cssを読む
&lt;%= javascript_include_tag &quot;application&quot; %&gt; # application.jsを読む
&lt;/pre&gt;
&lt;p&gt;って指定するけど、&lt;code&gt;image_tag&lt;/code&gt;に関しては&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
&lt;%= image_tag &quot;img.png&quot; %&gt;
&lt;/pre&gt;
&lt;p&gt;ってきちんと拡張子書いてあげないとだめ(画像の種類によって拡張子が違うから当たり前なんだけど)。&lt;/p&gt;
&lt;p&gt;しかも、ブラウザのソース見ると/assets/img.pngみたいに&lt;strong&gt;imagesディレクトリが無い&lt;/strong&gt;から余計混乱する(これは、AssetPipelineが処理してるのが原因っぽい)。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RailsのActionMailerを使いGmail経由でメール送信する]]></title>
        <id>https://blog.bakunyo.com/2013/04/24/action_mailer/</id>
        <link href="https://blog.bakunyo.com/2013/04/24/action_mailer/">
        </link>
        <updated>2013-04-24T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のバージョンは3.2。&lt;/p&gt;
&lt;p&gt;以前は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/tls&quot;&gt;tls&lt;/a&gt;用のライブラリを自前で用意しなきゃいけなかったり大変だったみたいですが、現在はとても簡単になっています。&lt;/p&gt;
&lt;h3&gt;1.設定&lt;/h3&gt;
&lt;p&gt;まずは設定ファイルを編集します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
config/environments/development.rb

config.action_mailer.delivery_method = :smtp
config.action_mailer.raise_delivery_errors = true 
config.action_mailer.smtp_settings = {
  :address =&gt; &#039;smtp.gmail.com&#039;,
  :port =&gt; 587,
  :authentication =&gt; :login,
  :user_name =&gt; &#039;username&#039;, # ユーザー名
  :password =&gt; &#039;password&#039; # パスワード
}
&lt;/pre&gt;
&lt;h3&gt;2.Mailerを生成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/rails&quot;&gt;rails&lt;/a&gt;コマンドで生成できます。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
rails generate TestMailer sendmail
&lt;/pre&gt;
&lt;h3&gt;3.Mailerを編集&lt;/h3&gt;
&lt;p&gt;2で生成したMailerを編集します。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
app/mailer/test_mailer.rb

# coding: utf-8
class TestMailer &lt; ActionMailer::Base
  default from: &quot;xxxxxx@gmail.com&quot;

  # Subject can be set in your I18n file at config/locales/en.yml
  # with the following lookup:
  #
  #   en.test_mailer.sendmail.subject
  #
  def sendmail
    @greeting = &quot;Hi&quot;

    mail(:to =&gt; &quot;xxxxxx@gmail.com&quot;,
   :subject =&gt; &#039;テスト送信&#039;)
  end
end
&lt;/pre&gt;
&lt;p&gt;通常のコントローラーと同じように、テンプレート変数などをセット可能。&lt;/p&gt;
&lt;h3&gt;4.メール本文を編集&lt;/h3&gt;
&lt;p&gt;ビュー編集(erb)と同じです。2で自動的にerbファイルも生成されるはず。&lt;br&gt;
htmlにしたければ、拡張子を変更。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
app/views/test_mailer/sendmail.text.erb

中身は自由に。
&lt;/pre&gt;
&lt;h3&gt;5.Mailerを呼び出すControllerを定義&lt;/h3&gt;
&lt;p&gt;MailerをどこかのControllerで呼び出してあげる必要があります。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
app/controllers/hoge_controller.rb

def mail_send
  @mail = TestMailer.sendmail.deliver
  render :text =&gt; &#039;メール送信完了&#039;
end
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/sendmail&quot;&gt;sendmail&lt;/a&gt;メソッドはMail::Messageオブジェクトを返すだけなので、deliverメソッドを呼び出す必要があることに注意です。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RailsはどこでCSSを指定するのか？]]></title>
        <id>https://blog.bakunyo.com/2013/04/20/css_in_rails/</id>
        <link href="https://blog.bakunyo.com/2013/04/20/css_in_rails/">
        </link>
        <updated>2013-04-20T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;最近&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;を触ることになり一通りTutorialを実践しているのだが、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;をどこで指定した良いのか分からなかったので調べてみた。&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;のバージョンは3.2。&lt;/p&gt;
&lt;h4&gt;レイアウトテンプレート内の記述&lt;/h4&gt;
&lt;p&gt;まず一般的に、レイアウトテンプレート内で&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;用のビューヘルパーを使う。&lt;br&gt;
デフォルトでは以下のようになっているはず。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
app/views/layouts/application.html.erb
・・・・
　&lt;%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;
・・・・
&lt;/pre&gt;
&lt;p&gt;stylesheet_link_tagの第1引数で、app/assets/stylesheets/からの&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%A5%D1%A5%B9&quot;&gt;相対パス&lt;/a&gt;で指定する。&lt;br&gt;
上記の場合、app/assets/stylesheets/application.&lt;a href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;が読み込まれる。&lt;/p&gt;
&lt;h4&gt;デフォルトの&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;の記述&lt;/h4&gt;
&lt;p&gt;次に、指定したapplication.&lt;a href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;を開いてみる。&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
app/assets/stylesheets/application.css

　/*
 * This is a manifest file that&#039;ll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.
 *
 * You&#039;re free to add application-wide styles to this file and they&#039;ll appear at the top of the
 * compiled file, but it&#039;s generally better to create a new file per style scope.
 *
 *= require_self
 *= require_tree .
 */
&lt;/pre&gt;
&lt;p&gt;ここでファイルを開いて、コメントしか無いからといってスルーしないよう注意。&lt;/p&gt;
&lt;p&gt;Rails 3.1から&lt;strong&gt;Asset pipeline&lt;/strong&gt;という仕組みが導入されているらしい(詳しくは&lt;a href=&quot;http://qa.atmarkit.co.jp/q/2269&quot;&gt;railsはどこでcssを指定するのか？&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;コメントの下の方にある&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
 *= require_self
 *= require_tree .
&lt;/pre&gt;
&lt;p&gt;によって、さらに別の&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を読み込むよう指定している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require_tree&lt;/code&gt;でstylesheets配下の&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;をすべて読みこむので、嫌な時はこれをはずしちゃえばいい。&lt;br&gt;
ちなみに、独自に作ったものや他所から持ってきた&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;は&lt;code&gt;require mystyle&lt;/code&gt;などのように指定する。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLでSELECTを書く時の順番]]></title>
        <id>https://blog.bakunyo.com/2013/04/15/order_of_select_sql/</id>
        <link href="https://blog.bakunyo.com/2013/04/15/order_of_select_sql/">
        </link>
        <updated>2013-04-15T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;SELECT文を書いてる時に下記のメモを見ながらやったら超捗ったので、残しておく。&lt;/p&gt;
&lt;p&gt;上から順番に（もちろん必要なものだけ）書いていく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;FROM&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;HAVING&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、サブクエリはFROM句とWHERE句の中に書く。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CakePHPでメールを送ったら文字化けした時の対処法。]]></title>
        <id>https://blog.bakunyo.com/2013/04/03/cakephp_charcode/</id>
        <link href="https://blog.bakunyo.com/2013/04/03/cakephp_charcode/">
        </link>
        <updated>2013-04-03T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h3&gt;[環境]&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/CakePHP&quot;&gt;CakePHP&lt;/a&gt; 1.3&lt;/p&gt;
&lt;h3&gt;[状況]&lt;/h3&gt;
&lt;p&gt;Email&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を使用して、テンプレートを使用せずにシンプルなテキストでメールを送信したら文字化けが発生。&lt;/p&gt;
&lt;h3&gt;[対処]&lt;/h3&gt;
&lt;p&gt;まずは&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;のセットを&lt;a href=&quot;http://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;に設定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$this-&amp;gt;Email-&amp;gt;charset = &#039;utf-8&#039;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;これでも、一部直らない部分がある。&lt;/p&gt;
&lt;p&gt;どうやら、1行の文字数が長い時に自動改行され、そこで文字化けが発生するらしい。&lt;/p&gt;
&lt;p&gt;自動改行されない位に1行の文字数をそもそも長くしておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$this-&amp;gt;Email-&amp;gt;lineLength = 1024;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;これで解決しました。&lt;/p&gt;
&lt;h3&gt;[参考記事]&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/s-yo-ko/20101116&quot;&gt;http://d.hatena.ne.jp/s-yo-ko/20101116&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 2のBracketHighlighterをちょこっとカスタマイズする]]></title>
        <id>https://blog.bakunyo.com/2013/02/24/sublime_bracket_highlighter/</id>
        <link href="https://blog.bakunyo.com/2013/02/24/sublime_bracket_highlighter/">
        </link>
        <updated>2013-02-24T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234202.png&quot; alt=&quot;f:id:bakunyo:20130223234202p:plain&quot; title=&quot;f:id:bakunyo:20130223234202p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2013/02/22/Sublime_Text_2%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%9F%E6%99%82%E3%81%AB%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3&quot;&gt;前回の記事&lt;/a&gt;で導入した&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Sublime&quot;&gt;Sublime&lt;/a&gt; Text 2。&lt;/p&gt;
&lt;p&gt;非常に使い勝手が良いのですが、BracketHighlighterというプラグインで１つ気になることが。。&lt;/p&gt;
&lt;h2&gt;見にくい。&lt;/h2&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234212.png&quot; alt=&quot;f:id:bakunyo:20130223234212p:plain&quot; title=&quot;f:id:bakunyo:20130223234212p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;BracketHighlighterはタグやクォーテーションマークなどの開始と終了をハイライトしてくれるのですが、特にタグ以外がすごく見にくい。&lt;/p&gt;
&lt;p&gt;上記の画像のように、ハイライトの線が太いためにカーソルの位置が見えなくなってしまうのですよね（ちなみにカーソルの位置は２つ目のダブルクォーテーションの後にあります）&lt;/p&gt;
&lt;h2&gt;カスタマイズしてみる。&lt;/h2&gt;
&lt;p&gt;Preferences &amp;gt; Package Settings &amp;gt; BracketHighlighter &amp;gt; Settings - Default を開く。&lt;/p&gt;
&lt;p&gt;すると中盤に、以下の記述が出てくる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Outline? (solid|outline|underline|none)
&amp;quot;quote_style&amp;quot; : &amp;quot;solid&amp;quot;,
&amp;quot;curly_style&amp;quot; : &amp;quot;solid&amp;quot;,
&amp;quot;round_style&amp;quot; : &amp;quot;solid&amp;quot;,
&amp;quot;square_style&amp;quot;: &amp;quot;solid&amp;quot;,
&amp;quot;angle_style&amp;quot; : &amp;quot;solid&amp;quot;,
&amp;quot;tag_style&amp;quot;   : &amp;quot;outline&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでハイライトのスタイルを決めてるみたいですね。&lt;/p&gt;
&lt;p&gt;各キーワードはそれぞれ、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;quote ... &amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;curly ... {}&lt;/li&gt;
&lt;li&gt;round ... ()&lt;/li&gt;
&lt;li&gt;square ... []&lt;/li&gt;
&lt;li&gt;angle ... &amp;lt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;に対応していると思われます（多分...）。&lt;/p&gt;
&lt;p&gt;**&amp;quot;solid&amp;quot;&lt;strong&gt;が例の太いハイライトなので、これを&lt;/strong&gt;&amp;quot;underline&amp;quot;**に変更します。&lt;/p&gt;
&lt;p&gt;ちなみに、Defaultの設定を残しておきたい場合は上記の部分をまるまるコピーしてUserの方にセッティングする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Outline? (solid|outline|underline|none)
&amp;quot;quote_style&amp;quot; : &amp;quot;underline&amp;quot;,
&amp;quot;curly_style&amp;quot; : &amp;quot;underline&amp;quot;,
&amp;quot;round_style&amp;quot; : &amp;quot;underline&amp;quot;,
&amp;quot;square_style&amp;quot;: &amp;quot;underline&amp;quot;,
&amp;quot;angle_style&amp;quot; : &amp;quot;underline&amp;quot;,
&amp;quot;tag_style&amp;quot;   : &amp;quot;outline&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**&amp;quot;underline&amp;quot;**にした場合は以下のようにハイライトされます。&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130223/20130223234216.png&quot; alt=&quot;f:id:bakunyo:20130223234216p:plain&quot; title=&quot;f:id:bakunyo:20130223234216p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;少し地味ですが、ちゃんとカーソルの位置が見えるようになりました！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gmailのアーカイブ機能と個人的によく使うショートカット]]></title>
        <id>https://blog.bakunyo.com/2013/02/21/archive_gmail/</id>
        <link href="https://blog.bakunyo.com/2013/02/21/archive_gmail/">
        </link>
        <updated>2013-02-21T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130206/20130206230926.png&quot; alt=&quot;f:id:bakunyo:20130206230926p:plain&quot; title=&quot;f:id:bakunyo:20130206230926p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/WEB%A5%E1%A1%BC%A5%EB&quot;&gt;WEBメール&lt;/a&gt;として不動の人気を誇る**&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;**。&lt;/p&gt;
&lt;p&gt;その人気の主な理由が、**&amp;quot;アーカイブという概念&amp;quot;&lt;strong&gt;と&lt;/strong&gt;&amp;quot;豊富なショートカットキー&amp;quot;**にあると思います。&lt;/p&gt;
&lt;p&gt;僕は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;を使い始めて６年位経ちますが、もはや他のメールサービスに乗り換える気が全く起きません。&lt;/p&gt;
&lt;p&gt;一時期は1日600件ほどのメールを&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;でさばいていましたが、メールに追われるという感覚は無かったです。&lt;/p&gt;
&lt;p&gt;ということで、今回は僕なりの&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;活用術を紹介します。&lt;/p&gt;
&lt;h2&gt;アーカイブとは？&lt;/h2&gt;
&lt;p&gt;アーカイブを説明するためには**「受信BOX」&lt;strong&gt;と&lt;/strong&gt;「すべてのメール」**について説明が必要でしょう。&lt;/p&gt;
&lt;p&gt;**「受信BOX」**はいわば玄関のポストのようなもの届いたメールがまず受信BOXに入ってきます。&lt;/p&gt;
&lt;p&gt;ポストに届いたメールに対して返信するか捨てるのか、何らかの処理を行います。&lt;/p&gt;
&lt;p&gt;何らかの&amp;quot;すべき処理&amp;quot;が済んだら、&lt;strong&gt;アーカイブ&lt;/strong&gt;を行います。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;アーカイブ&lt;/strong&gt;とは**「受信BOX」&lt;strong&gt;から取り除くこと。ただし、&lt;strong&gt;アーカイブ&lt;/strong&gt;は&lt;/strong&gt;削除**ではないという所がミソです。&lt;/p&gt;
&lt;p&gt;受信BOXからアーカイブされたメールは、**「すべてのメール」**にきちんと保管されている為、後から検索などができます。&lt;/p&gt;
&lt;p&gt;つまり、何らかの処理を行わなければならないメール&lt;strong&gt;だけ&lt;/strong&gt;を受信BOXに残しておき、それ以外はアーカイブしておけば良いわけです。&lt;/p&gt;
&lt;h2&gt;容量は大丈夫なの？&lt;/h2&gt;
&lt;p&gt;削除せずにすべて残しておくわけですから、容量が心配になります。&lt;/p&gt;
&lt;p&gt;しかし、そこは&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;さんの素晴らしいところで、なんと**10GB(!!)**もの容量を用意してくれています。&lt;/p&gt;
&lt;p&gt;何か以前よりも増えたような…&lt;/p&gt;
&lt;p&gt;添付ファイル付きメールを毎日、大量に受け取っていない限り、この容量で足りなくなることはまずありません。&lt;/p&gt;
&lt;p&gt;という訳で、この&lt;strong&gt;アーカイブ&lt;/strong&gt;システム。使っていくほどに良さが分かってきます！&lt;/p&gt;
&lt;h2&gt;ショートカットキーを使ってみる&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Gmail&quot;&gt;Gmail&lt;/a&gt;でよく使うショートカットキーを列挙します。&lt;br&gt;
（ショートカットキーを有効にするために、設定の変更が必要です！）&lt;br&gt;
右２列は、メールを一覧している画面と個別のメールを開いてる時で有効かどうかです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;キー&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;メール一覧&lt;/th&gt;
&lt;th&gt;個別メール&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ｊ&lt;/td&gt;
&lt;td&gt;次のメールへ&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;◯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ｋ&lt;/td&gt;
&lt;td&gt;前のメールへ&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;◯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ｏ&lt;/td&gt;
&lt;td&gt;メールを開く&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ｘ&lt;/td&gt;
&lt;td&gt;メールを選択する&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Shift +ｉ&lt;/td&gt;
&lt;td&gt;選択したメールを既読にする&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ｅ&lt;/td&gt;
&lt;td&gt;アーカイブする&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;◯&lt;/td&gt;
&lt;td&gt;◯&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[改行コードを知る]]></title>
        <id>https://blog.bakunyo.com/2013/01/31/linefeeds/</id>
        <link href="https://blog.bakunyo.com/2013/01/31/linefeeds/">
        </link>
        <updated>2013-01-31T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130131/20130131070720.jpg&quot; alt=&quot;f:id:bakunyo:20130131070720j:plain&quot; title=&quot;f:id:bakunyo:20130131070720j:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;photo credit: &lt;a href=&quot;http://www.flickr.com/photos/olivander/999389454/&quot;&gt;Olivander&lt;/a&gt; via &lt;a href=&quot;http://photopin.com&quot;&gt;photopin&lt;/a&gt; &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/2.0/&quot;&gt;cc&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;改行コードって？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89&quot;&gt;改行コード - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
 改行コード とは、ワードプロセッサ（ワープロ専用機）やコンピュータなどにおいて、改行を表す制御文字である。日本では「改行コード」と総称する事が一般的なため、本項目では、キャリッジリターン(CR)とラインフィード(LF)の両方について記載する。
&lt;/pre&gt;
&lt;p&gt;ちなみに&lt;strong&gt;改行&lt;/strong&gt;とは、&lt;strong&gt;ひとつ下の行の行頭にカーソルを移すこと。&lt;/strong&gt;&lt;br&gt;
システムによって改行を表すコードが異なることがある為、いくつかの問題が発生してしまうことがあるんですね〜。。&lt;/p&gt;
&lt;h2&gt;CRとLFって？&lt;/h2&gt;
&lt;p&gt;改行コードは主に、CR(Carrige Return：行頭復帰)とLF(Line Feed：改行)の2種類あるようです。&lt;br&gt;
どちらも、語源はタイプライターに由来します（&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Wikipedia&quot;&gt;Wikipedia&lt;/a&gt;参照）。&lt;/p&gt;
&lt;h2&gt;OS間の違い&lt;/h2&gt;
&lt;p&gt;OS間で使われる改行コードが異なるようです（！）。&lt;br&gt;
Windows　→　CR+LF&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Mac%20OS&quot;&gt;Mac OS&lt;/a&gt;   →　CR&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/keyword/UNIX&quot;&gt;UNIX&lt;/a&gt;　　 →　LF&lt;/p&gt;
&lt;p&gt;テキストデータを扱う時は、&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;だけでなく改行コードにも気をつけましょう！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[会社でコーヒーミーティング@KDDIウェブコミュニケーションズに参加してきました]]></title>
        <id>https://blog.bakunyo.com/2013/01/18/coffee_meeting/</id>
        <link href="https://blog.bakunyo.com/2013/01/18/coffee_meeting/">
        </link>
        <updated>2013-01-18T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;コーヒーミーティングの会社見学イベントに参加してきました。&lt;/h2&gt;
&lt;p&gt;1月16日（水）&lt;strong&gt;@&lt;a href=&quot;http://d.hatena.ne.jp/keyword/KDDI&quot;&gt;KDDI&lt;/a&gt;ウェブコミュニケーションズで行われた会社見学イベント&lt;/strong&gt;に参加してきました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://coffeemeeting.jp/events/20130116&quot;&gt;2013年1月16日 会社でコーヒーミーティング@KDDIウェブコミュニケーションズ | CoffeeMeeting[コーヒーミーティング]&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/events/20130116&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/events/20130116&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;普段は1対1で対話するコーヒーミーティングですが、今回は複数人（40人程度）が参加し、非常に新鮮な感じがしました。&lt;/p&gt;
&lt;h2&gt;コーヒーミーティングって？&lt;/h2&gt;
&lt;p&gt;そもそもの話ですが、CoffeeMeetingを知らない方向けにご紹介です！&lt;/p&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
＜コンセプト＞
CoffeeMeeting（コーヒーミーティング）は、コーヒー1杯を飲む時間を一緒に過ごしたい人と出会うためのサービスです。使い方はカンタン。あなたがお茶したい空き時間を登録し、ほかのユーザーからの申し込みを待つだけ。ちょっとした空き時間に気軽にお茶してみましょう！
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://coffeemeeting.jp/&quot;&gt;CoffeeMeeting[コーヒーミーティング]&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://coffeemeeting.jp/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://coffeemeeting.jp/&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;イベントの大まかな流れ&lt;/h2&gt;
&lt;p&gt;当日は19:30に始まり、最後は少し時間押して21時過ぎに終了しました。大まかな流れと時間配分は、こんな感じです。&lt;/p&gt;
&lt;p&gt;(1) 社員さんとコーヒーミーティング（30分位）&lt;br&gt;
(2) エイプリルフール企画を考えよう！（１時間位）&lt;br&gt;
(3) 豪華景品が当たる！ クイズ大会（15分位）&lt;/p&gt;
&lt;h2&gt;感想など&lt;/h2&gt;
&lt;p&gt;当然、イベントの進行に沿って事が運んでいくので、普段のコーヒーミーティングのようなゆったりした会話はあまり出来ませんでした…。&lt;br&gt;
ですが、多くの方と触れ合い、さらにそこから繋がりを持っていけるという意味で、とても有意義な時間を過ごすことができました！&lt;br&gt;
コーヒーミーティング代表の&lt;a href=&quot;http://coffeemeeting.jp/daisaku&quot;&gt;daisaku&lt;/a&gt;さんにも初めてご挨拶することができ、非常に気持ちが昂ぶりました。&lt;br&gt;
daisakuさん他、イベントを企画運営してくださった&lt;a href=&quot;http://d.hatena.ne.jp/keyword/KDDI&quot;&gt;KDDI&lt;/a&gt;ウェブコミュニケーションズの皆様、ありがとうございました！ ！&lt;/p&gt;
&lt;p&gt;最後に、クイズ大会で空気を読まずに勝ちとってきたノベルティ・ステッカーの写真がこちらになります。&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130118/20130118075047.jpg&quot; alt=&quot;f:id:bakunyo:20130118075047j:plain&quot; title=&quot;f:id:bakunyo:20130118075047j:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;皆さんも、レッツ・コーヒーミーティング！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文字コードについての２つの概念]]></title>
        <id>https://blog.bakunyo.com/2013/01/16/char_code/</id>
        <link href="https://blog.bakunyo.com/2013/01/16/char_code/">
        </link>
        <updated>2013-01-16T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://bakunyo.hatenablog.com/entry/2012/12/27/IT%E3%83%91%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E8%A9%A6%E9%A8%93_%E5%8D%98%E8%AA%9Epart1&quot;&gt;以前の投稿&lt;/a&gt;からしばらく&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;について気になっていたので、少し整理してみました。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;って？&lt;/h2&gt;
&lt;pre class=&quot;code&quot; data-unlink=&quot;&quot;&gt;
文字コード（もじコード）はコンピュータ上で文字を利用するために各文字に割り当てられるバイト表現。もしくは、バイト表現と文字の対応関係（文字コード体系）のことを指して「文字コード」と呼ぶことも多い。
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89&quot;&gt;文字コード - Wikipedia&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;## なぜ、ややこしいのか&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;に関して、&lt;strong&gt;（符号化）&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7&quot;&gt;文字集合&lt;/a&gt;&lt;strong&gt;と&lt;/strong&gt;（文字）符号化方式&lt;/strong&gt;という区別がなされることがあるそうです。&lt;br&gt;
**（符号化）&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7&quot;&gt;文字集合&lt;/a&gt;**とは読んで字の如く、割り当ての対象にしている文字の集合のこと。&lt;br&gt;
&lt;strong&gt;「全てのひらがな」&lt;strong&gt;や&lt;/strong&gt;「全てのひらがなとカタカナと漢字」&lt;strong&gt;みたいなものですね。&lt;br&gt;
一方で、&lt;/strong&gt;（文字）符号化方式&lt;/strong&gt;とは&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7&quot;&gt;文字集合&lt;/a&gt;をコンピュタが利用できるバイト列にどう変換するのか、という決め事。&lt;br&gt;
「あ」は001、「い」は010、「う」は011みたいに決まっていくんですかね。&lt;/p&gt;
&lt;p&gt;上に挙げた投稿で「&lt;a href=&quot;http://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;の一種なのかな？」と書きましたが、まさにこの２つの区別が出来ていなかった事が混乱の原因でした。一種なのではなく、それぞれ、**「&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt; = （符号化）&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BD%B8%B9%E7&quot;&gt;文字集合&lt;/a&gt;」「&lt;a href=&quot;http://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt; = （文字）符号化方式」**という対応関係になっていたのですね。&lt;/p&gt;
&lt;h2&gt;参考記事&lt;/h2&gt;
&lt;p&gt;こちらのブログを参考にさせていただきました。&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome&quot;&gt;UnicodeとUTF-8の違いは？ - 自分的まとめ - Humanity&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://d.hatena.ne.jp/tyru/20091130/nichan_uni_utf8_matome&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javaエンジニア研修スタート]]></title>
        <id>https://blog.bakunyo.com/2013/01/09/learning_java/</id>
        <link href="https://blog.bakunyo.com/2013/01/09/learning_java/">
        </link>
        <updated>2013-01-09T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;h2&gt;本日から研修スタート&lt;/h2&gt;
&lt;p&gt;本日(1/8)から、新たな会社で&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;エンジニアの研修がスタートした。&lt;br&gt;
年始ということもあって同期もそこそこいるんだけど、緊張の面持ちが伝わってくる。&lt;/p&gt;
&lt;h2&gt;訪れるしあわせな時間&lt;/h2&gt;
&lt;p&gt;これまでは勤務時間が終わって自宅に帰ってからの独学を続けていた。なので、日中の時間をおおいに使って技術の勉強に専念できるって、本当に幸せです。&lt;/p&gt;
&lt;h2&gt;自宅の環境も構築&lt;/h2&gt;
&lt;p&gt;自宅でも時々勉強する必要あるかな〜と思い、先ほどノートPC（OS：&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ubuntu&quot;&gt;Ubuntu&lt;/a&gt;）に&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Eclipse&quot;&gt;Eclipse&lt;/a&gt;をインストール。このPCは元々新品で買ってWin7が入っていたんだけど、購入直後にわざわざ追い出して&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Ubuntu&quot;&gt;Ubuntu&lt;/a&gt;をインストールしました（何やってんだ俺）。&lt;/p&gt;
&lt;h2&gt;今後も続きます。&lt;/h2&gt;
&lt;p&gt;会社での研修は&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Java&quot;&gt;Java&lt;/a&gt;だけど、それに限らず色々なことに取り組んでいきたいなぁと思います！&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[後で読むサービス「Pocket」の残り件数を確認する方法]]></title>
        <id>https://blog.bakunyo.com/2013/01/06/rest_of_pocket/</id>
        <link href="https://blog.bakunyo.com/2013/01/06/rest_of_pocket/">
        </link>
        <updated>2013-01-06T00:00:00Z</updated>
        <content type="html"><![CDATA[&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095333.png&quot; alt=&quot;f:id:bakunyo:20130106095333p:plain&quot; title=&quot;f:id:bakunyo:20130106095333p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/RSS&quot;&gt;RSS&lt;/a&gt;処理ツールとしてPocketは超便利。&lt;/h2&gt;
&lt;p&gt;GoogleRSSで気になった記事を一旦&lt;a href=&quot;getpocket.com/&quot;&gt;Pocket&lt;/a&gt;に入れておいて、後で読めるようにしておいてる。やり方はこちらの記事が参考になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kazoo1837.blog23.fc2.com/blog-entry-355.html&quot;&gt;スキマ時間を活用したRSS処理法。記事はPocketにまとめてからシェア。 / 旧:あなたのスイッチを押すブログ&lt;/a&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://kazoo1837.blog23.fc2.com/blog-entry-355.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://kazoo1837.blog23.fc2.com/blog-entry-355.html&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;でも、どんどんPocketに投入しているといつの間にか記事が溜まりに溜まって消化不良になってしまう。。&lt;br&gt;
PocketでまだArchiveしてない記事があと何件あるのか、気になりますよねぇ！ ？&lt;/p&gt;
&lt;h2&gt;PC版ではHomeの残件数が見れない。&lt;/h2&gt;
&lt;p&gt;ええ。残念ながら、見れないんです。&lt;br&gt;
&lt;a href=&quot;getpocket.com/&quot;&gt;Pocket&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/iPhone&quot;&gt;iPhone&lt;/a&gt;版では見れる。&lt;/h2&gt;
&lt;p&gt;できるかなーと思って試してみたら、できたんです。&lt;br&gt;
Optionで設定する箇所があったので紹介しておきます。&lt;br&gt;
まずはOptionをタッチして…&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106095952.png&quot; alt=&quot;f:id:bakunyo:20130106095952p:plain&quot; title=&quot;f:id:bakunyo:20130106095952p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;LISTの下の「Show App Badge Count」をONにする&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100002.png&quot; alt=&quot;f:id:bakunyo:20130106100002p:plain&quot; title=&quot;f:id:bakunyo:20130106100002p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;結果、Badgeに残り件数が表示されるようになりました！&lt;/p&gt;
&lt;p&gt;&lt;span itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130106/20130106100020.png&quot; alt=&quot;f:id:bakunyo:20130106100020p:plain&quot; title=&quot;f:id:bakunyo:20130106100020p:plain&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;残り件数が分かるようになって、処理するまでの時間が読めるようになりました。&lt;/p&gt;
]]></content>
        <author>
            <name>Izuta Hiroyuki</name>
            <email>izuta.hiroyuki@gmail.com</email>
            <uri>https://github.com/bakunyo</uri>
        </author>
    </entry>
</feed>