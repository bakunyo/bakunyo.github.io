{"post":{"id":39,"path":"/2016/12/30/devise-friendly-forwarding/","date":"2016/12/30 16:34","title":"Deviseでフレンドリーフォワーディングを実装する","tags":["ruby","rails","devise","security"],"body":"<h2>前置き</h2>\n<p>Railsでの認証に <a href=\"https://github.com/plataformatec/devise\">Devise</a> を使っている人は多いと思います。<br>\nただ、 Devise はデフォルトでは<strong>フレンドリーフォワーディング</strong>が効いていません。</p>\n<p>フレンドリーフォワーディングとは、ユーザーが認証前に開こうとしていたページへ、認証後にリダイレクトさせることです。<br>\n参考： <a href=\"http://railstutorial.jp/chapters/updating_and_deleting_users?version=4.2#sec-friendly_forwarding\">Rails チュートリアル</a></p>\n<p>最近機会があったので、<a href=\"https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update\">DeviseのHow To</a>を参考に実装しました。<br>\nその際にやったことを残しておきます。</p>\n<p>なお、各バージョンは以下の通りです。</p>\n<ul>\n<li>Ruby 2.3.1</li>\n<li>Rails 4.2.7.1</li>\n<li>Devise 3.5.1</li>\n</ul>\n<h2>手順</h2>\n<h3>アクセスされたURLを保存する</h3>\n<p>認証前にアクセスしようとしたページをセッションに保存します。<br>\n<code>current_user</code> が取得できれば認証できているので、その場合は除外しています。<br>\nまた、 <code>devise_controller</code> の各アクションの場合も除外しています。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/controllers/application_controller.rb</span>\n\nbefore_action <span class=\"hljs-symbol\">:store_current_location</span>, <span class=\"hljs-symbol\">unless:</span> <span class=\"hljs-symbol\">:devise_controller?</span>\n\nprivate\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">store_current_location</span></span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> current_user\n  store_location_for(<span class=\"hljs-symbol\">:user</span>, request.url)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p><code>store_location_for</code> を呼ぶと、<code>session[:user_return_to]</code> にURLを保存してくれます。<br>\n<code>:user</code> の部分は認証のscopeです。大抵の場合は <code>:user</code> でOKかと思います。</p>\n<p>実は、フレンドリーフォワーディングの実装としてはこれだけで完了です。<br>\n<code>session[:user_return_to]</code> にURLが入っていると、認証後にリダイレクトしてくれるようです。</p>\n<p>ただ、セキュリティ対策として以下の場合は追加の対応が必要です。</p>\n<h3>認証後にセッションをリセットする場合</h3>\n<p><a href=\"http://railsguides.jp/\">Rails ガイド</a> のセキュリティのページで、<a href=\"http://railsguides.jp/security.html#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83-%E5%AF%BE%E5%BF%9C%E7%AD%96\">セッション固定攻撃の対応策</a> について紹介されています。<br>\nログイン認証の際に、 <code>reset_session</code> を行なうというものです。<br>\nこれを行なうと、当然上で保存したURLも消えてしまうので、その値だけ別途引き継ぐ対応を行ないます。</p>\n<h3><code>user_return_to</code> を引き継ぐ</h3>\n<p><code>Devise::SessionsController</code> を継承したControllerで以下の対応をします。</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/controllers/sessions_controller.rb</span>\n\nbefore_action <span class=\"hljs-symbol\">:reset_session_before_login</span>, <span class=\"hljs-symbol\">only:</span> <span class=\"hljs-symbol\">:create</span>\n\nprivate\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">reset_session_before_login</span></span>\n  user_return_to = session[<span class=\"hljs-symbol\">:user_return_to</span>]\n  reset_session\n\n  session[<span class=\"hljs-symbol\">:user_return_to</span>] = user_return_to <span class=\"hljs-keyword\">if</span> user_return_to\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>これで、認証時の <code>reset_session</code> をしつつフレンドリーフォワーディングをすることが可能になりました。</p>\n"}}