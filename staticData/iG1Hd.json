{"post":{"id":17,"path":"/2013/06/20/crontab/","date":"2013/06/20 09:00","title":"crontab使い方まとめ。","tags":["linux"],"body":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/b/bakunyo/20130620/20130620214241.jpg\" alt=\"f:id:bakunyo:20130620214241j:plain\" title=\"f:id:bakunyo:20130620214241j:plain\"></span></p>\n<p><a href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>で定期的にコマンドを実行してくれる<span style=\"color: #ff0000\"><strong>crontab</strong></span>の使い方をまとめてみました。</p>\n<h2>まずはcrondが起動しているか確認</h2>\n<p>デフォルトでは自動起動のはずですが、念の為crondが起動しているかを確認しておきましょう。<br>\nここで起動していなければ、その後の設定をいくらしても動いてくれることはありません:D</p>\n<pre class=\"code\" data-unlink=\"\">\n# /etc/rc.d/init.d/crond status\ncrond (pid  xxxx) を実行中...     // ちゃんと起動していますね！\n</pre>\n<h2>crontabファイルの設定</h2>\n<p>crondが起動していることを確認できたら、crontabファイルの設定です。<br>\ncrontabファイルには「<strong><span style=\"color: #ff0000\">この日付のこの時刻にこのコマンドを実行せよ</span></strong>」という命令が書き込まれています。<br>\ncrontabファイルは<code>/var/spool/cron/user</code>(ユーザー毎)に保存されていますが、<strong>基本的にcrontabファイルは直接編集せず、</strong><code>crontab</code>コマンドを使って編集するのが習わしです。<br>\n以下はcrontabコマンドの説明です。</p>\n<h4>crontabコマンド</h4>\n<pre class=\"code\" data-unlink=\"\">\ncrontab [-u user] file\n　または\ncrontab [-u user] [-e | -l | -r | -i]\n</pre>\n<h4>各オプションの説明</h4>\n<table>\n<thead>\n<tr>\n<th>オプション</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>userに対象となるユーザーを指定</td>\n</tr>\n<tr>\n<td>e</td>\n<td>エディタを起動し、crontabの内容を編集する</td>\n</tr>\n<tr>\n<td>l</td>\n<td>現在登録されている内容を表示する</td>\n</tr>\n<tr>\n<td>r</td>\n<td>現在登録されている内容を削除する</td>\n</tr>\n<tr>\n<td>i</td>\n<td>(rと併用して)削除する前に確認プロンプトを表示</td>\n</tr>\n</tbody>\n</table>\n<p>オプションでeを指定しようとしたら間違えてrを押してしまい、設定が全て削除されてしまった悲しい事例が各所で報告されています。</p>\n<hr>\n<p><a href=\"http://blog.cles.jp/item/3303\">crontab -r とやってしまった時の対処法</a><a href=\"http://b.hatena.ne.jp/entry/http://blog.cles.jp/item/3303\"><img src=\"http://b.hatena.ne.jp/entry/image/http://blog.cles.jp/item/3303\" alt=\"\"></a><br>\n<a href=\"http://blog.kentarok.org/entry/20061030/1162206137\">crontab -r を安全にする - delirious thoughts</a><a href=\"http://b.hatena.ne.jp/entry/http://blog.kentarok.org/entry/20061030/1162206137\"><img src=\"http://b.hatena.ne.jp/entry/image/http://blog.kentarok.org/entry/20061030/1162206137\" alt=\"\"></a></p>\n<hr>\n<p>誤って削除してしまわないよう、eオプションは使わずに<strong>別ファイルにて管理した方が望ましい</strong>ようです。<br>\n現在eオプションのみで管理しているなら、lオプションをリダイレクトして別ファイルに書き出しておきましょう。</p>\n<pre class=\"code\" data-unlink=\"\">\n# crontab -u user -l > ~/crontab.bk\n</pre>\n<h2>crontabファイルの書き方</h2>\n<p>それではメインの、crontabファイルの書き方についてです。<br>\n「<span style=\"color: #ff0000\"><strong>この日付のこの時刻にこのコマンドを実行せよ</strong></span>」という命令を記述するために、以下の書式を用います。</p>\n<pre class=\"code\" data-unlink=\"\">\n分　時　日　月　曜日　＜コマンド＞\n</pre>\n<p>日付・時刻を表す5つのフィールドには、以下の値を設定できます。</p>\n<table>\n<thead>\n<tr>\n<th>フィールド</th>\n<th>取りうる値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分</td>\n<td>0~59</td>\n</tr>\n<tr>\n<td>時</td>\n<td>0~23</td>\n</tr>\n<tr>\n<td>日</td>\n<td>1~31</td>\n</tr>\n<tr>\n<td>月</td>\n<td>1~12</td>\n</tr>\n<tr>\n<td>曜日</td>\n<td>0~7 (0と7が日曜日)</td>\n</tr>\n</tbody>\n</table>\n<h4>範囲指定</h4>\n<p>各フィールドは<span style=\"color: #ff0000\"><strong>-(ハイフン)</strong></span>でつなげて範囲指定することができます。<br>\n以降、分フィールドを書き方の例として挙げていきます。</p>\n<pre class=\"code\" data-unlink=\"\">\n5-10    // 5分・6分・7分・8分・9分・10分に実行\n</pre>\n<p>このように、<code>5-10</code>と範囲指定することで5分~10分の間に毎分コマンドが実行されます。<br>\n全範囲（分フィールドだと0~59）を範囲指定したい場合には<span style=\"color: #ff0000\"><strong>*(アスタリスク)</strong></span>を使用します。</p>\n<pre class=\"code\" data-unlink=\"\">\n*   // 毎分実行\n</pre>\n<h4>リスト指定</h4>\n<p>不連続な複数の値を指定したい時は、<span style=\"color: #ff0000\"><strong>,(カンマ)</strong></span>で区切ってリスト指定することができます。</p>\n<pre class=\"code\" data-unlink=\"\">\n1,3,5   // 1分・3分・5分に実行\n</pre>\n<p>リスト指定の中に範囲指定を含めることも可能です。</p>\n<pre class=\"code\" data-unlink=\"\">\n1,3,5-10   // 1分・3分・5分・6分・7分・8分・9分・10分に実行\n</pre>\n<h4>間隔値指定</h4>\n<p>「◯分間隔」などとしたい場合は、範囲指定と併せて間隔値を指定することができます。<br>\n範囲指定の後に<span style=\"color: #ff0000\"><strong>/(スラッシュ)</strong></span>をつづけ、その後に間隔値を指定します。</p>\n<pre class=\"code\" data-unlink=\"\">\n5-10/2   // 5分・7分・9分(5分~10分の間の2分間隔)に実行\n*/5   // 5分おきに実行\n</pre>\n<h4>設定例</h4>\n<p>これらの書き方を組み合わせて、「<span style=\"color: #ff0000\"><strong>この日付のこの時刻に</strong></span>」の部分を指定します。<br>\n以下、設定例です。<br>\nここでは仮に、usr/bin/cmdをコマンドとして実行するとします。</p>\n<pre class=\"code\" data-unlink=\"\">\n00 14 * * * /usr/bin/cmd      // 毎日14:00に実行\n* * * * * /usr/bin/cmd        // 毎分実行\n15,30 06 * * 2 /usr/bin/cmd   // 毎週火曜日の6:15と6:30に実行\n05 23 * 3-5 4 /usr/bin/cmd    // 3~5月の毎週木曜日23:05に実行\n</pre>\n<p>といった具合です。</p>\n<h4>ちょっと細かい話。</h4>\n<p>cronは毎分このcrontabファイルをチェックし、**<span style=\"color: #ff0000\">分・時・月が現在時刻と一致し、かつ日と曜日フィールドの2つのいずれかが現在時刻と一致すれば</span>**コマンドを実行します。<br>\nこの部分が少しややこしいのですが、cronは日フィールドと曜日フィールドの2つと見比べてコマンド実行するかを判断します。なので、この２つに関しては少し見方を変えてあげます。<br>\n具体的には、日フィールドと曜日フィールドのそれぞれにおいて、<em>(アスタリスク)と</em>以外を指定した場合のどのような指定になるかを分けるとわかりやすいです。</p>\n<pre><code>   | 日が*           | 日が*以外       \n</code></pre>\n<p>------ | ------------- | ------------<br>\n曜日が*   | 毎日            | 日フィールドで指定した日<br>\n曜日が*以外 | 曜日フィールドで指定した日 | いずれかに当てはまる日</p>\n<p>設定例を以下に挙げます。</p>\n<pre class=\"code\" data-unlink=\"\">\n00 14 * * * /usr/bin/cmd         // 毎日14:00に実行\n00 14 1,5 * * /usr/bin/cmd     // 毎月1日,5日の14:00に実行\n00 14 * * 4 /usr/bin/cmd        // 毎週木曜日14:00に実行\n00 14 1,5 * 4 /usr/bin/cmd    // 毎月1日,5日と毎週木曜日14:00に実行\n</pre>\n<p>といった感じになります。</p>\n<p>他にも書くべきこととして**<a href=\"http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a>の指定**などがあるのですが、疲れたのでここまで。</p>\n"}}