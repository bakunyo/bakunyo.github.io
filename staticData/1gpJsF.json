{"post":{"id":49,"path":"/2019/02/26/github-actions-git-pr-release/","date":"2019/02/26 08:37","title":"git-pr-release を実行する GitHub Action をつくってみた","description":"制限付きパブリックベータで公開中のGitHub Actionsを使って、git-pr-releaseを実行するActionをつくってみた話です","tags":["git","github","LT"],"body":"<p>先日、 <a href=\"https://shinjukult.netlify.com\">Shinjuku.LT</a> というイベントで話してきたのですが、資料をつくっていなかったため当日話したこと(+α)をここに残しておこうと思います。</p>\n<p>話の流れはざっくりいうと、</p>\n<ul>\n<li>GitHub Services を使って master マージ&amp;自動デプロイしていたが、サービスが終了した</li>\n<li>仕方なく手動デプロイしていたが、GitHub Actions で再び自動化できた</li>\n<li>せっかくなので、GitHub Action をつくって公開してみた</li>\n</ul>\n<p>という感じです。</p>\n<p>作成した GitHub Action は Marketplace で公開されています 🎉<br>\nよかったら使ってみてください。<br>\n<a href=\"https://github.com/marketplace/actions/git-pr-release\">https://github.com/marketplace/actions/git-pr-release</a></p>\n<p>以降は、 LT で話した流れに沿って内容を書きます。</p>\n<h2>GitHub Services の利用と終了 🐙</h2>\n<p>昨年つくりはじめた個人開発のアプリで、「GitHub で master マージすると AWS CodeDeploy で自動デプロイされる」というのを GitHub Services を使ってやっていました。</p>\n<p>ググるといくつも記事があがっているので、やっていた人も多かっただろうと思います。<br>\n便利だなーとか思いながら過ごしていたのですが、4月になると GitHub Services が終了するという記事が公開されました。</p>\n<p><a href=\"https://developer.github.com/changes/2018-04-25-github-services-deprecation/\">Announcing the deprecation of GitHub Services</a></p>\n<p>終了することを知った後も特に何もせず、いつかなんとかしようとか思ってたら、いつの間にかサービスが終了し、気づいたら手動デプロイが必要な状況になっていました 😇</p>\n<h2>GitHub Actions の発表 🔈</h2>\n<p>2018年の GitHub Universe で、 GitHub Actions という新機能が発表されました。<br>\n<a href=\"https://github.blog/jp/2018-10-24-action-demos/\">GitHub Actions： みなさんが開発し、GitHubで実行</a><br>\n<img src=\"/images/20190226/github-universe.png\" alt=\"GitHub Universe 2018\"></p>\n<p>ワークフローの自動化とカスタマイズができるようになるもので、現在（2019/02/26時点）は制限付きパブリックベータ版として公開されています。</p>\n<p>本公開前に色々と変更が行われる可能性はありますが、以下のページから登録すれば誰でも利用が可能です。<br>\n<a href=\"https://github.com/features/actions/signup\">Register for GitHub Actions Beta</a></p>\n<p>また、ドキュメントは以下のあたりに公開されています。<br>\n<a href=\"https://developer.github.com/actions/\">https://developer.github.com/actions/</a></p>\n<h2>自動デプロイの復活 🎉</h2>\n<p>GitHub Actions で、割と楽に自動デプロイな生活に戻れそうだったので、使ってみることにしました。</p>\n<p>ベータ版の利用登録をすると、ヘッダーに <strong>Actions</strong> タブが追加されます。<br>\nワークフローの定義は GUI またはソースエディタで、わりかし簡単につくれます。<br>\n<img src=\"/images/20190226/workflow.gif\" alt=\"workflow editor\"></p>\n<p>定義されたイベントを起点に、アクションを組み合わせていきます。<br>\n<a href=\"https://github.com/actions/aws\">awscli を実行できるアクション</a> は既に用意されており、以下のようにワークフローを定義しました。</p>\n<pre><code class=\"hljs bash\">workflow <span class=\"hljs-string\">\"Release workflow\"</span> {\n  on = <span class=\"hljs-string\">\"release\"</span>\n  resolves = [<span class=\"hljs-string\">\"AWS CodeDeploy\"</span>]\n}\n\naction <span class=\"hljs-string\">\"AWS CodeDeploy\"</span> {\n  uses = <span class=\"hljs-string\">\"actions/aws/cli@efb074ae4510f2d12c7801e4461b65bf5e8317e6\"</span>\n  args = <span class=\"hljs-string\">\"deploy create-deployment --application-name {アプリ名} --deployment-group-name {デプロイグループ名} --github-location repository=<span class=\"hljs-variable\">${GITHUB_REPOSITORY}</span>,commitId=<span class=\"hljs-variable\">${GITHUB_SHA}</span>\"</span>\n  secrets = [<span class=\"hljs-string\">\"AWS_ACCESS_KEY_ID\"</span>, <span class=\"hljs-string\">\"AWS_SECRET_ACCESS_KEY\"</span>]\n  env = {\n    AWS_DEFAULT_REGION = <span class=\"hljs-string\">\"ap-northeast-1\"</span>\n  }\n}\n</code></pre>\n<p>workflow ブロックの <code>on</code> で発火イベントを指定します。今回は「master マージ」ではなく「Release タグを Publish」を起点に workflow を実行するようにしました。</p>\n<p>Release タグが draft でなく publish したらイベントが発火します。<br>\n一度 draft に戻して再度 publish しても発火するので、地味に便利です。</p>\n<p>AWS のアクションの方は、 awscli コマンドの引数を <code>args</code> に指定します。<br>\nソースを見るとわかりますが、 Dockerfile の ENTRYPOINT で aws コマンドを実行するようになっています。<br>\n<code>secrets</code> の値はGUIで指定します。</p>\n<p>CodeDeploy 側は今までも使ってたので、特に変更なくスムーズにデプロイできました 💪</p>\n<h2>GitHub Action の作成と公開 🚀</h2>\n<p>今回、 LT 発表するにあたりもう少しネタが欲しいと思っていたので、 GitHub Action をつくることにしました。</p>\n<p>自分でリリースフローつくる時にほぼ毎回お世話になっている <a href=\"https://github.com/motemen/git-pr-release\">git-pr-release</a> を GitHub Action で実行できるようにしてみました。</p>\n<p>再掲になりますが、以下の GitHub Marketplace のページにあがっています。<br>\n<a href=\"https://github.com/marketplace/actions/git-pr-release\">https://github.com/marketplace/actions/git-pr-release</a></p>\n<p><img src=\"/images/20190226/marketplace.png\" alt=\"GitHub Marketplace - git-pr-release\"></p>\n<h3>使い方 📝</h3>\n<p>ワークフローのサンプルはこんな感じです。</p>\n<pre><code class=\"hljs bash\">workflow <span class=\"hljs-string\">\"Create PR to master\"</span> {\n  resolves = [<span class=\"hljs-string\">\"git-pr-release\"</span>]\n  on = <span class=\"hljs-string\">\"push\"</span>\n}\n\naction <span class=\"hljs-string\">\"Filter branch\"</span> {\n  uses = <span class=\"hljs-string\">\"actions/bin/filter@24a566c2524e05ebedadef0a285f72dc9b631411\"</span>\n  args = <span class=\"hljs-string\">\"branch staging\"</span>\n}\n\naction <span class=\"hljs-string\">\"git-pr-release\"</span> {\n  uses = <span class=\"hljs-string\">\"bakunyo/git-pr-release-action@master\"</span>\n  needs = [<span class=\"hljs-string\">\"Filter branch\"</span>]\n  secrets = [<span class=\"hljs-string\">\"GITHUB_TOKEN\"</span>]\n}\n</code></pre>\n<p><code>push</code> イベントを起点にワークフローを実行し、<code>Filter branch</code> で「staging ブランチの時」に限定しています。</p>\n<p><a href=\"https://github.com/motemen/git-pr-release\">git-pr-release</a> をセットアップする時に Personal access token を発行した覚えのある方もいると思いますが、このワークフローでは不要です。<br>\nGitHub Actions では、GitHub APIをコールするための <code>GITHUB_TOKEN</code> を<strong>あらかじめ用意してくれます</strong>。<br>\nなので、Secrets を指定する所でチェックするだけでOKです。</p>\n<p><img src=\"/images/20190226/secrets.gif\" alt=\"secrets GITHUB_TOKEN\"></p>\n<h3>ステータス「neutral」について 😐</h3>\n<p>多くのCIサービスと同じように、GitHubのワークフローでも実行コマンドの終了ステータスが <code>0</code> なら成功、そうでなければ失敗となり、フローが中断されます。</p>\n<p>上記のサンプルでブランチが <code>staging</code> 以外だったらどうなるか？<br>\n<a href=\"https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#exit-codes-and-statuses\">GitHub Actionではneutral(78)というステータスが用意されました</a>。</p>\n<p><img src=\"/images/20190226/branch-filter.png\" alt=\"neutral - branch filter\"></p>\n<p>終了ステータスが <code>neutral</code> だと、 workflow は成功でも失敗でもなく、 Pull Request のマージを妨げません。<br>\n自作の GitHub Action をつくる際、適切なタイミングがあれば使ってみると良さそうです。</p>\n<h3>GitHub Action のつくりかた 👨‍🍳</h3>\n<p><a href=\"https://developer.github.com/actions/creating-github-actions/creating-a-new-action/\">公式ドキュメント</a> にわかりやすい説明が書いてあります。<br>\nまた、<a href=\"https://github.com/marketplace?type=actions\">既に公開されているアクション</a> も参考になります。</p>\n<p>今回つくった Action は <a href=\"https://github.com/bakunyo/git-pr-release-action\">こちら</a> です。 README 除くと20行くらいしかないです。 Marketplace に表示される時のアイコンや色を Dockerfile の LABEL で指定できます。</p>\n<p>形式を満たしてリポジトリにあげると、 Marketplace に Publish するボタンが表示されます。<br>\n<img src=\"/images/20190226/publish-marketplace.png\" alt=\"publish marketplace\"></p>\n<p>必要事項が整っているかもチェックしてくれるようです。</p>\n<p><img src=\"/images/20190226/check-action.png\" alt=\"validate action\"></p>\n<p>公開されている GitHub Actions はまだまだ数が少ない（現在132個）ので、やってみたい人は今が狙い目かもしれないです。</p>\n<h2>vs CIサービス？ ⛈</h2>\n<p>公開されている GitHub Actions をみると、 Test や Lint を実行するものが多く見られます。<br>\n現時点で CI サービスに取って代わるかというと、まだまだそんな感じではないですが、1〜2年後はどうなってるかわからないと思います。</p>\n<p>そういう視点でみると、今後の機能としてエラー通知、Services（DBとか）、Cache、Artifacts あたりが追加されそうな気がしました。<br>\n今後どうなっていくかはわかりませんが、本公開が楽しみです。</p>\n"}}