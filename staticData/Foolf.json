{"post":{"id":42,"path":"/2017/07/06/docker-compose-rails/","date":"2017/07/06 00:09","title":"Rails開発環境をdocker-composeで作ってみる","tags":["docker","rails"],"body":"<p>久々に <code>rails new</code> したい欲求が高まったので、今風っぽく <code>docker-compose</code> を使って開発環境をつくります。<br>\ndocker公式がドキュメントを用意してくれているので、まずはそれで感覚を掴んでみます。</p>\n<p><a href=\"https://docs.docker.com/compose/rails/\">Quickstart: Compose and Rails</a></p>\n<p>OSはMac(Sierra)です。手元にあったdockerも少し古くなっていたので、アップグレードしつつ進めます。</p>\n<h1>1. Docker環境の準備</h1>\n<p><a href=\"https://docs.docker.com/docker-for-mac/install/\">Install Docker for Mac</a> からStable版のDockerをダウンロード・インストールします。<br>\n元々<strong>Docker Toolbox</strong>をインストールしていましたが、<strong>Docker for Mac</strong>のインストーラーがよしなに差し替えたり調整してくれました。</p>\n<p>詳しくは以下です。<br>\n<a href=\"https://docs.docker.com/docker-for-mac/docker-toolbox/\">Docker for Mac vs. Docker Toolbox</a></p>\n<p>インストール後のバージョン確認</p>\n<pre><code class=\"hljs bash\">$ docker version\nClient:\n Version:      17.06.0-ce\n API version:  1.30\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:31:53 2017\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      17.06.0-ce\n API version:  1.30 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   02c1d87\n Built:        Fri Jun 23 21:51:55 2017\n OS/Arch:      linux/amd64\n Experimental: <span class=\"hljs-literal\">true</span>\n\n[bakunyo@wasta 01:04:10] ~\n$ docker --version\nDocker version 17.06.0-ce, build 02c1d87\n[bakunyo@wasta 01:04:14] ~\n$ docker-compose --version\ndocker-compose version 1.14.0, build c7bdf9e\n[bakunyo@wasta 01:04:18] ~\n$ docker-machine --version\ndocker-machine version 0.12.0, build 45c69ad\n</code></pre>\n<h1>2. プロジェクトの定義</h1>\n<p>以下の4ファイルを作成します。</p>\n<p><strong>Dockerfile</strong></p>\n<pre><code class=\"hljs docker\"><span class=\"hljs-keyword\">FROM</span> ruby:<span class=\"hljs-number\">2.3</span>.<span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs\n</span><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> mkdir /myapp\n</span><span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /myapp\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> Gemfile /myapp/Gemfile\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> Gemfile.lock /myapp/Gemfile.lock\n</span><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> bundle install\n</span><span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> . /myapp\n</span></code></pre>\n<br />\n<p><strong>Gemfile</strong></p>\n<pre><code class=\"hljs ruby\">source <span class=\"hljs-string\">'https://rubygems.org'</span>\ngem <span class=\"hljs-string\">'rails'</span>, <span class=\"hljs-string\">'5.0.0.1'</span>\n</code></pre>\n<br />\n<p><strong>Gemfile.lock</strong><br>\n空でOK</p>\n<br />\n<p><strong>docker-compose.yml</strong></p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  db:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">postgres</span>\n<span class=\"hljs-attr\">  web:</span>\n<span class=\"hljs-attr\">    build:</span> <span class=\"hljs-string\">.</span>\n<span class=\"hljs-attr\">    command:</span> <span class=\"hljs-string\">bundle</span> <span class=\"hljs-string\">exec</span> <span class=\"hljs-string\">rails</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-bullet\">-p</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-bullet\">-b</span> <span class=\"hljs-string\">'0.0.0.0'</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">.:/myapp</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"3000:3000\"</span>\n<span class=\"hljs-attr\">    depends_on:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">db</span>\n</code></pre>\n<h1>3. プロジェクトのビルド</h1>\n<p>ここからいよいよ <code>docker-compose</code> コマンドを使うので、軽く中身を確認しておきます。</p>\n<p><a href=\"https://docs.docker.com/compose/reference/run/\">docker-compose run</a><br>\n<a href=\"https://docs.docker.com/compose/reference/up/\">docker-compose up</a><br>\n<a href=\"https://docs.docker.com/compose/reference/build/\">docker-compose build</a></p>\n<p><code>docker-compose.yml</code> には複数のサービスが定義されていて、 <code>run</code> は特定のサービス、 <code>up</code> は全サービス(特定も可)に対する命令です。どちらも、コンテナが create &amp; start されます。<br>\nまた、 <code>run</code> は指定したサービス上で実行するコマンドを渡すことができ、 <code>docker-compose.yml</code> に書いてある <code>command</code> を上書きするみたいですね。</p>\n<p>簡単ですが以上を踏まえて、以下のコマンドを実行した後の流れを見ていきます。</p>\n<pre><code class=\"hljs bash\">$ docker-compose run web rails new . --force --database=postgresql\n</code></pre>\n<h3>流れの確認</h3>\n<ul>\n<li>デフォルトネットワークを生成</li>\n<li><code>run web</code> なのでサービス[web]の起動が始まる</li>\n<li><code>depend_on: db</code> となっている為、サービス[db]を先に起動する\n<ul>\n<li>postgresのimageをpull &amp; dbサービス用のネットワークを生成</li>\n</ul>\n</li>\n<li><code>build: .</code> なので <code>Dockerfile</code> を\b元にコンテナを生成する\n<ul>\n<li>ruby:2.3.3 からimageをpull</li>\n<li><code>RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs</code>\n<ul>\n<li>必要なライブラリのインストール</li>\n</ul>\n</li>\n<li><code>RUN mkdir /myapp</code></li>\n<li><code>WORKDIR /myapp</code></li>\n<li><code>ADD Gemfile /myapp/Gemfile</code></li>\n<li><code>ADD Gemfile.lock /myapp/Gemfile.lock</code></li>\n<li><code>RUN bundle install</code>\n<ul>\n<li>WORKDIRを指定しているので、 <code>/myapp/Gemfile</code> を元にインストールが始まる</li>\n</ul>\n</li>\n<li><code>ADD . /myapp</code></li>\n</ul>\n</li>\n<li><code>docker-compose run</code> の引数に渡しているコマンドが実行される(override)\n<ul>\n<li><code>rails new . --force --database=postgresql</code></li>\n<li>コマンドが上書きされているので、 <code>rails s</code> は実行されない</li>\n<li><code>--force</code> オプションで、 <code>Gemfile</code> が上書きされる</li>\n</ul>\n</li>\n</ul>\n<h1>4. 再ビルド</h1>\n<pre><code class=\"hljs bash\">$ docker-compose build\n</code></pre>\n<p>Gemfileが書き換わったので、imageを再ビルドします。<br>\n<code>rails new</code> のとき <code>--skip-bundle</code> しても良さそうですね。</p>\n<h1>5. DB設定</h1>\n<p><code>config/database.yml</code> を以下に書き換え</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">default:</span> <span class=\"hljs-meta\">&amp;default</span>\n<span class=\"hljs-attr\">  adapter:</span> <span class=\"hljs-string\">postgresql</span>\n<span class=\"hljs-attr\">  encoding:</span> <span class=\"hljs-string\">unicode</span>\n<span class=\"hljs-attr\">  host:</span> <span class=\"hljs-string\">db</span>\n<span class=\"hljs-attr\">  username:</span> <span class=\"hljs-string\">postgres</span>\n<span class=\"hljs-attr\">  password:</span>\n<span class=\"hljs-attr\">  pool:</span> <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-attr\">development:</span>\n  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*default</span>\n<span class=\"hljs-attr\">  database:</span> <span class=\"hljs-string\">myapp_development</span>\n\n\n<span class=\"hljs-attr\">test:</span>\n  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*default</span>\n<span class=\"hljs-attr\">  database:</span> <span class=\"hljs-string\">myapp_test</span>\n</code></pre>\n<p><code>host: db</code> で接続できるということですね。\b便利！</p>\n<h1>6. サーバー起動</h1>\n<p>サービスを起動します。</p>\n<pre><code class=\"hljs bash\">$ docker-compose up\n</code></pre>\n<p>別のターミナルを開き、以下を実行します。</p>\n<pre><code class=\"hljs bash\">$ docker-compose run web rake db:create\n</code></pre>\n<br />\nhttp://localhost:3000 にアクセスします。\n<p>ちゃんと\b起動していました！<br>\nDocker環境さえあれば、たった数ファイルでここまで構築できるってすごいですね。<br>\n大体の流れは掴めたので、これをベースに自分用にカスタマイズしていこうと思います。</p>\n"}}