{"post":{"id":20,"path":"/2013/07/11/ruby_silver/","date":"2013/07/11 09:00","title":"Ruby認定技術者のSilverに受かったので諸々の報告","tags":["ruby"],"body":"<p>Ruby認定技術者のSilverに<span style=\"color: #ff0000\"><strong>合格</strong></span>してきました！</p>\n<p>得点は、92点（100点中）。</p>\n<p>勉強の仕方については他のブログ等で多数解説されているので、ここではこれから勉強を始めるという方に役に立ちそうなメモを残しておきます。</p>\n<p>Ruby公式資格教科書には、<strong><span style=\"color: #ff0000\">実は沢山の訂正箇所があります。</span></strong></p>\n<p>学習を始める際には、まず訂正箇所を一気に直しちゃいましょう！</p>\n<p>正誤表は、以下で公開されています。</p>\n<p><a href=\"http://gihyo.jp/book/2012/978-4-7741-5001-7/support\">サポートページ - Ruby公式資格教科書 Ruby技術者認定試験Silver/Gold対応</a></p>\n<p>また、サポートページで記載されてないけど、<span style=\"color: #ff0000\">ここも誤りでは？</span>と思った箇所があるので以下に記載します。</p>\n<h4>[1つ目]p.210 Hashクラスの説明</h4>\n<p>ハッシュは連想配列とも呼ばれ、配列でのインデックスにあたるキーとして、数値以外の任意のRubyオブジェクトを利用できます。</p>\n<p>これは誤りとはいえないかもしれませんが、何か違和感を覚えました。。</p>\n<p>まるで、**<span style=\"color: #ff0000\">連想配列は数値をキーに使用できない</span>**かのような言い回しに感じませんか？</p>\n<p>僕の日本語読解能力が乏しいだけですかね？ そうかもしれないです。。。笑</p>\n<h4>[2つ目]p.228 表5-4 ファイルをテストするメソッド</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>誤</td>\n</tr>\n<tr>\n<td>正</td>\n</tr>\n</tbody>\n</table>\n<p>単なるスペルミスですね。</p>\n<p>こちらはサポートページへお問い合わせ済です。</p>\n<h4>実は破壊的なメソッド一覧</h4>\n<p>公式問題集でかなりの割合を占める、破壊的・非破壊的メソッドの問題。<br>\n<span style=\"color: #ff0000\"><strong>！（エクスクラメーションマーク）</strong></span>が付いてればわかりやすいですが、無くても破壊的である場合が厄介です。</p>\n<p>ということで、！ の付いていない破壊的メソッド、通称**<span style=\"color: #ff0000\">「実は破壊的なメソッド」</span>**を一覧にしてみました。</p>\n<h4>Stringクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">insert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">concat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">［］=</td>\n</tr>\n</tbody>\n</table>\n<h5>おまけ</h5>\n<p>String#deleteは<strong>実は破壊的でない</strong></p>\n<h4>Arrayクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">push</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">concat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">insert</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unshift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[]=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fill</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_at</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n</tr>\n</tbody>\n</table>\n<h4>Hashクラス</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">実は破壊的なメソッド</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">［］=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_if</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">replace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">shift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">update</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n</tr>\n</tbody>\n</table>\n<h4>おまけ</h4>\n<p>実は破壊的じゃないメソッド merge、invert</p>\n<h4>疑問…</h4>\n<p>String#deleteは非破壊的なのに、Array#deleteは破壊的なんですよね。</p>\n<p>このあたり、どう定義分けをしているのか気になって仕方ありません。</p>\n<blockquote>\n<p>2013.7.17 追記</p>\n</blockquote>\n<blockquote>\n<p>破壊的メソッドの覚え方について以下の記事を参考にさせて頂いていました。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://jijixi.azito.com/gotow/widestudio/ruby_with_widestudio/1st_step_ruby_for_C_users.html\">C 言語ユーザのための Ruby 入門</a></p>\n<p>以下は引用。破壊的メソッドは、基本的に以下の3つのどれかだそうです。</p>\n</blockquote>\n<blockquote>\n<hr>\n<p>1.末尾に &quot;!&quot; が付いているメソッド</p>\n</blockquote>\n<blockquote>\n<p>2.リスト的な構造を持つクラスにおいて特定の要素を追加・削除・変更するメソッド</p>\n</blockquote>\n<blockquote>\n<p>3.オブジェクトそのものを置換えたり、消去したり、属性を変更したりするメソッド</p>\n</blockquote>\n<blockquote>\n<hr>\n<p>たしかに、こう考えるとわかりやすいですね！</p>\n</blockquote>\n<h4>Overrideできない演算子</h4>\n<p>最後に、Overrideできない演算子をご紹介しておきます。</p>\n<pre><code class=\"hljs \">= += ! not &amp;&amp; and || or :? ::\n</code></pre>\n<p>これだけ見るとただの記号の羅列にしか見えなくて覚えられそうにありませんが、<br>\n以下のように分類すると記憶しやすいです。</p>\n<ul>\n<li>代入演算子（自己代入を含む）</li>\n<li>論理演算子</li>\n<li>三項演算子</li>\n<li>::</li>\n</ul>\n<p>ということで、次はGold目指してがんばります！</p>\n"}}